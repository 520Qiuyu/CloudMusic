// ==UserScript==
// @name         cloudmusic
// @namespace    https://github.com/520Qiuyu/CloudMusic
// @version      0.0.0
// @author       520Qiuyu
// @description  无需文件云盘快传歌曲(含周杰伦)、歌曲下载&转存云盘(可批量)、云盘匹配纠正、高音质试听、完整歌单列表、评论区显示IP属地、使用指定的IP地址发送评论、歌单歌曲排序(时间、红心数、评论数)、专辑页加载Disc信息、限免VIP歌曲下载上传、云盘音质提升、本地文件上传云
// @icon         https://vitejs.dev/logo.svg
// @homepage     https://github.com/520Qiuyu/CloudMusic
// @homepageURL  https://github.com/520Qiuyu/CloudMusic
// @match        https://music.163.com/**/*
// @require      https://cdn.jsdelivr.net/npm/dayjs@1.11.13/dayjs.min.js
// @require      https://cdn.jsdelivr.net/npm/react@18.3.1/umd/react.production.min.js
// @require      https://cdn.jsdelivr.net/npm/react-dom@18.3.1/umd/react-dom.production.min.js
// @require      https://cdn.jsdelivr.net/npm/antd@5.22.4/dist/antd.min.js
// @require      https://cdn.jsdelivr.net/npm/@ant-design/icons@5.5.2/dist/index.umd.min.js
// @require      https://cdn.jsdelivr.net/npm/node-forge@1.3.1/dist/forge.min.js
// @require      https://cdn.jsdelivr.net/npm/systemjs@6.15.1/dist/system.min.js
// @require      https://cdn.jsdelivr.net/npm/systemjs@6.15.1/dist/extras/named-register.min.js
// @require      data:application/javascript,%3B(typeof%20System!%3D'undefined')%26%26(System%3Dnew%20System.constructor())%3B
// @connect      music.163.com
// @connect      interface.music.163.com
// @grant        GM_addStyle
// @grant        GM_xmlhttpRequest
// @grant        unsafeWindow
// ==/UserScript==

(_=>{if(typeof GM_addStyle=="function"){GM_addStyle(_);return}const o=document.createElement("style");o.textContent=_,document.head.append(o)})(" ._button-group_dcsms_1{position:fixed;right:20px;top:50%;width:44px;max-height:400px;overflow-y:auto;background:#ffffffe6;border-radius:22px;box-shadow:0 2px 10px #0000001a;padding:10px 0;z-index:999}._button-group_dcsms_1::-webkit-scrollbar{width:0;background:transparent}._button-group_dcsms_1 .ant-btn{width:36px;height:36px;padding:0;border:none;background:transparent;display:flex;align-items:center;justify-content:center;margin:4px auto;transition:all .3s}._button-group_dcsms_1 .ant-btn:hover{background:#c20c0c1a;color:#fff;transform:scale(1.1)}._button-group_dcsms_1 .ant-btn:active{transform:scale(.95)}._button-group_dcsms_1 .ant-btn .anticon{font-size:20px;color:#666}._button-group_dcsms_1 .ant-btn:hover .anticon{color:#fff}._button-group_dcsms_1 .ant-tooltip .ant-tooltip-inner{background-color:#000c;border-radius:4px;font-size:12px;padding:4px 8px}._button-group_dcsms_1 .ant-tooltip .ant-tooltip-arrow-content{background-color:#000c}._quick-upload-tabs_10bds_1 .ant-spin{width:100%;height:100%}._quick-upload-tabs_10bds_1 .ant-modal-footer .ant-btn-default{border-color:#d9d9d9;color:#333}._quick-upload-tabs_10bds_1 .ant-modal-footer .ant-btn-default:hover{border-color:#c20c0c;color:#c20c0c}._quick-upload-tabs_10bds_1 .ant-modal-footer .ant-btn-primary{background:#c20c0c;border-color:#c20c0c}._quick-upload-tabs_10bds_1 .ant-modal-footer .ant-btn-primary:hover{background:#a40a0a;border-color:#a40a0a}._quick-upload-tabs_10bds_1 ._select_10bds_21{width:100%}._quick-upload-tabs_10bds_1 ._option-label_10bds_24{display:flex;align-items:center;gap:8px;justify-content:space-between;width:100%}._quick-upload-tabs_10bds_1 ._option-label_10bds_24 ._singer-name_10bds_31{font-weight:500}._quick-upload-tabs_10bds_1 ._option-label_10bds_24 ._tag-group_10bds_34 ._tag_10bds_34:not(:last-child){margin-right:8px}._singer-choose_10bds_38 ._singer-choose-form_10bds_38{display:flex;flex-direction:column;justify-content:space-between;height:400px}._singer-choose_10bds_38 ._singer-choose-form_10bds_38 ._btn-group_10bds_44{display:flex;justify-content:flex-end}._upload-list_10bds_49 .ant-table{margin:16px 0}._upload-footer_10bds_53{width:100%;display:flex;justify-content:flex-end;align-items:center;gap:8px}._upload-stats_10bds_61{color:#666;font-size:13px;margin-right:auto}._upload-stats_10bds_61 ._size-text_10bds_66{color:#999}._upload-stats_10bds_61 ._divider_10bds_69{margin:0 8px;color:#d9d9d9}._upload-confirm_10bds_74{padding:16px 0;font-size:14px}._upload-confirm_10bds_74 ._confirm-item_10bds_78{display:flex;align-items:center;margin-bottom:12px}._upload-confirm_10bds_74 ._confirm-item_10bds_78:last-child{margin-bottom:0}._upload-confirm_10bds_74 ._confirm-item_10bds_78 ._label_10bds_86{color:#666;width:80px;flex-shrink:0}._upload-confirm_10bds_74 ._confirm-item_10bds_78 ._value_10bds_91{color:#333;font-weight:500}._upload-confirm_10bds_74 ._confirm-item_10bds_78 ._value_10bds_91 ._size_10bds_66{margin-left:4px;color:#999;font-weight:400}._upload-progress_10bds_101 ._progress-header_10bds_101{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px;padding:0 4px}._upload-progress_10bds_101 ._progress-header_10bds_101 ._progress-info_10bds_108{font-size:14px;color:#333}._upload-progress_10bds_101 ._progress-header_10bds_101 ._percentage_10bds_112{font-size:14px;font-weight:500;color:#1890ff}._upload-progress_10bds_101 ._progress-list_10bds_117{max-height:300px;overflow-y:auto;padding:0 4px}._upload-progress_10bds_101 ._progress-list_10bds_117 ._progress-item_10bds_122{display:flex;justify-content:space-between;align-items:center;padding:8px 0;border-bottom:1px solid #f0f0f0}._upload-progress_10bds_101 ._progress-list_10bds_117 ._progress-item_10bds_122:last-child{border-bottom:none}._upload-progress_10bds_101 ._progress-list_10bds_117 ._progress-item_10bds_122 ._song-info_10bds_132{flex:1;min-width:0;padding-right:16px}._upload-progress_10bds_101 ._progress-list_10bds_117 ._progress-item_10bds_122 ._song-info_10bds_132 ._name_10bds_137{font-size:14px;color:#333}._upload-progress_10bds_101 ._progress-list_10bds_117 ._progress-item_10bds_122 ._song-info_10bds_132 ._artist_10bds_141{font-size:14px;color:#666;margin-left:4px}._uploadProgressModal_10bds_147 .ant-modal-body{padding:24px}._uploadProgressModal_10bds_147 ._progressContent_10bds_150{display:flex;flex-direction:column;align-items:center;gap:24px}._uploadProgressModal_10bds_147 ._progressInfo_10bds_156{display:flex;flex-direction:column;align-items:center}._uploadProgressModal_10bds_147 ._progressInfo_10bds_156 ._percentage_10bds_112{font-size:24px;font-weight:500;color:#333}._uploadProgressModal_10bds_147 ._progressInfo_10bds_156 ._detail_10bds_166{font-size:14px;color:#666;margin-top:4px}._uploadProgressModal_10bds_147 ._statsContainer_10bds_171{display:flex;justify-content:space-around;width:100%;padding:16px 0;border-top:1px solid #f0f0f0;border-bottom:1px solid #f0f0f0}._uploadProgressModal_10bds_147 ._statsContainer_10bds_171 ._statsItem_10bds_179{text-align:center}._uploadProgressModal_10bds_147 ._statsContainer_10bds_171 ._statsItem_10bds_179 ._label_10bds_86{font-size:14px;color:#666;margin-bottom:8px}._uploadProgressModal_10bds_147 ._statsContainer_10bds_171 ._statsItem_10bds_179 ._value_10bds_91 .ant-tag{margin:0;font-size:14px;padding:4px 12px}._uploadProgressModal_10bds_147 ._failedList_10bds_192{width:100%}._uploadProgressModal_10bds_147 ._failedList_10bds_192 ._failedTitle_10bds_195{font-size:14px;color:#333;margin-bottom:12px;font-weight:500}._uploadProgressModal_10bds_147 ._failedList_10bds_192 ._failedItem_10bds_201{padding:8px 12px;background:#fff1f0;border-radius:4px;margin-bottom:8px}._uploadProgressModal_10bds_147 ._failedList_10bds_192 ._failedItem_10bds_201 ._songName_10bds_207{font-size:14px;color:#333;margin-bottom:4px}._uploadProgressModal_10bds_147 ._failedList_10bds_192 ._failedItem_10bds_201 ._errorMsg_10bds_212{font-size:12px;color:#ff4d4f}._uploadModal_10bds_217 .ant-modal-body{padding:24px}._progressSection_10bds_221{display:flex;flex-direction:column;align-items:center;margin-bottom:24px;padding-bottom:24px;border-bottom:1px solid #f0f0f0}._progressInfo_10bds_156{display:flex;flex-direction:column;align-items:center}._progressInfo_10bds_156 ._percentage_10bds_112{font-size:24px;font-weight:500;color:#333}._progressInfo_10bds_156 ._count_10bds_240{font-size:14px;color:#666;margin-top:4px}._statsContainer_10bds_171{display:flex;justify-content:center;gap:16px;margin-top:20px}._statsContainer_10bds_171 ._statsItem_10bds_179{text-align:center}._statsContainer_10bds_171 ._statsTag_10bds_255{padding:4px 12px;font-size:14px}._songList_10bds_260{max-height:300px;overflow-y:auto;padding-right:4px}._songList_10bds_260::-webkit-scrollbar{width:6px}._songList_10bds_260::-webkit-scrollbar-thumb{background-color:#d9d9d9;border-radius:3px}._songList_10bds_260::-webkit-scrollbar-thumb:hover{background-color:#bfbfbf}._songItem_10bds_276{display:flex;justify-content:space-between;align-items:center;padding:12px;border-radius:4px;background:#fafafa}._songItem_10bds_276:not(:last-child){margin-bottom:8px}._songItem_10bds_276:hover{background:#f5f5f5}._songInfo_10bds_291{display:flex;align-items:center;gap:8px;flex:1;min-width:0}._songInfo_10bds_291 ._songName_10bds_207{font-weight:500;color:#333;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}._songInfo_10bds_291 ._artistName_10bds_305{color:#666;font-size:13px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}._local-upload_ad6cg_1{display:flex;flex-direction:column;gap:16px}._local-upload_ad6cg_1 ._upload-section_ad6cg_6{flex:0 0 170px;display:flex;flex-direction:column;gap:16px}._local-upload_ad6cg_1 ._upload-section_ad6cg_6 ._dragger_ad6cg_12{flex:1;display:flex;flex-direction:column;justify-content:center;align-items:center;border:2px dashed #d9d9d9;border-radius:8px;background:#fafafa;transition:border-color .3s}._local-upload_ad6cg_1 ._upload-section_ad6cg_6 ._dragger_ad6cg_12:hover{border-color:#c20c0c}._local-upload_ad6cg_1 ._upload-section_ad6cg_6 ._dragger_ad6cg_12 ._upload-icon_ad6cg_26{font-size:48px;color:#999}._local-upload_ad6cg_1 ._upload-section_ad6cg_6 ._dragger_ad6cg_12 ._upload-text_ad6cg_30{margin-top:16px;color:#666}._local-upload_ad6cg_1 ._upload-section_ad6cg_6 ._dragger_ad6cg_12 ._upload-hint_ad6cg_34{margin-top:8px;color:#999;font-size:13px}._local-upload_ad6cg_1 ._file-list_ad6cg_39{flex:1;display:flex;flex-direction:column;gap:16px;overflow:hidden}._local-upload_ad6cg_1 ._file-list_ad6cg_39 .ant-table{flex:1}._local-upload_ad6cg_1 ._upload-stats_ad6cg_49{color:#666;font-size:13px}._local-upload_ad6cg_1 ._upload-stats_ad6cg_49 ._size-text_ad6cg_53{color:#999}._local-upload_ad6cg_1 ._upload-stats_ad6cg_49 ._divider_ad6cg_56{margin:0 8px;color:#d9d9d9}._songInfoColumn_19jjf_1{display:flex;align-items:center;gap:8px}._songInfoColumn_19jjf_1 ._songCover_19jjf_6{width:40px;height:40px;border-radius:4px}._songInfoColumn_19jjf_1 ._songInfo_19jjf_1{flex:1 1 0px;overflow:hidden}._songInfoColumn_19jjf_1 ._songInfo_19jjf_1 ._songName_19jjf_15{font-size:14px;color:#333;margin-bottom:4px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;max-width:100%}._songInfoColumn_19jjf_1 ._songInfo_19jjf_1 ._songId_19jjf_24{font-size:12px;color:#999}._footer_19jjf_29{margin-top:16px;display:flex;justify-content:space-between;align-items:center;border-top:1px solid #f0f0f0;padding:16px 0}._footer_19jjf_29 ._actions_19jjf_37{display:flex;gap:8px}._stats_19jjf_42{display:flex;align-items:center;gap:8px}._stats_19jjf_42 ._size_19jjf_47{color:#666}._stats_19jjf_42 ._divider_19jjf_50{color:#999;margin:0 4px}._stats_19jjf_42 .ant-tag{margin:0}._playlist_19jjf_58 .ant-modal-body{padding-bottom:0}._autoAddContent_19jjf_62 ._title_19jjf_62{font-size:16px;margin-bottom:8px}._autoAddContent_19jjf_62 ._statsWrapper_19jjf_66{margin-bottom:16px}._autoAddContent_19jjf_62 ._statsContent_19jjf_69{display:flex;gap:16px;background:#f5f5f5;padding:12px 16px;border-radius:8px}._autoAddContent_19jjf_62 ._statsContent_19jjf_69 ._label_19jjf_76{color:#666}._autoAddContent_19jjf_62 ._statsContent_19jjf_69 ._value_19jjf_79{color:#1890ff;font-size:18px;font-weight:700}._autoAddContent_19jjf_62 ._listHeader_19jjf_84{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}._autoAddContent_19jjf_62 ._listWrapper_19jjf_90{margin:8px 0;max-height:200px;overflow-y:auto;padding:12px;border:1px solid #d9d9d9;border-radius:8px;background:#fff}._autoAddContent_19jjf_62 ._listWrapper_19jjf_90::-webkit-scrollbar{width:6px;height:6px}._autoAddContent_19jjf_62 ._listWrapper_19jjf_90::-webkit-scrollbar-thumb{border-radius:3px;background:#0003}._autoAddContent_19jjf_62 ._listWrapper_19jjf_90::-webkit-scrollbar-track{border-radius:3px;background:#0000001a}._autoAddContent_19jjf_62 ._listItem_19jjf_111{margin-bottom:8px;display:flex;justify-content:space-between;padding:4px 8px;border-radius:4px;transition:all .3s;cursor:default;background:#fff}._autoAddContent_19jjf_62 ._listItem_19jjf_111:hover{background:#f5f5f5}._autoAddContent_19jjf_62 ._listItem_19jjf_111:last-child{margin-bottom:0}._autoAddContent_19jjf_62 ._listItem_19jjf_111 ._itemName_19jjf_127{flex:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}._autoAddContent_19jjf_62 ._listItem_19jjf_111 ._itemCount_19jjf_133{color:#1890ff;margin-left:8px}._deleteConfirmation_19jjf_138{font-size:14px}._deleteConfirmation_19jjf_138 ._title_19jjf_62{font-size:16px;font-weight:700;margin-bottom:12px}._deleteConfirmation_19jjf_138 ._title_19jjf_62 ._count_19jjf_146{color:#1890ff}._deleteConfirmation_19jjf_138 ._songs_19jjf_149{max-height:220px;overflow-y:auto;margin:12px 0;padding:8px;background:#f8f8f8;border-radius:6px;border:1px solid #e8e8e8;line-height:1.6;color:#666}._deleteConfirmation_19jjf_138 ._songs_19jjf_149 ._songItem_19jjf_160{padding:4px 8px;border-radius:4px;transition:all .3s}._deleteConfirmation_19jjf_138 ._songs_19jjf_149 ._songItem_19jjf_160:hover{background:#f0f0f0}._deleteConfirmation_19jjf_138 ._songs_19jjf_149 ._songItem_19jjf_160:not(:last-child){margin-bottom:4px}._deleteConfirmation_19jjf_138 ._warning_19jjf_171{background:#fff2f0;border:1px solid #ffccc7;border-radius:6px;padding:5px;margin-top:12px}._deleteConfirmation_19jjf_138 ._warning_19jjf_171 ._text_19jjf_178{color:#ff4d4f;margin:0;display:flex;align-items:center;gap:8px}._deleteConfirmation_19jjf_138 ._warning_19jjf_171 ._icon_19jjf_185{flex:0 0 20px;display:inline-block;width:20px;height:20px;line-height:20px;text-align:center;border-radius:50%;background:#ff4d4f;color:#fff;font-size:14px;font-weight:700}._container_18cxg_1{display:flex;flex-direction:column;gap:16px;padding:16px;min-height:500px}._uploadArea_62myb_1{border:2px dashed #d9d9d9;border-radius:8px;padding:24px;text-align:center;background:#fafafa;cursor:pointer;transition:border-color .3s}._uploadArea_62myb_1:hover{border-color:#1890ff}._uploadContent_62myb_14{display:flex;flex-direction:column;align-items:center;gap:8px;cursor:pointer}._uploadIcon_62myb_22{font-size:48px;color:#1890ff}._uploadText_62myb_27{color:#666}._uploadText_62myb_27 p{margin:0}._uploadTip_62myb_34{font-size:12px;color:#999}._unlockList_gel3y_1{height:100%;padding:16px;background-color:#fff;border-radius:8px;box-shadow:0 2px 8px #0000001a}._unlockList_gel3y_1 .ant-table-wrapper,._unlockList_gel3y_1 .ant-table,._unlockList_gel3y_1 .ant-table-container{height:100%}._unlockList_gel3y_1 .ant-table-body{height:calc(100% - 55px)!important;overflow-y:auto!important}._unlockList_gel3y_1 .ant-progress,._unlockList_gel3y_1 .ant-tag{margin-right:0}::-webkit-scrollbar{width:6px;height:6px}::-webkit-scrollbar-track{background:transparent;border-radius:6px}::-webkit-scrollbar-thumb{background:#8080804d;border-radius:6px;transition:all .2s ease-in-out}::-webkit-scrollbar-thumb:hover{background:#80808080}*{scrollbar-width:thin;scrollbar-color:rgba(128,128,128,.3) transparent} ");

System.addImportMap({ imports: {"antd":"user:antd","react":"user:react","react-dom":"user:react-dom","@ant-design/icons":"user:@ant-design/icons","node-forge":"user:node-forge"} });
System.set("user:antd", (()=>{const _=antd;('default' in _)||(_.default=_);return _})());
System.set("user:react", (()=>{const _=React;('default' in _)||(_.default=_);return _})());
System.set("user:react-dom", (()=>{const _=ReactDOM;('default' in _)||(_.default=_);return _})());
System.set("user:@ant-design/icons", (()=>{const _=icons;('default' in _)||(_.default=_);return _})());
System.set("user:node-forge", (()=>{const _=forge;('default' in _)||(_.default=_);return _})());

System.register("./__entry.js", ['./__monkey.entry-SDvwpoNt.js'], (function (exports, module) {
	'use strict';
	return {
		setters: [null],
		execute: (function () {



		})
	};
}));

System.register("./__monkey.entry-SDvwpoNt.js", ['react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge'], (function (exports, module) {
  'use strict';
  var forwardRef, useState, useImperativeHandle, useRef, useEffect, memo, useMemo, require$$0, Modal, Progress, Tag, Table, Form, Space, Input, Button, Upload, ConfigProvider, Tabs, Select, message, Spin, Empty, Image, Tooltip, require$$0$1, InboxOutlined, UploadOutlined, CopyrightOutlined, CloudUploadOutlined, CustomerServiceOutlined, UnlockOutlined, InfoCircleOutlined, forge;
  return {
    setters: [module => {
      forwardRef = module.forwardRef;
      useState = module.useState;
      useImperativeHandle = module.useImperativeHandle;
      useRef = module.useRef;
      useEffect = module.useEffect;
      memo = module.memo;
      useMemo = module.useMemo;
      require$$0 = module.default;
    }, module => {
      Modal = module.Modal;
      Progress = module.Progress;
      Tag = module.Tag;
      Table = module.Table;
      Form = module.Form;
      Space = module.Space;
      Input = module.Input;
      Button = module.Button;
      Upload = module.Upload;
      ConfigProvider = module.ConfigProvider;
      Tabs = module.Tabs;
      Select = module.Select;
      message = module.message;
      Spin = module.Spin;
      Empty = module.Empty;
      Image = module.Image;
      Tooltip = module.Tooltip;
    }, module => {
      require$$0$1 = module.default;
    }, module => {
      InboxOutlined = module.InboxOutlined;
      UploadOutlined = module.UploadOutlined;
      CopyrightOutlined = module.CopyrightOutlined;
      CloudUploadOutlined = module.CloudUploadOutlined;
      CustomerServiceOutlined = module.CustomerServiceOutlined;
      UnlockOutlined = module.UnlockOutlined;
      InfoCircleOutlined = module.InfoCircleOutlined;
    }, module => {
      forge = module.default;
    }],
    execute: (function () {

      exports({
        M: trimRightNull,
        R: findZero,
        b: isBitSet$1,
        g: getBitAllignedNumber,
        h: hexToUint8Array,
        j: getBit,
        l: decodeString,
        n: fromBuffer$1,
        s: stripNulls,
        u: uint8ArrayToHex,
        z: uint8ArrayToString
      });

      var __defProp = Object.defineProperty;
      var __defNormalProp = (obj, key, value2) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value2 }) : obj[key] = value2;
      var __publicField = (obj, key, value2) => __defNormalProp(obj, key + "" , value2);
      function getDefaultExportFromCjs(x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
      }
      var jsxRuntime = { exports: {} };
      var reactJsxRuntime_production_min = {};
      /**
       * @license React
       * react-jsx-runtime.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */
      var f = require$$0, k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m$1 = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p = { key: true, ref: true, __self: true, __source: true };
      function q(c, a, g) {
        var b, d = {}, e = null, h = null;
        void 0 !== g && (e = "" + g);
        void 0 !== a.key && (e = "" + a.key);
        void 0 !== a.ref && (h = a.ref);
        for (b in a) m$1.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
        if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
        return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
      }
      reactJsxRuntime_production_min.Fragment = l;
      reactJsxRuntime_production_min.jsx = q;
      reactJsxRuntime_production_min.jsxs = q;
      {
        jsxRuntime.exports = reactJsxRuntime_production_min;
      }
      var jsxRuntimeExports = jsxRuntime.exports;
      var client = {};
      var m = require$$0$1;
      {
        client.createRoot = m.createRoot;
        client.hydrateRoot = m.hydrateRoot;
      }
      const styles$6 = {
        "button-group": "_button-group_dcsms_1"
      };
      const QUALITY_LEVELS = {
        jymaster: "超清母带",
        dolby: "杜比全景声",
        sky: "沉浸环绕声",
        jyeffect: "高清环绕声",
        hires: "Hi-Res",
        lossless: "无损",
        exhigh: "极高",
        higher: "较高",
        standard: "标准",
        超清母带: "jymaster",
        杜比全景声: "dolby",
        沉浸环绕声: "sky",
        高清环绕声: "jyeffect",
        "Hi-Res": "hires",
        无损: "lossless",
        极高: "exhigh",
        较高: "higher",
        标准: "standard"
      };
      const BASE_CDN_URL = "https://fastly.jsdelivr.net/gh/520Qiuyu/cdn@latest/artist/";
      var md5$1 = { exports: {} };
      var crypt = { exports: {} };
      (function() {
        var base64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", crypt$1 = {
          // Bit-wise rotation left
          rotl: function(n2, b) {
            return n2 << b | n2 >>> 32 - b;
          },
          // Bit-wise rotation right
          rotr: function(n2, b) {
            return n2 << 32 - b | n2 >>> b;
          },
          // Swap big-endian to little-endian and vice versa
          endian: function(n2) {
            if (n2.constructor == Number) {
              return crypt$1.rotl(n2, 8) & 16711935 | crypt$1.rotl(n2, 24) & 4278255360;
            }
            for (var i = 0; i < n2.length; i++)
              n2[i] = crypt$1.endian(n2[i]);
            return n2;
          },
          // Generate an array of any length of random bytes
          randomBytes: function(n2) {
            for (var bytes = []; n2 > 0; n2--)
              bytes.push(Math.floor(Math.random() * 256));
            return bytes;
          },
          // Convert a byte array to big-endian 32-bit words
          bytesToWords: function(bytes) {
            for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
              words[b >>> 5] |= bytes[i] << 24 - b % 32;
            return words;
          },
          // Convert big-endian 32-bit words to a byte array
          wordsToBytes: function(words) {
            for (var bytes = [], b = 0; b < words.length * 32; b += 8)
              bytes.push(words[b >>> 5] >>> 24 - b % 32 & 255);
            return bytes;
          },
          // Convert a byte array to a hex string
          bytesToHex: function(bytes) {
            for (var hex = [], i = 0; i < bytes.length; i++) {
              hex.push((bytes[i] >>> 4).toString(16));
              hex.push((bytes[i] & 15).toString(16));
            }
            return hex.join("");
          },
          // Convert a hex string to a byte array
          hexToBytes: function(hex) {
            for (var bytes = [], c = 0; c < hex.length; c += 2)
              bytes.push(parseInt(hex.substr(c, 2), 16));
            return bytes;
          },
          // Convert a byte array to a base-64 string
          bytesToBase64: function(bytes) {
            for (var base64 = [], i = 0; i < bytes.length; i += 3) {
              var triplet = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];
              for (var j = 0; j < 4; j++)
                if (i * 8 + j * 6 <= bytes.length * 8)
                  base64.push(base64map.charAt(triplet >>> 6 * (3 - j) & 63));
                else
                  base64.push("=");
            }
            return base64.join("");
          },
          // Convert a base-64 string to a byte array
          base64ToBytes: function(base64) {
            base64 = base64.replace(/[^A-Z0-9+\/]/ig, "");
            for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {
              if (imod4 == 0) continue;
              bytes.push((base64map.indexOf(base64.charAt(i - 1)) & Math.pow(2, -2 * imod4 + 8) - 1) << imod4 * 2 | base64map.indexOf(base64.charAt(i)) >>> 6 - imod4 * 2);
            }
            return bytes;
          }
        };
        crypt.exports = crypt$1;
      })();
      var cryptExports = crypt.exports;
      var charenc = {
        // UTF-8 encoding
        utf8: {
          // Convert a string to a byte array
          stringToBytes: function(str) {
            return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
          },
          // Convert a byte array to a string
          bytesToString: function(bytes) {
            return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
          }
        },
        // Binary encoding
        bin: {
          // Convert a string to a byte array
          stringToBytes: function(str) {
            for (var bytes = [], i = 0; i < str.length; i++)
              bytes.push(str.charCodeAt(i) & 255);
            return bytes;
          },
          // Convert a byte array to a string
          bytesToString: function(bytes) {
            for (var str = [], i = 0; i < bytes.length; i++)
              str.push(String.fromCharCode(bytes[i]));
            return str.join("");
          }
        }
      };
      var charenc_1 = charenc;
      /*!
       * Determine if an object is a Buffer
       *
       * @author   Feross Aboukhadijeh <https://feross.org>
       * @license  MIT
       */
      var isBuffer_1 = function(obj) {
        return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
      };
      function isBuffer(obj) {
        return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
      }
      function isSlowBuffer(obj) {
        return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
      }
      (function() {
        var crypt2 = cryptExports, utf8 = charenc_1.utf8, isBuffer2 = isBuffer_1, bin = charenc_1.bin, md52 = function(message2, options) {
          if (message2.constructor == String)
            if (options && options.encoding === "binary")
              message2 = bin.stringToBytes(message2);
            else
              message2 = utf8.stringToBytes(message2);
          else if (isBuffer2(message2))
            message2 = Array.prototype.slice.call(message2, 0);
          else if (!Array.isArray(message2) && message2.constructor !== Uint8Array)
            message2 = message2.toString();
          var m2 = crypt2.bytesToWords(message2), l2 = message2.length * 8, a = 1732584193, b = -271733879, c = -1732584194, d = 271733878;
          for (var i = 0; i < m2.length; i++) {
            m2[i] = (m2[i] << 8 | m2[i] >>> 24) & 16711935 | (m2[i] << 24 | m2[i] >>> 8) & 4278255360;
          }
          m2[l2 >>> 5] |= 128 << l2 % 32;
          m2[(l2 + 64 >>> 9 << 4) + 14] = l2;
          var FF = md52._ff, GG = md52._gg, HH = md52._hh, II = md52._ii;
          for (var i = 0; i < m2.length; i += 16) {
            var aa = a, bb = b, cc = c, dd = d;
            a = FF(a, b, c, d, m2[i + 0], 7, -680876936);
            d = FF(d, a, b, c, m2[i + 1], 12, -389564586);
            c = FF(c, d, a, b, m2[i + 2], 17, 606105819);
            b = FF(b, c, d, a, m2[i + 3], 22, -1044525330);
            a = FF(a, b, c, d, m2[i + 4], 7, -176418897);
            d = FF(d, a, b, c, m2[i + 5], 12, 1200080426);
            c = FF(c, d, a, b, m2[i + 6], 17, -1473231341);
            b = FF(b, c, d, a, m2[i + 7], 22, -45705983);
            a = FF(a, b, c, d, m2[i + 8], 7, 1770035416);
            d = FF(d, a, b, c, m2[i + 9], 12, -1958414417);
            c = FF(c, d, a, b, m2[i + 10], 17, -42063);
            b = FF(b, c, d, a, m2[i + 11], 22, -1990404162);
            a = FF(a, b, c, d, m2[i + 12], 7, 1804603682);
            d = FF(d, a, b, c, m2[i + 13], 12, -40341101);
            c = FF(c, d, a, b, m2[i + 14], 17, -1502002290);
            b = FF(b, c, d, a, m2[i + 15], 22, 1236535329);
            a = GG(a, b, c, d, m2[i + 1], 5, -165796510);
            d = GG(d, a, b, c, m2[i + 6], 9, -1069501632);
            c = GG(c, d, a, b, m2[i + 11], 14, 643717713);
            b = GG(b, c, d, a, m2[i + 0], 20, -373897302);
            a = GG(a, b, c, d, m2[i + 5], 5, -701558691);
            d = GG(d, a, b, c, m2[i + 10], 9, 38016083);
            c = GG(c, d, a, b, m2[i + 15], 14, -660478335);
            b = GG(b, c, d, a, m2[i + 4], 20, -405537848);
            a = GG(a, b, c, d, m2[i + 9], 5, 568446438);
            d = GG(d, a, b, c, m2[i + 14], 9, -1019803690);
            c = GG(c, d, a, b, m2[i + 3], 14, -187363961);
            b = GG(b, c, d, a, m2[i + 8], 20, 1163531501);
            a = GG(a, b, c, d, m2[i + 13], 5, -1444681467);
            d = GG(d, a, b, c, m2[i + 2], 9, -51403784);
            c = GG(c, d, a, b, m2[i + 7], 14, 1735328473);
            b = GG(b, c, d, a, m2[i + 12], 20, -1926607734);
            a = HH(a, b, c, d, m2[i + 5], 4, -378558);
            d = HH(d, a, b, c, m2[i + 8], 11, -2022574463);
            c = HH(c, d, a, b, m2[i + 11], 16, 1839030562);
            b = HH(b, c, d, a, m2[i + 14], 23, -35309556);
            a = HH(a, b, c, d, m2[i + 1], 4, -1530992060);
            d = HH(d, a, b, c, m2[i + 4], 11, 1272893353);
            c = HH(c, d, a, b, m2[i + 7], 16, -155497632);
            b = HH(b, c, d, a, m2[i + 10], 23, -1094730640);
            a = HH(a, b, c, d, m2[i + 13], 4, 681279174);
            d = HH(d, a, b, c, m2[i + 0], 11, -358537222);
            c = HH(c, d, a, b, m2[i + 3], 16, -722521979);
            b = HH(b, c, d, a, m2[i + 6], 23, 76029189);
            a = HH(a, b, c, d, m2[i + 9], 4, -640364487);
            d = HH(d, a, b, c, m2[i + 12], 11, -421815835);
            c = HH(c, d, a, b, m2[i + 15], 16, 530742520);
            b = HH(b, c, d, a, m2[i + 2], 23, -995338651);
            a = II(a, b, c, d, m2[i + 0], 6, -198630844);
            d = II(d, a, b, c, m2[i + 7], 10, 1126891415);
            c = II(c, d, a, b, m2[i + 14], 15, -1416354905);
            b = II(b, c, d, a, m2[i + 5], 21, -57434055);
            a = II(a, b, c, d, m2[i + 12], 6, 1700485571);
            d = II(d, a, b, c, m2[i + 3], 10, -1894986606);
            c = II(c, d, a, b, m2[i + 10], 15, -1051523);
            b = II(b, c, d, a, m2[i + 1], 21, -2054922799);
            a = II(a, b, c, d, m2[i + 8], 6, 1873313359);
            d = II(d, a, b, c, m2[i + 15], 10, -30611744);
            c = II(c, d, a, b, m2[i + 6], 15, -1560198380);
            b = II(b, c, d, a, m2[i + 13], 21, 1309151649);
            a = II(a, b, c, d, m2[i + 4], 6, -145523070);
            d = II(d, a, b, c, m2[i + 11], 10, -1120210379);
            c = II(c, d, a, b, m2[i + 2], 15, 718787259);
            b = II(b, c, d, a, m2[i + 9], 21, -343485551);
            a = a + aa >>> 0;
            b = b + bb >>> 0;
            c = c + cc >>> 0;
            d = d + dd >>> 0;
          }
          return crypt2.endian([a, b, c, d]);
        };
        md52._ff = function(a, b, c, d, x, s, t) {
          var n2 = a + (b & c | ~b & d) + (x >>> 0) + t;
          return (n2 << s | n2 >>> 32 - s) + b;
        };
        md52._gg = function(a, b, c, d, x, s, t) {
          var n2 = a + (b & d | c & ~d) + (x >>> 0) + t;
          return (n2 << s | n2 >>> 32 - s) + b;
        };
        md52._hh = function(a, b, c, d, x, s, t) {
          var n2 = a + (b ^ c ^ d) + (x >>> 0) + t;
          return (n2 << s | n2 >>> 32 - s) + b;
        };
        md52._ii = function(a, b, c, d, x, s, t) {
          var n2 = a + (c ^ (b | ~d)) + (x >>> 0) + t;
          return (n2 << s | n2 >>> 32 - s) + b;
        };
        md52._blocksize = 16;
        md52._digestsize = 16;
        md5$1.exports = function(message2, options) {
          if (message2 === void 0 || message2 === null)
            throw new Error("Illegal argument " + message2);
          var digestbytes = crypt2.wordsToBytes(md52(message2, options));
          return options && options.asBytes ? digestbytes : options && options.asString ? bin.bytesToString(digestbytes) : crypt2.bytesToHex(digestbytes);
        };
      })();
      var md5Exports = md5$1.exports;
      const md5 = /* @__PURE__ */ getDefaultExportFromCjs(md5Exports);
      var _GM_xmlhttpRequest = /* @__PURE__ */ (() => typeof GM_xmlhttpRequest != "undefined" ? GM_xmlhttpRequest : void 0)();
      var _unsafeWindow = /* @__PURE__ */ (() => typeof unsafeWindow != "undefined" ? unsafeWindow : void 0)();
      const formatFileSize = (size2) => {
        if (!size2 || isNaN(size2)) return "0 B";
        const units = ["B", "KB", "MB", "GB", "TB"];
        size2 = Math.abs(Number(size2));
        let index = 0;
        while (size2 >= 1024 && index < units.length - 1) {
          size2 /= 1024;
          index++;
        }
        return `${size2.toFixed(index > 0 ? 1 : 0)} ${units[index]}`;
      };
      const formatDuration = (ms2) => {
        const totalSeconds = Math.floor(ms2 / 1e3);
        const minutes = Math.floor(totalSeconds / 60);
        const seconds = totalSeconds % 60;
        return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
      };
      function chunkArray(array, size2) {
        const result = [];
        for (let i = 0; i < array.length; i += size2) {
          result.push(array.slice(i, i + size2));
        }
        return result;
      }
      const getArtistTextInSongDetail = (song2) => {
        var _a;
        return song2.ar ? song2.ar.map((ar) => ar.name).join() : ((_a = song2.pc) == null ? void 0 : _a.ar) || "";
      };
      const getAlbumTextInSongDetail = (song2) => {
        var _a;
        return song2.al ? song2.al.name : ((_a = song2.pc) == null ? void 0 : _a.alb) || "";
      };
      const uniqueArrayByKey = (arr, key) => {
        if (!Array.isArray(arr)) return [];
        if (!key) return arr;
        const seen2 = /* @__PURE__ */ new Map();
        return arr.filter((item) => {
          if (!item || typeof item !== "object") return false;
          const val = item[key];
          if (seen2.has(val)) return false;
          seen2.set(val, true);
          return true;
        });
      };
      const promiseLimit = (promiseArray, limit = 6) => {
        if (!Array.isArray(promiseArray)) {
          throw new Error("第一个参数必须是数组");
        }
        if (!Number.isInteger(limit) || limit < 1) {
          throw new Error("并发限制必须是正整数");
        }
        if (promiseArray.length === 0) {
          return Promise.resolve([]);
        }
        return new Promise((resolve, reject) => {
          const results = new Array(promiseArray.length);
          let completed = 0;
          let currentIndex = 0;
          const runTask = async () => {
            const index = currentIndex++;
            if (index >= promiseArray.length) {
              return;
            }
            try {
              const promise = promiseArray[index];
              if (typeof promise !== "function") {
                throw new Error(`数组中索引为 ${index} 的元素不是函数`);
              }
              results[index] = await promise();
            } catch (error) {
              results[index] = error;
            }
            completed++;
            if (currentIndex < promiseArray.length) {
              runTask();
            } else if (completed === promiseArray.length) {
              resolve(results);
            }
          };
          const tasksToStart = Math.min(limit, promiseArray.length);
          for (let i = 0; i < tasksToStart; i++) {
            try {
              runTask();
            } catch (error) {
              reject(error);
            }
          }
        });
      };
      const getGlobalThis = () => {
        return typeof _unsafeWindow !== "undefined" ? _unsafeWindow : window;
      };
      const getGUser = () => {
        const globalThis2 = getGlobalThis();
        return globalThis2.GUser || {};
      };
      const truncateString = (str, maxLength) => {
        let len = 0;
        let result = "";
        for (let char of str) {
          const charLen = char.charCodeAt(0) > 255 ? 2 : 1;
          if (len + charLen > maxLength) break;
          result += char;
          len += charLen;
        }
        return result;
      };
      const sleep = (ms2) => new Promise((resolve) => setTimeout(resolve, ms2));
      async function getFileMD5(file) {
        const arrayBuffer = await file.arrayBuffer();
        const uint8Array = new Uint8Array(arrayBuffer);
        return md5(uint8Array);
      }
      const msgSuccess = (content) => {
        message.success(content);
      };
      const msgWarning = (content) => {
        message.warning(content);
      };
      const msgError = (content) => {
        message.error(content);
      };
      const confirm = (content, title2, otherOptions = {}) => {
        return new Promise((resolve, reject) => {
          Modal.confirm({
            centered: true,
            content,
            icon: null,
            closable: true,
            title: title2 || "提示",
            width: 398,
            okButtonProps: {
              shape: "round",
              type: "primary"
            },
            cancelButtonProps: {
              shape: "round",
              type: "default"
            },
            okText: "确定",
            cancelText: "取消",
            onCancel: () => {
              reject(false);
            },
            onOk: () => {
              resolve(true);
            },
            ...otherOptions
          });
        });
      };
      const IV = "0102030405060708";
      const PRESET_KEY = "0CoJUm6Qyw8W8jud";
      const PUBLIC_KEY = "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDgtQn2JZ34ZC28NWYpAUd98iZ37BUrX/aKzmFbt7clFSs6sXqHauqKWqdtLkF2KexO40H1YTX8z2lSgBBOAxLsvaklV8k4cBFK9snQXE9/DDaFt6Rr7iVZMldczhC0JNgTz+SHXT6CBHuX3e9SdB1Ua44oncaTWz7OBGLbCiK45wIDAQAB\n-----END PUBLIC KEY-----";
      const BASE62 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
      const aesEncrypt = (text2, key, iv) => {
        const cipher = forge.cipher.createCipher("AES-CBC", key);
        cipher.start({ iv });
        cipher.update(forge.util.createBuffer(text2, "utf8"));
        cipher.finish();
        return forge.util.encode64(cipher.output.getBytes());
      };
      const rsaEncrypt = (text2, key) => {
        const publicKey = forge.pki.publicKeyFromPem(key);
        const encrypted = publicKey.encrypt(text2, "NONE");
        return forge.util.bytesToHex(encrypted);
      };
      const weapi = (object) => {
        const text2 = JSON.stringify(object);
        const secretKey = Array.from(
          { length: 16 },
          () => BASE62.charAt(Math.floor(Math.random() * 62))
        ).join("");
        return {
          params: aesEncrypt(aesEncrypt(text2, PRESET_KEY, IV), secretKey, IV),
          encSecKey: rsaEncrypt(secretKey.split("").reverse().join(""), PUBLIC_KEY)
        };
      };
      const CLIENT_CONFIG = {
        web: {
          cookie: true,
          userAgent: void 0
        },
        android: {
          cookie: "os=android;appver=9.1.78;channel=netease;osver=14;buildver=241009150147;",
          userAgent: "NeteaseMusic/9.1.78.241009150147(9001078);Dalvik/2.1.0 (Linux; U; Android 14; V2318A Build/TP1A.220624.014)"
        },
        pc: {
          cookie: "os=pc;appver=3.0.18.203152;channel=netease;osver=Microsoft-Windows-10-Professional-build-19045-64bit;",
          userAgent: "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36 Chrome/91.0.4472.164 NeteaseMusicDesktop/3.0.18.203152"
        }
      };
      const weapiRequest = (url, config) => {
        const {
          data = {},
          clientType = "pc",
          ip,
          onerror,
          onload,
          originResponse = false,
          ...rest
        } = config;
        const csrfToken = document.cookie.match(/_csrf=([^(;|$)]+)/);
        data.csrf_token = csrfToken ? csrfToken[1] : "";
        const encryptedData = weapi(data);
        console.log({
          url,
          data,
          encryptedData
        });
        const headers = {
          "content-type": "application/x-www-form-urlencoded",
          "user-agent": CLIENT_CONFIG[clientType].userAgent
        };
        if (ip) {
          headers["X-Real-IP"] = ip;
          headers["X-Forwarded-For"] = ip;
        }
        return new Promise((resolve, reject) => {
          _GM_xmlhttpRequest({
            url: url.replace("api", "weapi") + `?csrf_token=${data.csrf_token}`,
            method: "POST",
            responseType: "json",
            headers,
            cookie: CLIENT_CONFIG[clientType].cookie,
            data: `params=${encodeURIComponent(
        encryptedData.params
      )}&encSecKey=${encodeURIComponent(encryptedData.encSecKey)}`,
            onload: (res) => resolve(originResponse ? res : res.response),
            onerror: reject
          });
        });
      };
      const weapiFetch = async (url, config) => {
        const {
          data = {},
          clientType = "pc",
          ip,
          originResponse = false,
          ...rest
        } = config;
        const csrfToken = document.cookie.match(/_csrf=([^(;|$)]+)/);
        data.csrf_token = csrfToken ? csrfToken[1] : "";
        const encryptedData = weapi(data);
        console.log({
          url,
          data,
          encryptedData
        });
        const headers = {
          "content-type": "application/x-www-form-urlencoded",
          "user-agent": CLIENT_CONFIG[clientType].userAgent,
          accept: "application/json, text/plain, */*",
          "accept-language": "zh-CN,zh;q=0.9",
          origin: "https://music.163.com",
          referer: "https://music.163.com/"
        };
        if (ip) {
          headers["X-Real-IP"] = ip;
          headers["X-Forwarded-For"] = ip;
        }
        if (CLIENT_CONFIG[clientType].cookie) {
          headers.cookie = CLIENT_CONFIG[clientType].cookie;
        }
        try {
          const baseUrl = "https://music.163.com";
          const fullUrl = new URL(url.replace("api", "weapi"), baseUrl);
          fullUrl.searchParams.append("csrf_token", data.csrf_token);
          const response = await fetch(fullUrl.toString(), {
            method: "POST",
            headers,
            body: `params=${encodeURIComponent(
        encryptedData.params
      )}&encSecKey=${encodeURIComponent(encryptedData.encSecKey)}`,
            credentials: "include",
            // 包含cookies
            mode: "cors",
            // 启用CORS
            redirect: "follow"
            // 自动跟随重定向
          });
          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(
              `HTTP error! status: ${response.status}, message: ${errorText}`
            );
          }
          const result = await response.json();
          if (result.code !== 200 && !originResponse) {
            throw new Error(result.msg || result.message || "API请求失败");
          }
          return originResponse ? {
            headers: response.headers,
            ...result
          } : result;
        } catch (error) {
          console.error("请求失败:", error);
          throw new Error(`请求失败: ${error.message || "未知错误"}`);
        }
      };
      var browser$1 = {};
      var canPromise$1 = function() {
        return typeof Promise === "function" && Promise.prototype && Promise.prototype.then;
      };
      var qrcode = {};
      var utils$1 = {};
      let toSJISFunction;
      const CODEWORDS_COUNT = [
        0,
        // Not used
        26,
        44,
        70,
        100,
        134,
        172,
        196,
        242,
        292,
        346,
        404,
        466,
        532,
        581,
        655,
        733,
        815,
        901,
        991,
        1085,
        1156,
        1258,
        1364,
        1474,
        1588,
        1706,
        1828,
        1921,
        2051,
        2185,
        2323,
        2465,
        2611,
        2761,
        2876,
        3034,
        3196,
        3362,
        3532,
        3706
      ];
      utils$1.getSymbolSize = function getSymbolSize(version2) {
        if (!version2) throw new Error('"version" cannot be null or undefined');
        if (version2 < 1 || version2 > 40) throw new Error('"version" should be in range from 1 to 40');
        return version2 * 4 + 17;
      };
      utils$1.getSymbolTotalCodewords = function getSymbolTotalCodewords(version2) {
        return CODEWORDS_COUNT[version2];
      };
      utils$1.getBCHDigit = function(data) {
        let digit = 0;
        while (data !== 0) {
          digit++;
          data >>>= 1;
        }
        return digit;
      };
      utils$1.setToSJISFunction = function setToSJISFunction(f2) {
        if (typeof f2 !== "function") {
          throw new Error('"toSJISFunc" is not a valid function.');
        }
        toSJISFunction = f2;
      };
      utils$1.isKanjiModeEnabled = function() {
        return typeof toSJISFunction !== "undefined";
      };
      utils$1.toSJIS = function toSJIS(kanji2) {
        return toSJISFunction(kanji2);
      };
      var errorCorrectionLevel = {};
      (function(exports) {
        exports.L = { bit: 1 };
        exports.M = { bit: 0 };
        exports.Q = { bit: 3 };
        exports.H = { bit: 2 };
        function fromString(string) {
          if (typeof string !== "string") {
            throw new Error("Param is not a string");
          }
          const lcStr = string.toLowerCase();
          switch (lcStr) {
            case "l":
            case "low":
              return exports.L;
            case "m":
            case "medium":
              return exports.M;
            case "q":
            case "quartile":
              return exports.Q;
            case "h":
            case "high":
              return exports.H;
            default:
              throw new Error("Unknown EC Level: " + string);
          }
        }
        exports.isValid = function isValid2(level) {
          return level && typeof level.bit !== "undefined" && level.bit >= 0 && level.bit < 4;
        };
        exports.from = function from(value2, defaultValue) {
          if (exports.isValid(value2)) {
            return value2;
          }
          try {
            return fromString(value2);
          } catch (e) {
            return defaultValue;
          }
        };
      })(errorCorrectionLevel);
      function BitBuffer$1() {
        this.buffer = [];
        this.length = 0;
      }
      BitBuffer$1.prototype = {
        get: function(index) {
          const bufIndex = Math.floor(index / 8);
          return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;
        },
        put: function(num, length) {
          for (let i = 0; i < length; i++) {
            this.putBit((num >>> length - i - 1 & 1) === 1);
          }
        },
        getLengthInBits: function() {
          return this.length;
        },
        putBit: function(bit) {
          const bufIndex = Math.floor(this.length / 8);
          if (this.buffer.length <= bufIndex) {
            this.buffer.push(0);
          }
          if (bit) {
            this.buffer[bufIndex] |= 128 >>> this.length % 8;
          }
          this.length++;
        }
      };
      var bitBuffer = BitBuffer$1;
      function BitMatrix$1(size2) {
        if (!size2 || size2 < 1) {
          throw new Error("BitMatrix size must be defined and greater than 0");
        }
        this.size = size2;
        this.data = new Uint8Array(size2 * size2);
        this.reservedBit = new Uint8Array(size2 * size2);
      }
      BitMatrix$1.prototype.set = function(row, col, value2, reserved) {
        const index = row * this.size + col;
        this.data[index] = value2;
        if (reserved) this.reservedBit[index] = true;
      };
      BitMatrix$1.prototype.get = function(row, col) {
        return this.data[row * this.size + col];
      };
      BitMatrix$1.prototype.xor = function(row, col, value2) {
        this.data[row * this.size + col] ^= value2;
      };
      BitMatrix$1.prototype.isReserved = function(row, col) {
        return this.reservedBit[row * this.size + col];
      };
      var bitMatrix = BitMatrix$1;
      var alignmentPattern = {};
      (function(exports) {
        const getSymbolSize3 = utils$1.getSymbolSize;
        exports.getRowColCoords = function getRowColCoords(version2) {
          if (version2 === 1) return [];
          const posCount = Math.floor(version2 / 7) + 2;
          const size2 = getSymbolSize3(version2);
          const intervals = size2 === 145 ? 26 : Math.ceil((size2 - 13) / (2 * posCount - 2)) * 2;
          const positions = [size2 - 7];
          for (let i = 1; i < posCount - 1; i++) {
            positions[i] = positions[i - 1] - intervals;
          }
          positions.push(6);
          return positions.reverse();
        };
        exports.getPositions = function getPositions2(version2) {
          const coords = [];
          const pos = exports.getRowColCoords(version2);
          const posLength = pos.length;
          for (let i = 0; i < posLength; i++) {
            for (let j = 0; j < posLength; j++) {
              if (i === 0 && j === 0 || // top-left
              i === 0 && j === posLength - 1 || // bottom-left
              i === posLength - 1 && j === 0) {
                continue;
              }
              coords.push([pos[i], pos[j]]);
            }
          }
          return coords;
        };
      })(alignmentPattern);
      var finderPattern = {};
      const getSymbolSize2 = utils$1.getSymbolSize;
      const FINDER_PATTERN_SIZE = 7;
      finderPattern.getPositions = function getPositions(version2) {
        const size2 = getSymbolSize2(version2);
        return [
          // top-left
          [0, 0],
          // top-right
          [size2 - FINDER_PATTERN_SIZE, 0],
          // bottom-left
          [0, size2 - FINDER_PATTERN_SIZE]
        ];
      };
      var maskPattern = {};
      (function(exports) {
        exports.Patterns = {
          PATTERN000: 0,
          PATTERN001: 1,
          PATTERN010: 2,
          PATTERN011: 3,
          PATTERN100: 4,
          PATTERN101: 5,
          PATTERN110: 6,
          PATTERN111: 7
        };
        const PenaltyScores = {
          N1: 3,
          N2: 3,
          N3: 40,
          N4: 10
        };
        exports.isValid = function isValid2(mask) {
          return mask != null && mask !== "" && !isNaN(mask) && mask >= 0 && mask <= 7;
        };
        exports.from = function from(value2) {
          return exports.isValid(value2) ? parseInt(value2, 10) : void 0;
        };
        exports.getPenaltyN1 = function getPenaltyN1(data) {
          const size2 = data.size;
          let points = 0;
          let sameCountCol = 0;
          let sameCountRow = 0;
          let lastCol = null;
          let lastRow = null;
          for (let row = 0; row < size2; row++) {
            sameCountCol = sameCountRow = 0;
            lastCol = lastRow = null;
            for (let col = 0; col < size2; col++) {
              let module = data.get(row, col);
              if (module === lastCol) {
                sameCountCol++;
              } else {
                if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
                lastCol = module;
                sameCountCol = 1;
              }
              module = data.get(col, row);
              if (module === lastRow) {
                sameCountRow++;
              } else {
                if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
                lastRow = module;
                sameCountRow = 1;
              }
            }
            if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
            if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
          }
          return points;
        };
        exports.getPenaltyN2 = function getPenaltyN2(data) {
          const size2 = data.size;
          let points = 0;
          for (let row = 0; row < size2 - 1; row++) {
            for (let col = 0; col < size2 - 1; col++) {
              const last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);
              if (last === 4 || last === 0) points++;
            }
          }
          return points * PenaltyScores.N2;
        };
        exports.getPenaltyN3 = function getPenaltyN3(data) {
          const size2 = data.size;
          let points = 0;
          let bitsCol = 0;
          let bitsRow = 0;
          for (let row = 0; row < size2; row++) {
            bitsCol = bitsRow = 0;
            for (let col = 0; col < size2; col++) {
              bitsCol = bitsCol << 1 & 2047 | data.get(row, col);
              if (col >= 10 && (bitsCol === 1488 || bitsCol === 93)) points++;
              bitsRow = bitsRow << 1 & 2047 | data.get(col, row);
              if (col >= 10 && (bitsRow === 1488 || bitsRow === 93)) points++;
            }
          }
          return points * PenaltyScores.N3;
        };
        exports.getPenaltyN4 = function getPenaltyN4(data) {
          let darkCount = 0;
          const modulesCount = data.data.length;
          for (let i = 0; i < modulesCount; i++) darkCount += data.data[i];
          const k2 = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);
          return k2 * PenaltyScores.N4;
        };
        function getMaskAt(maskPattern2, i, j) {
          switch (maskPattern2) {
            case exports.Patterns.PATTERN000:
              return (i + j) % 2 === 0;
            case exports.Patterns.PATTERN001:
              return i % 2 === 0;
            case exports.Patterns.PATTERN010:
              return j % 3 === 0;
            case exports.Patterns.PATTERN011:
              return (i + j) % 3 === 0;
            case exports.Patterns.PATTERN100:
              return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;
            case exports.Patterns.PATTERN101:
              return i * j % 2 + i * j % 3 === 0;
            case exports.Patterns.PATTERN110:
              return (i * j % 2 + i * j % 3) % 2 === 0;
            case exports.Patterns.PATTERN111:
              return (i * j % 3 + (i + j) % 2) % 2 === 0;
            default:
              throw new Error("bad maskPattern:" + maskPattern2);
          }
        }
        exports.applyMask = function applyMask(pattern, data) {
          const size2 = data.size;
          for (let col = 0; col < size2; col++) {
            for (let row = 0; row < size2; row++) {
              if (data.isReserved(row, col)) continue;
              data.xor(row, col, getMaskAt(pattern, row, col));
            }
          }
        };
        exports.getBestMask = function getBestMask(data, setupFormatFunc) {
          const numPatterns = Object.keys(exports.Patterns).length;
          let bestPattern = 0;
          let lowerPenalty = Infinity;
          for (let p2 = 0; p2 < numPatterns; p2++) {
            setupFormatFunc(p2);
            exports.applyMask(p2, data);
            const penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);
            exports.applyMask(p2, data);
            if (penalty < lowerPenalty) {
              lowerPenalty = penalty;
              bestPattern = p2;
            }
          }
          return bestPattern;
        };
      })(maskPattern);
      var errorCorrectionCode = {};
      const ECLevel$1 = errorCorrectionLevel;
      const EC_BLOCKS_TABLE = [
        // L  M  Q  H
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        1,
        2,
        2,
        4,
        1,
        2,
        4,
        4,
        2,
        4,
        4,
        4,
        2,
        4,
        6,
        5,
        2,
        4,
        6,
        6,
        2,
        5,
        8,
        8,
        4,
        5,
        8,
        8,
        4,
        5,
        8,
        11,
        4,
        8,
        10,
        11,
        4,
        9,
        12,
        16,
        4,
        9,
        16,
        16,
        6,
        10,
        12,
        18,
        6,
        10,
        17,
        16,
        6,
        11,
        16,
        19,
        6,
        13,
        18,
        21,
        7,
        14,
        21,
        25,
        8,
        16,
        20,
        25,
        8,
        17,
        23,
        25,
        9,
        17,
        23,
        34,
        9,
        18,
        25,
        30,
        10,
        20,
        27,
        32,
        12,
        21,
        29,
        35,
        12,
        23,
        34,
        37,
        12,
        25,
        34,
        40,
        13,
        26,
        35,
        42,
        14,
        28,
        38,
        45,
        15,
        29,
        40,
        48,
        16,
        31,
        43,
        51,
        17,
        33,
        45,
        54,
        18,
        35,
        48,
        57,
        19,
        37,
        51,
        60,
        19,
        38,
        53,
        63,
        20,
        40,
        56,
        66,
        21,
        43,
        59,
        70,
        22,
        45,
        62,
        74,
        24,
        47,
        65,
        77,
        25,
        49,
        68,
        81
      ];
      const EC_CODEWORDS_TABLE = [
        // L  M  Q  H
        7,
        10,
        13,
        17,
        10,
        16,
        22,
        28,
        15,
        26,
        36,
        44,
        20,
        36,
        52,
        64,
        26,
        48,
        72,
        88,
        36,
        64,
        96,
        112,
        40,
        72,
        108,
        130,
        48,
        88,
        132,
        156,
        60,
        110,
        160,
        192,
        72,
        130,
        192,
        224,
        80,
        150,
        224,
        264,
        96,
        176,
        260,
        308,
        104,
        198,
        288,
        352,
        120,
        216,
        320,
        384,
        132,
        240,
        360,
        432,
        144,
        280,
        408,
        480,
        168,
        308,
        448,
        532,
        180,
        338,
        504,
        588,
        196,
        364,
        546,
        650,
        224,
        416,
        600,
        700,
        224,
        442,
        644,
        750,
        252,
        476,
        690,
        816,
        270,
        504,
        750,
        900,
        300,
        560,
        810,
        960,
        312,
        588,
        870,
        1050,
        336,
        644,
        952,
        1110,
        360,
        700,
        1020,
        1200,
        390,
        728,
        1050,
        1260,
        420,
        784,
        1140,
        1350,
        450,
        812,
        1200,
        1440,
        480,
        868,
        1290,
        1530,
        510,
        924,
        1350,
        1620,
        540,
        980,
        1440,
        1710,
        570,
        1036,
        1530,
        1800,
        570,
        1064,
        1590,
        1890,
        600,
        1120,
        1680,
        1980,
        630,
        1204,
        1770,
        2100,
        660,
        1260,
        1860,
        2220,
        720,
        1316,
        1950,
        2310,
        750,
        1372,
        2040,
        2430
      ];
      errorCorrectionCode.getBlocksCount = function getBlocksCount(version2, errorCorrectionLevel2) {
        switch (errorCorrectionLevel2) {
          case ECLevel$1.L:
            return EC_BLOCKS_TABLE[(version2 - 1) * 4 + 0];
          case ECLevel$1.M:
            return EC_BLOCKS_TABLE[(version2 - 1) * 4 + 1];
          case ECLevel$1.Q:
            return EC_BLOCKS_TABLE[(version2 - 1) * 4 + 2];
          case ECLevel$1.H:
            return EC_BLOCKS_TABLE[(version2 - 1) * 4 + 3];
          default:
            return void 0;
        }
      };
      errorCorrectionCode.getTotalCodewordsCount = function getTotalCodewordsCount(version2, errorCorrectionLevel2) {
        switch (errorCorrectionLevel2) {
          case ECLevel$1.L:
            return EC_CODEWORDS_TABLE[(version2 - 1) * 4 + 0];
          case ECLevel$1.M:
            return EC_CODEWORDS_TABLE[(version2 - 1) * 4 + 1];
          case ECLevel$1.Q:
            return EC_CODEWORDS_TABLE[(version2 - 1) * 4 + 2];
          case ECLevel$1.H:
            return EC_CODEWORDS_TABLE[(version2 - 1) * 4 + 3];
          default:
            return void 0;
        }
      };
      var polynomial = {};
      var galoisField = {};
      const EXP_TABLE = new Uint8Array(512);
      const LOG_TABLE = new Uint8Array(256);
      (function initTables() {
        let x = 1;
        for (let i = 0; i < 255; i++) {
          EXP_TABLE[i] = x;
          LOG_TABLE[x] = i;
          x <<= 1;
          if (x & 256) {
            x ^= 285;
          }
        }
        for (let i = 255; i < 512; i++) {
          EXP_TABLE[i] = EXP_TABLE[i - 255];
        }
      })();
      galoisField.log = function log(n2) {
        if (n2 < 1) throw new Error("log(" + n2 + ")");
        return LOG_TABLE[n2];
      };
      galoisField.exp = function exp(n2) {
        return EXP_TABLE[n2];
      };
      galoisField.mul = function mul(x, y) {
        if (x === 0 || y === 0) return 0;
        return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];
      };
      (function(exports) {
        const GF = galoisField;
        exports.mul = function mul2(p1, p2) {
          const coeff = new Uint8Array(p1.length + p2.length - 1);
          for (let i = 0; i < p1.length; i++) {
            for (let j = 0; j < p2.length; j++) {
              coeff[i + j] ^= GF.mul(p1[i], p2[j]);
            }
          }
          return coeff;
        };
        exports.mod = function mod(divident, divisor) {
          let result = new Uint8Array(divident);
          while (result.length - divisor.length >= 0) {
            const coeff = result[0];
            for (let i = 0; i < divisor.length; i++) {
              result[i] ^= GF.mul(divisor[i], coeff);
            }
            let offset = 0;
            while (offset < result.length && result[offset] === 0) offset++;
            result = result.slice(offset);
          }
          return result;
        };
        exports.generateECPolynomial = function generateECPolynomial(degree) {
          let poly = new Uint8Array([1]);
          for (let i = 0; i < degree; i++) {
            poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]));
          }
          return poly;
        };
      })(polynomial);
      const Polynomial = polynomial;
      function ReedSolomonEncoder$1(degree) {
        this.genPoly = void 0;
        this.degree = degree;
        if (this.degree) this.initialize(this.degree);
      }
      ReedSolomonEncoder$1.prototype.initialize = function initialize(degree) {
        this.degree = degree;
        this.genPoly = Polynomial.generateECPolynomial(this.degree);
      };
      ReedSolomonEncoder$1.prototype.encode = function encode(data) {
        if (!this.genPoly) {
          throw new Error("Encoder not initialized");
        }
        const paddedData = new Uint8Array(data.length + this.degree);
        paddedData.set(data);
        const remainder = Polynomial.mod(paddedData, this.genPoly);
        const start = this.degree - remainder.length;
        if (start > 0) {
          const buff = new Uint8Array(this.degree);
          buff.set(remainder, start);
          return buff;
        }
        return remainder;
      };
      var reedSolomonEncoder = ReedSolomonEncoder$1;
      var version = {};
      var mode = {};
      var versionCheck = {};
      versionCheck.isValid = function isValid(version2) {
        return !isNaN(version2) && version2 >= 1 && version2 <= 40;
      };
      var regex = {};
      const numeric = "[0-9]+";
      const alphanumeric = "[A-Z $%*+\\-./:]+";
      let kanji = "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
      kanji = kanji.replace(/u/g, "\\u");
      const byte = "(?:(?![A-Z0-9 $%*+\\-./:]|" + kanji + ")(?:.|[\r\n]))+";
      regex.KANJI = new RegExp(kanji, "g");
      regex.BYTE_KANJI = new RegExp("[^A-Z0-9 $%*+\\-./:]+", "g");
      regex.BYTE = new RegExp(byte, "g");
      regex.NUMERIC = new RegExp(numeric, "g");
      regex.ALPHANUMERIC = new RegExp(alphanumeric, "g");
      const TEST_KANJI = new RegExp("^" + kanji + "$");
      const TEST_NUMERIC = new RegExp("^" + numeric + "$");
      const TEST_ALPHANUMERIC = new RegExp("^[A-Z0-9 $%*+\\-./:]+$");
      regex.testKanji = function testKanji(str) {
        return TEST_KANJI.test(str);
      };
      regex.testNumeric = function testNumeric(str) {
        return TEST_NUMERIC.test(str);
      };
      regex.testAlphanumeric = function testAlphanumeric(str) {
        return TEST_ALPHANUMERIC.test(str);
      };
      (function(exports) {
        const VersionCheck = versionCheck;
        const Regex = regex;
        exports.NUMERIC = {
          id: "Numeric",
          bit: 1 << 0,
          ccBits: [10, 12, 14]
        };
        exports.ALPHANUMERIC = {
          id: "Alphanumeric",
          bit: 1 << 1,
          ccBits: [9, 11, 13]
        };
        exports.BYTE = {
          id: "Byte",
          bit: 1 << 2,
          ccBits: [8, 16, 16]
        };
        exports.KANJI = {
          id: "Kanji",
          bit: 1 << 3,
          ccBits: [8, 10, 12]
        };
        exports.MIXED = {
          bit: -1
        };
        exports.getCharCountIndicator = function getCharCountIndicator(mode2, version2) {
          if (!mode2.ccBits) throw new Error("Invalid mode: " + mode2);
          if (!VersionCheck.isValid(version2)) {
            throw new Error("Invalid version: " + version2);
          }
          if (version2 >= 1 && version2 < 10) return mode2.ccBits[0];
          else if (version2 < 27) return mode2.ccBits[1];
          return mode2.ccBits[2];
        };
        exports.getBestModeForData = function getBestModeForData(dataStr) {
          if (Regex.testNumeric(dataStr)) return exports.NUMERIC;
          else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;
          else if (Regex.testKanji(dataStr)) return exports.KANJI;
          else return exports.BYTE;
        };
        exports.toString = function toString(mode2) {
          if (mode2 && mode2.id) return mode2.id;
          throw new Error("Invalid mode");
        };
        exports.isValid = function isValid2(mode2) {
          return mode2 && mode2.bit && mode2.ccBits;
        };
        function fromString(string) {
          if (typeof string !== "string") {
            throw new Error("Param is not a string");
          }
          const lcStr = string.toLowerCase();
          switch (lcStr) {
            case "numeric":
              return exports.NUMERIC;
            case "alphanumeric":
              return exports.ALPHANUMERIC;
            case "kanji":
              return exports.KANJI;
            case "byte":
              return exports.BYTE;
            default:
              throw new Error("Unknown mode: " + string);
          }
        }
        exports.from = function from(value2, defaultValue) {
          if (exports.isValid(value2)) {
            return value2;
          }
          try {
            return fromString(value2);
          } catch (e) {
            return defaultValue;
          }
        };
      })(mode);
      (function(exports) {
        const Utils2 = utils$1;
        const ECCode2 = errorCorrectionCode;
        const ECLevel2 = errorCorrectionLevel;
        const Mode2 = mode;
        const VersionCheck = versionCheck;
        const G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
        const G18_BCH = Utils2.getBCHDigit(G18);
        function getBestVersionForDataLength(mode2, length, errorCorrectionLevel2) {
          for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
            if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel2, mode2)) {
              return currentVersion;
            }
          }
          return void 0;
        }
        function getReservedBitsCount(mode2, version2) {
          return Mode2.getCharCountIndicator(mode2, version2) + 4;
        }
        function getTotalBitsFromDataArray(segments2, version2) {
          let totalBits = 0;
          segments2.forEach(function(data) {
            const reservedBits = getReservedBitsCount(data.mode, version2);
            totalBits += reservedBits + data.getBitsLength();
          });
          return totalBits;
        }
        function getBestVersionForMixedData(segments2, errorCorrectionLevel2) {
          for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
            const length = getTotalBitsFromDataArray(segments2, currentVersion);
            if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel2, Mode2.MIXED)) {
              return currentVersion;
            }
          }
          return void 0;
        }
        exports.from = function from(value2, defaultValue) {
          if (VersionCheck.isValid(value2)) {
            return parseInt(value2, 10);
          }
          return defaultValue;
        };
        exports.getCapacity = function getCapacity(version2, errorCorrectionLevel2, mode2) {
          if (!VersionCheck.isValid(version2)) {
            throw new Error("Invalid QR Code version");
          }
          if (typeof mode2 === "undefined") mode2 = Mode2.BYTE;
          const totalCodewords = Utils2.getSymbolTotalCodewords(version2);
          const ecTotalCodewords = ECCode2.getTotalCodewordsCount(version2, errorCorrectionLevel2);
          const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
          if (mode2 === Mode2.MIXED) return dataTotalCodewordsBits;
          const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode2, version2);
          switch (mode2) {
            case Mode2.NUMERIC:
              return Math.floor(usableBits / 10 * 3);
            case Mode2.ALPHANUMERIC:
              return Math.floor(usableBits / 11 * 2);
            case Mode2.KANJI:
              return Math.floor(usableBits / 13);
            case Mode2.BYTE:
            default:
              return Math.floor(usableBits / 8);
          }
        };
        exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel2) {
          let seg;
          const ecl = ECLevel2.from(errorCorrectionLevel2, ECLevel2.M);
          if (Array.isArray(data)) {
            if (data.length > 1) {
              return getBestVersionForMixedData(data, ecl);
            }
            if (data.length === 0) {
              return 1;
            }
            seg = data[0];
          } else {
            seg = data;
          }
          return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);
        };
        exports.getEncodedBits = function getEncodedBits2(version2) {
          if (!VersionCheck.isValid(version2) || version2 < 7) {
            throw new Error("Invalid QR Code version");
          }
          let d = version2 << 12;
          while (Utils2.getBCHDigit(d) - G18_BCH >= 0) {
            d ^= G18 << Utils2.getBCHDigit(d) - G18_BCH;
          }
          return version2 << 12 | d;
        };
      })(version);
      var formatInfo = {};
      const Utils$3 = utils$1;
      const G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
      const G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
      const G15_BCH = Utils$3.getBCHDigit(G15);
      formatInfo.getEncodedBits = function getEncodedBits(errorCorrectionLevel2, mask) {
        const data = errorCorrectionLevel2.bit << 3 | mask;
        let d = data << 10;
        while (Utils$3.getBCHDigit(d) - G15_BCH >= 0) {
          d ^= G15 << Utils$3.getBCHDigit(d) - G15_BCH;
        }
        return (data << 10 | d) ^ G15_MASK;
      };
      var segments = {};
      const Mode$4 = mode;
      function NumericData(data) {
        this.mode = Mode$4.NUMERIC;
        this.data = data.toString();
      }
      NumericData.getBitsLength = function getBitsLength(length) {
        return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);
      };
      NumericData.prototype.getLength = function getLength() {
        return this.data.length;
      };
      NumericData.prototype.getBitsLength = function getBitsLength2() {
        return NumericData.getBitsLength(this.data.length);
      };
      NumericData.prototype.write = function write(bitBuffer2) {
        let i, group, value2;
        for (i = 0; i + 3 <= this.data.length; i += 3) {
          group = this.data.substr(i, 3);
          value2 = parseInt(group, 10);
          bitBuffer2.put(value2, 10);
        }
        const remainingNum = this.data.length - i;
        if (remainingNum > 0) {
          group = this.data.substr(i);
          value2 = parseInt(group, 10);
          bitBuffer2.put(value2, remainingNum * 3 + 1);
        }
      };
      var numericData = NumericData;
      const Mode$3 = mode;
      const ALPHA_NUM_CHARS = [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        " ",
        "$",
        "%",
        "*",
        "+",
        "-",
        ".",
        "/",
        ":"
      ];
      function AlphanumericData(data) {
        this.mode = Mode$3.ALPHANUMERIC;
        this.data = data;
      }
      AlphanumericData.getBitsLength = function getBitsLength3(length) {
        return 11 * Math.floor(length / 2) + 6 * (length % 2);
      };
      AlphanumericData.prototype.getLength = function getLength2() {
        return this.data.length;
      };
      AlphanumericData.prototype.getBitsLength = function getBitsLength4() {
        return AlphanumericData.getBitsLength(this.data.length);
      };
      AlphanumericData.prototype.write = function write2(bitBuffer2) {
        let i;
        for (i = 0; i + 2 <= this.data.length; i += 2) {
          let value2 = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;
          value2 += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);
          bitBuffer2.put(value2, 11);
        }
        if (this.data.length % 2) {
          bitBuffer2.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
        }
      };
      var alphanumericData = AlphanumericData;
      const Mode$2 = mode;
      function ByteData(data) {
        this.mode = Mode$2.BYTE;
        if (typeof data === "string") {
          this.data = new TextEncoder().encode(data);
        } else {
          this.data = new Uint8Array(data);
        }
      }
      ByteData.getBitsLength = function getBitsLength5(length) {
        return length * 8;
      };
      ByteData.prototype.getLength = function getLength3() {
        return this.data.length;
      };
      ByteData.prototype.getBitsLength = function getBitsLength6() {
        return ByteData.getBitsLength(this.data.length);
      };
      ByteData.prototype.write = function(bitBuffer2) {
        for (let i = 0, l2 = this.data.length; i < l2; i++) {
          bitBuffer2.put(this.data[i], 8);
        }
      };
      var byteData = ByteData;
      const Mode$1 = mode;
      const Utils$2 = utils$1;
      function KanjiData(data) {
        this.mode = Mode$1.KANJI;
        this.data = data;
      }
      KanjiData.getBitsLength = function getBitsLength7(length) {
        return length * 13;
      };
      KanjiData.prototype.getLength = function getLength4() {
        return this.data.length;
      };
      KanjiData.prototype.getBitsLength = function getBitsLength8() {
        return KanjiData.getBitsLength(this.data.length);
      };
      KanjiData.prototype.write = function(bitBuffer2) {
        let i;
        for (i = 0; i < this.data.length; i++) {
          let value2 = Utils$2.toSJIS(this.data[i]);
          if (value2 >= 33088 && value2 <= 40956) {
            value2 -= 33088;
          } else if (value2 >= 57408 && value2 <= 60351) {
            value2 -= 49472;
          } else {
            throw new Error(
              "Invalid SJIS character: " + this.data[i] + "\nMake sure your charset is UTF-8"
            );
          }
          value2 = (value2 >>> 8 & 255) * 192 + (value2 & 255);
          bitBuffer2.put(value2, 13);
        }
      };
      var kanjiData = KanjiData;
      var dijkstra = { exports: {} };
      (function(module) {
        var dijkstra2 = {
          single_source_shortest_paths: function(graph, s, d) {
            var predecessors = {};
            var costs = {};
            costs[s] = 0;
            var open = dijkstra2.PriorityQueue.make();
            open.push(s, 0);
            var closest, u, v, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;
            while (!open.empty()) {
              closest = open.pop();
              u = closest.value;
              cost_of_s_to_u = closest.cost;
              adjacent_nodes = graph[u] || {};
              for (v in adjacent_nodes) {
                if (adjacent_nodes.hasOwnProperty(v)) {
                  cost_of_e = adjacent_nodes[v];
                  cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;
                  cost_of_s_to_v = costs[v];
                  first_visit = typeof costs[v] === "undefined";
                  if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
                    costs[v] = cost_of_s_to_u_plus_cost_of_e;
                    open.push(v, cost_of_s_to_u_plus_cost_of_e);
                    predecessors[v] = u;
                  }
                }
              }
            }
            if (typeof d !== "undefined" && typeof costs[d] === "undefined") {
              var msg = ["Could not find a path from ", s, " to ", d, "."].join("");
              throw new Error(msg);
            }
            return predecessors;
          },
          extract_shortest_path_from_predecessor_list: function(predecessors, d) {
            var nodes = [];
            var u = d;
            while (u) {
              nodes.push(u);
              predecessors[u];
              u = predecessors[u];
            }
            nodes.reverse();
            return nodes;
          },
          find_path: function(graph, s, d) {
            var predecessors = dijkstra2.single_source_shortest_paths(graph, s, d);
            return dijkstra2.extract_shortest_path_from_predecessor_list(
              predecessors,
              d
            );
          },
          /**
           * A very naive priority queue implementation.
           */
          PriorityQueue: {
            make: function(opts) {
              var T = dijkstra2.PriorityQueue, t = {}, key;
              opts = opts || {};
              for (key in T) {
                if (T.hasOwnProperty(key)) {
                  t[key] = T[key];
                }
              }
              t.queue = [];
              t.sorter = opts.sorter || T.default_sorter;
              return t;
            },
            default_sorter: function(a, b) {
              return a.cost - b.cost;
            },
            /**
             * Add a new item to the queue and ensure the highest priority element
             * is at the front of the queue.
             */
            push: function(value2, cost) {
              var item = { value: value2, cost };
              this.queue.push(item);
              this.queue.sort(this.sorter);
            },
            /**
             * Return the highest priority element in the queue.
             */
            pop: function() {
              return this.queue.shift();
            },
            empty: function() {
              return this.queue.length === 0;
            }
          }
        };
        {
          module.exports = dijkstra2;
        }
      })(dijkstra);
      var dijkstraExports = dijkstra.exports;
      (function(exports) {
        const Mode2 = mode;
        const NumericData2 = numericData;
        const AlphanumericData2 = alphanumericData;
        const ByteData2 = byteData;
        const KanjiData2 = kanjiData;
        const Regex = regex;
        const Utils2 = utils$1;
        const dijkstra2 = dijkstraExports;
        function getStringByteLength(str) {
          return unescape(encodeURIComponent(str)).length;
        }
        function getSegments(regex2, mode2, str) {
          const segments2 = [];
          let result;
          while ((result = regex2.exec(str)) !== null) {
            segments2.push({
              data: result[0],
              index: result.index,
              mode: mode2,
              length: result[0].length
            });
          }
          return segments2;
        }
        function getSegmentsFromString(dataStr) {
          const numSegs = getSegments(Regex.NUMERIC, Mode2.NUMERIC, dataStr);
          const alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode2.ALPHANUMERIC, dataStr);
          let byteSegs;
          let kanjiSegs;
          if (Utils2.isKanjiModeEnabled()) {
            byteSegs = getSegments(Regex.BYTE, Mode2.BYTE, dataStr);
            kanjiSegs = getSegments(Regex.KANJI, Mode2.KANJI, dataStr);
          } else {
            byteSegs = getSegments(Regex.BYTE_KANJI, Mode2.BYTE, dataStr);
            kanjiSegs = [];
          }
          const segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);
          return segs.sort(function(s1, s2) {
            return s1.index - s2.index;
          }).map(function(obj) {
            return {
              data: obj.data,
              mode: obj.mode,
              length: obj.length
            };
          });
        }
        function getSegmentBitsLength(length, mode2) {
          switch (mode2) {
            case Mode2.NUMERIC:
              return NumericData2.getBitsLength(length);
            case Mode2.ALPHANUMERIC:
              return AlphanumericData2.getBitsLength(length);
            case Mode2.KANJI:
              return KanjiData2.getBitsLength(length);
            case Mode2.BYTE:
              return ByteData2.getBitsLength(length);
          }
        }
        function mergeSegments(segs) {
          return segs.reduce(function(acc, curr) {
            const prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
            if (prevSeg && prevSeg.mode === curr.mode) {
              acc[acc.length - 1].data += curr.data;
              return acc;
            }
            acc.push(curr);
            return acc;
          }, []);
        }
        function buildNodes(segs) {
          const nodes = [];
          for (let i = 0; i < segs.length; i++) {
            const seg = segs[i];
            switch (seg.mode) {
              case Mode2.NUMERIC:
                nodes.push([
                  seg,
                  { data: seg.data, mode: Mode2.ALPHANUMERIC, length: seg.length },
                  { data: seg.data, mode: Mode2.BYTE, length: seg.length }
                ]);
                break;
              case Mode2.ALPHANUMERIC:
                nodes.push([
                  seg,
                  { data: seg.data, mode: Mode2.BYTE, length: seg.length }
                ]);
                break;
              case Mode2.KANJI:
                nodes.push([
                  seg,
                  { data: seg.data, mode: Mode2.BYTE, length: getStringByteLength(seg.data) }
                ]);
                break;
              case Mode2.BYTE:
                nodes.push([
                  { data: seg.data, mode: Mode2.BYTE, length: getStringByteLength(seg.data) }
                ]);
            }
          }
          return nodes;
        }
        function buildGraph(nodes, version2) {
          const table = {};
          const graph = { start: {} };
          let prevNodeIds = ["start"];
          for (let i = 0; i < nodes.length; i++) {
            const nodeGroup = nodes[i];
            const currentNodeIds = [];
            for (let j = 0; j < nodeGroup.length; j++) {
              const node = nodeGroup[j];
              const key = "" + i + j;
              currentNodeIds.push(key);
              table[key] = { node, lastCount: 0 };
              graph[key] = {};
              for (let n2 = 0; n2 < prevNodeIds.length; n2++) {
                const prevNodeId = prevNodeIds[n2];
                if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
                  graph[prevNodeId][key] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);
                  table[prevNodeId].lastCount += node.length;
                } else {
                  if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;
                  graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode2.getCharCountIndicator(node.mode, version2);
                }
              }
            }
            prevNodeIds = currentNodeIds;
          }
          for (let n2 = 0; n2 < prevNodeIds.length; n2++) {
            graph[prevNodeIds[n2]].end = 0;
          }
          return { map: graph, table };
        }
        function buildSingleSegment(data, modesHint) {
          let mode2;
          const bestMode = Mode2.getBestModeForData(data);
          mode2 = Mode2.from(modesHint, bestMode);
          if (mode2 !== Mode2.BYTE && mode2.bit < bestMode.bit) {
            throw new Error('"' + data + '" cannot be encoded with mode ' + Mode2.toString(mode2) + ".\n Suggested mode is: " + Mode2.toString(bestMode));
          }
          if (mode2 === Mode2.KANJI && !Utils2.isKanjiModeEnabled()) {
            mode2 = Mode2.BYTE;
          }
          switch (mode2) {
            case Mode2.NUMERIC:
              return new NumericData2(data);
            case Mode2.ALPHANUMERIC:
              return new AlphanumericData2(data);
            case Mode2.KANJI:
              return new KanjiData2(data);
            case Mode2.BYTE:
              return new ByteData2(data);
          }
        }
        exports.fromArray = function fromArray(array) {
          return array.reduce(function(acc, seg) {
            if (typeof seg === "string") {
              acc.push(buildSingleSegment(seg, null));
            } else if (seg.data) {
              acc.push(buildSingleSegment(seg.data, seg.mode));
            }
            return acc;
          }, []);
        };
        exports.fromString = function fromString(data, version2) {
          const segs = getSegmentsFromString(data, Utils2.isKanjiModeEnabled());
          const nodes = buildNodes(segs);
          const graph = buildGraph(nodes, version2);
          const path = dijkstra2.find_path(graph.map, "start", "end");
          const optimizedSegs = [];
          for (let i = 1; i < path.length - 1; i++) {
            optimizedSegs.push(graph.table[path[i]].node);
          }
          return exports.fromArray(mergeSegments(optimizedSegs));
        };
        exports.rawSplit = function rawSplit(data) {
          return exports.fromArray(
            getSegmentsFromString(data, Utils2.isKanjiModeEnabled())
          );
        };
      })(segments);
      const Utils$1 = utils$1;
      const ECLevel = errorCorrectionLevel;
      const BitBuffer = bitBuffer;
      const BitMatrix = bitMatrix;
      const AlignmentPattern = alignmentPattern;
      const FinderPattern = finderPattern;
      const MaskPattern = maskPattern;
      const ECCode = errorCorrectionCode;
      const ReedSolomonEncoder = reedSolomonEncoder;
      const Version = version;
      const FormatInfo = formatInfo;
      const Mode = mode;
      const Segments = segments;
      function setupFinderPattern(matrix, version2) {
        const size2 = matrix.size;
        const pos = FinderPattern.getPositions(version2);
        for (let i = 0; i < pos.length; i++) {
          const row = pos[i][0];
          const col = pos[i][1];
          for (let r = -1; r <= 7; r++) {
            if (row + r <= -1 || size2 <= row + r) continue;
            for (let c = -1; c <= 7; c++) {
              if (col + c <= -1 || size2 <= col + c) continue;
              if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {
                matrix.set(row + r, col + c, true, true);
              } else {
                matrix.set(row + r, col + c, false, true);
              }
            }
          }
        }
      }
      function setupTimingPattern(matrix) {
        const size2 = matrix.size;
        for (let r = 8; r < size2 - 8; r++) {
          const value2 = r % 2 === 0;
          matrix.set(r, 6, value2, true);
          matrix.set(6, r, value2, true);
        }
      }
      function setupAlignmentPattern(matrix, version2) {
        const pos = AlignmentPattern.getPositions(version2);
        for (let i = 0; i < pos.length; i++) {
          const row = pos[i][0];
          const col = pos[i][1];
          for (let r = -2; r <= 2; r++) {
            for (let c = -2; c <= 2; c++) {
              if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {
                matrix.set(row + r, col + c, true, true);
              } else {
                matrix.set(row + r, col + c, false, true);
              }
            }
          }
        }
      }
      function setupVersionInfo(matrix, version2) {
        const size2 = matrix.size;
        const bits = Version.getEncodedBits(version2);
        let row, col, mod;
        for (let i = 0; i < 18; i++) {
          row = Math.floor(i / 3);
          col = i % 3 + size2 - 8 - 3;
          mod = (bits >> i & 1) === 1;
          matrix.set(row, col, mod, true);
          matrix.set(col, row, mod, true);
        }
      }
      function setupFormatInfo(matrix, errorCorrectionLevel2, maskPattern2) {
        const size2 = matrix.size;
        const bits = FormatInfo.getEncodedBits(errorCorrectionLevel2, maskPattern2);
        let i, mod;
        for (i = 0; i < 15; i++) {
          mod = (bits >> i & 1) === 1;
          if (i < 6) {
            matrix.set(i, 8, mod, true);
          } else if (i < 8) {
            matrix.set(i + 1, 8, mod, true);
          } else {
            matrix.set(size2 - 15 + i, 8, mod, true);
          }
          if (i < 8) {
            matrix.set(8, size2 - i - 1, mod, true);
          } else if (i < 9) {
            matrix.set(8, 15 - i - 1 + 1, mod, true);
          } else {
            matrix.set(8, 15 - i - 1, mod, true);
          }
        }
        matrix.set(size2 - 8, 8, 1, true);
      }
      function setupData(matrix, data) {
        const size2 = matrix.size;
        let inc = -1;
        let row = size2 - 1;
        let bitIndex = 7;
        let byteIndex = 0;
        for (let col = size2 - 1; col > 0; col -= 2) {
          if (col === 6) col--;
          while (true) {
            for (let c = 0; c < 2; c++) {
              if (!matrix.isReserved(row, col - c)) {
                let dark = false;
                if (byteIndex < data.length) {
                  dark = (data[byteIndex] >>> bitIndex & 1) === 1;
                }
                matrix.set(row, col - c, dark);
                bitIndex--;
                if (bitIndex === -1) {
                  byteIndex++;
                  bitIndex = 7;
                }
              }
            }
            row += inc;
            if (row < 0 || size2 <= row) {
              row -= inc;
              inc = -inc;
              break;
            }
          }
        }
      }
      function createData(version2, errorCorrectionLevel2, segments2) {
        const buffer = new BitBuffer();
        segments2.forEach(function(data) {
          buffer.put(data.mode.bit, 4);
          buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version2));
          data.write(buffer);
        });
        const totalCodewords = Utils$1.getSymbolTotalCodewords(version2);
        const ecTotalCodewords = ECCode.getTotalCodewordsCount(version2, errorCorrectionLevel2);
        const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
        if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
          buffer.put(0, 4);
        }
        while (buffer.getLengthInBits() % 8 !== 0) {
          buffer.putBit(0);
        }
        const remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
        for (let i = 0; i < remainingByte; i++) {
          buffer.put(i % 2 ? 17 : 236, 8);
        }
        return createCodewords(buffer, version2, errorCorrectionLevel2);
      }
      function createCodewords(bitBuffer2, version2, errorCorrectionLevel2) {
        const totalCodewords = Utils$1.getSymbolTotalCodewords(version2);
        const ecTotalCodewords = ECCode.getTotalCodewordsCount(version2, errorCorrectionLevel2);
        const dataTotalCodewords = totalCodewords - ecTotalCodewords;
        const ecTotalBlocks = ECCode.getBlocksCount(version2, errorCorrectionLevel2);
        const blocksInGroup2 = totalCodewords % ecTotalBlocks;
        const blocksInGroup1 = ecTotalBlocks - blocksInGroup2;
        const totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);
        const dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
        const dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;
        const ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;
        const rs = new ReedSolomonEncoder(ecCount);
        let offset = 0;
        const dcData = new Array(ecTotalBlocks);
        const ecData = new Array(ecTotalBlocks);
        let maxDataSize = 0;
        const buffer = new Uint8Array(bitBuffer2.buffer);
        for (let b = 0; b < ecTotalBlocks; b++) {
          const dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;
          dcData[b] = buffer.slice(offset, offset + dataSize);
          ecData[b] = rs.encode(dcData[b]);
          offset += dataSize;
          maxDataSize = Math.max(maxDataSize, dataSize);
        }
        const data = new Uint8Array(totalCodewords);
        let index = 0;
        let i, r;
        for (i = 0; i < maxDataSize; i++) {
          for (r = 0; r < ecTotalBlocks; r++) {
            if (i < dcData[r].length) {
              data[index++] = dcData[r][i];
            }
          }
        }
        for (i = 0; i < ecCount; i++) {
          for (r = 0; r < ecTotalBlocks; r++) {
            data[index++] = ecData[r][i];
          }
        }
        return data;
      }
      function createSymbol(data, version2, errorCorrectionLevel2, maskPattern2) {
        let segments2;
        if (Array.isArray(data)) {
          segments2 = Segments.fromArray(data);
        } else if (typeof data === "string") {
          let estimatedVersion = version2;
          if (!estimatedVersion) {
            const rawSegments = Segments.rawSplit(data);
            estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel2);
          }
          segments2 = Segments.fromString(data, estimatedVersion || 40);
        } else {
          throw new Error("Invalid data");
        }
        const bestVersion = Version.getBestVersionForData(segments2, errorCorrectionLevel2);
        if (!bestVersion) {
          throw new Error("The amount of data is too big to be stored in a QR Code");
        }
        if (!version2) {
          version2 = bestVersion;
        } else if (version2 < bestVersion) {
          throw new Error(
            "\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: " + bestVersion + ".\n"
          );
        }
        const dataBits = createData(version2, errorCorrectionLevel2, segments2);
        const moduleCount = Utils$1.getSymbolSize(version2);
        const modules = new BitMatrix(moduleCount);
        setupFinderPattern(modules, version2);
        setupTimingPattern(modules);
        setupAlignmentPattern(modules, version2);
        setupFormatInfo(modules, errorCorrectionLevel2, 0);
        if (version2 >= 7) {
          setupVersionInfo(modules, version2);
        }
        setupData(modules, dataBits);
        if (isNaN(maskPattern2)) {
          maskPattern2 = MaskPattern.getBestMask(
            modules,
            setupFormatInfo.bind(null, modules, errorCorrectionLevel2)
          );
        }
        MaskPattern.applyMask(maskPattern2, modules);
        setupFormatInfo(modules, errorCorrectionLevel2, maskPattern2);
        return {
          modules,
          version: version2,
          errorCorrectionLevel: errorCorrectionLevel2,
          maskPattern: maskPattern2,
          segments: segments2
        };
      }
      qrcode.create = function create(data, options) {
        if (typeof data === "undefined" || data === "") {
          throw new Error("No input text");
        }
        let errorCorrectionLevel2 = ECLevel.M;
        let version2;
        let mask;
        if (typeof options !== "undefined") {
          errorCorrectionLevel2 = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);
          version2 = Version.from(options.version);
          mask = MaskPattern.from(options.maskPattern);
          if (options.toSJISFunc) {
            Utils$1.setToSJISFunction(options.toSJISFunc);
          }
        }
        return createSymbol(data, version2, errorCorrectionLevel2, mask);
      };
      var canvas = {};
      var utils = {};
      (function(exports) {
        function hex2rgba(hex) {
          if (typeof hex === "number") {
            hex = hex.toString();
          }
          if (typeof hex !== "string") {
            throw new Error("Color should be defined as hex string");
          }
          let hexCode = hex.slice().replace("#", "").split("");
          if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
            throw new Error("Invalid hex color: " + hex);
          }
          if (hexCode.length === 3 || hexCode.length === 4) {
            hexCode = Array.prototype.concat.apply([], hexCode.map(function(c) {
              return [c, c];
            }));
          }
          if (hexCode.length === 6) hexCode.push("F", "F");
          const hexValue = parseInt(hexCode.join(""), 16);
          return {
            r: hexValue >> 24 & 255,
            g: hexValue >> 16 & 255,
            b: hexValue >> 8 & 255,
            a: hexValue & 255,
            hex: "#" + hexCode.slice(0, 6).join("")
          };
        }
        exports.getOptions = function getOptions(options) {
          if (!options) options = {};
          if (!options.color) options.color = {};
          const margin = typeof options.margin === "undefined" || options.margin === null || options.margin < 0 ? 4 : options.margin;
          const width = options.width && options.width >= 21 ? options.width : void 0;
          const scale = options.scale || 4;
          return {
            width,
            scale: width ? 4 : scale,
            margin,
            color: {
              dark: hex2rgba(options.color.dark || "#000000ff"),
              light: hex2rgba(options.color.light || "#ffffffff")
            },
            type: options.type,
            rendererOpts: options.rendererOpts || {}
          };
        };
        exports.getScale = function getScale(qrSize, opts) {
          return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;
        };
        exports.getImageWidth = function getImageWidth(qrSize, opts) {
          const scale = exports.getScale(qrSize, opts);
          return Math.floor((qrSize + opts.margin * 2) * scale);
        };
        exports.qrToImageData = function qrToImageData(imgData, qr, opts) {
          const size2 = qr.modules.size;
          const data = qr.modules.data;
          const scale = exports.getScale(size2, opts);
          const symbolSize = Math.floor((size2 + opts.margin * 2) * scale);
          const scaledMargin = opts.margin * scale;
          const palette = [opts.color.light, opts.color.dark];
          for (let i = 0; i < symbolSize; i++) {
            for (let j = 0; j < symbolSize; j++) {
              let posDst = (i * symbolSize + j) * 4;
              let pxColor = opts.color.light;
              if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
                const iSrc = Math.floor((i - scaledMargin) / scale);
                const jSrc = Math.floor((j - scaledMargin) / scale);
                pxColor = palette[data[iSrc * size2 + jSrc] ? 1 : 0];
              }
              imgData[posDst++] = pxColor.r;
              imgData[posDst++] = pxColor.g;
              imgData[posDst++] = pxColor.b;
              imgData[posDst] = pxColor.a;
            }
          }
        };
      })(utils);
      (function(exports) {
        const Utils2 = utils;
        function clearCanvas(ctx, canvas2, size2) {
          ctx.clearRect(0, 0, canvas2.width, canvas2.height);
          if (!canvas2.style) canvas2.style = {};
          canvas2.height = size2;
          canvas2.width = size2;
          canvas2.style.height = size2 + "px";
          canvas2.style.width = size2 + "px";
        }
        function getCanvasElement() {
          try {
            return document.createElement("canvas");
          } catch (e) {
            throw new Error("You need to specify a canvas element");
          }
        }
        exports.render = function render2(qrData, canvas2, options) {
          let opts = options;
          let canvasEl = canvas2;
          if (typeof opts === "undefined" && (!canvas2 || !canvas2.getContext)) {
            opts = canvas2;
            canvas2 = void 0;
          }
          if (!canvas2) {
            canvasEl = getCanvasElement();
          }
          opts = Utils2.getOptions(opts);
          const size2 = Utils2.getImageWidth(qrData.modules.size, opts);
          const ctx = canvasEl.getContext("2d");
          const image = ctx.createImageData(size2, size2);
          Utils2.qrToImageData(image.data, qrData, opts);
          clearCanvas(ctx, canvasEl, size2);
          ctx.putImageData(image, 0, 0);
          return canvasEl;
        };
        exports.renderToDataURL = function renderToDataURL(qrData, canvas2, options) {
          let opts = options;
          if (typeof opts === "undefined" && (!canvas2 || !canvas2.getContext)) {
            opts = canvas2;
            canvas2 = void 0;
          }
          if (!opts) opts = {};
          const canvasEl = exports.render(qrData, canvas2, opts);
          const type = opts.type || "image/png";
          const rendererOpts = opts.rendererOpts || {};
          return canvasEl.toDataURL(type, rendererOpts.quality);
        };
      })(canvas);
      var svgTag = {};
      const Utils = utils;
      function getColorAttrib(color, attrib) {
        const alpha = color.a / 255;
        const str = attrib + '="' + color.hex + '"';
        return alpha < 1 ? str + " " + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"' : str;
      }
      function svgCmd(cmd, x, y) {
        let str = cmd + x;
        if (typeof y !== "undefined") str += " " + y;
        return str;
      }
      function qrToPath(data, size2, margin) {
        let path = "";
        let moveBy = 0;
        let newRow = false;
        let lineLength = 0;
        for (let i = 0; i < data.length; i++) {
          const col = Math.floor(i % size2);
          const row = Math.floor(i / size2);
          if (!col && !newRow) newRow = true;
          if (data[i]) {
            lineLength++;
            if (!(i > 0 && col > 0 && data[i - 1])) {
              path += newRow ? svgCmd("M", col + margin, 0.5 + row + margin) : svgCmd("m", moveBy, 0);
              moveBy = 0;
              newRow = false;
            }
            if (!(col + 1 < size2 && data[i + 1])) {
              path += svgCmd("h", lineLength);
              lineLength = 0;
            }
          } else {
            moveBy++;
          }
        }
        return path;
      }
      svgTag.render = function render(qrData, options, cb) {
        const opts = Utils.getOptions(options);
        const size2 = qrData.modules.size;
        const data = qrData.modules.data;
        const qrcodesize = size2 + opts.margin * 2;
        const bg = !opts.color.light.a ? "" : "<path " + getColorAttrib(opts.color.light, "fill") + ' d="M0 0h' + qrcodesize + "v" + qrcodesize + 'H0z"/>';
        const path = "<path " + getColorAttrib(opts.color.dark, "stroke") + ' d="' + qrToPath(data, size2, opts.margin) + '"/>';
        const viewBox = 'viewBox="0 0 ' + qrcodesize + " " + qrcodesize + '"';
        const width = !opts.width ? "" : 'width="' + opts.width + '" height="' + opts.width + '" ';
        const svgTag2 = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + "</svg>\n";
        if (typeof cb === "function") {
          cb(null, svgTag2);
        }
        return svgTag2;
      };
      const canPromise = canPromise$1;
      const QRCode = qrcode;
      const CanvasRenderer = canvas;
      const SvgRenderer = svgTag;
      function renderCanvas(renderFunc, canvas2, text2, opts, cb) {
        const args = [].slice.call(arguments, 1);
        const argsNum = args.length;
        const isLastArgCb = typeof args[argsNum - 1] === "function";
        if (!isLastArgCb && !canPromise()) {
          throw new Error("Callback required as last argument");
        }
        if (isLastArgCb) {
          if (argsNum < 2) {
            throw new Error("Too few arguments provided");
          }
          if (argsNum === 2) {
            cb = text2;
            text2 = canvas2;
            canvas2 = opts = void 0;
          } else if (argsNum === 3) {
            if (canvas2.getContext && typeof cb === "undefined") {
              cb = opts;
              opts = void 0;
            } else {
              cb = opts;
              opts = text2;
              text2 = canvas2;
              canvas2 = void 0;
            }
          }
        } else {
          if (argsNum < 1) {
            throw new Error("Too few arguments provided");
          }
          if (argsNum === 1) {
            text2 = canvas2;
            canvas2 = opts = void 0;
          } else if (argsNum === 2 && !canvas2.getContext) {
            opts = text2;
            text2 = canvas2;
            canvas2 = void 0;
          }
          return new Promise(function(resolve, reject) {
            try {
              const data = QRCode.create(text2, opts);
              resolve(renderFunc(data, canvas2, opts));
            } catch (e) {
              reject(e);
            }
          });
        }
        try {
          const data = QRCode.create(text2, opts);
          cb(null, renderFunc(data, canvas2, opts));
        } catch (e) {
          cb(e);
        }
      }
      browser$1.create = QRCode.create;
      browser$1.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
      browser$1.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);
      browser$1.toString = renderCanvas.bind(null, function(data, _, opts) {
        return SvgRenderer.render(data, opts);
      });
      const generateQRCode = async (text2, options = {}) => {
        try {
          const defaultOptions = {
            errorCorrectionLevel: "H",
            type: "image/png",
            quality: 0.92,
            margin: 1,
            width: 200,
            ...options
          };
          const qrcode2 = await browser$1.toDataURL(text2, defaultOptions);
          return qrcode2;
        } catch (error) {
          console.error("生成二维码失败:", error);
          throw error;
        }
      };
      const defaultMessages$1 = "End-Of-Stream";
      let EndOfStreamError$1 = exports("E", class EndOfStreamError extends Error {
        constructor() {
          super(defaultMessages$1);
          this.name = "EndOfStreamError";
        }
      });
      class AbortError extends Error {
        constructor(message2 = "The operation was aborted") {
          super(message2);
          this.name = "AbortError";
        }
      }
      let AbstractStreamReader$1 = class AbstractStreamReader {
        constructor() {
          this.endOfStream = false;
          this.interrupted = false;
          this.peekQueue = [];
        }
        async peek(uint8Array, mayBeLess = false) {
          const bytesRead = await this.read(uint8Array, mayBeLess);
          this.peekQueue.push(uint8Array.subarray(0, bytesRead));
          return bytesRead;
        }
        async read(buffer, mayBeLess = false) {
          if (buffer.length === 0) {
            return 0;
          }
          let bytesRead = this.readFromPeekBuffer(buffer);
          if (!this.endOfStream) {
            bytesRead += await this.readRemainderFromStream(buffer.subarray(bytesRead), mayBeLess);
          }
          if (bytesRead === 0) {
            throw new EndOfStreamError$1();
          }
          return bytesRead;
        }
        /**
         * Read chunk from stream
         * @param buffer - Target Uint8Array (or Buffer) to store data read from stream in
         * @returns Number of bytes read
         */
        readFromPeekBuffer(buffer) {
          let remaining = buffer.length;
          let bytesRead = 0;
          while (this.peekQueue.length > 0 && remaining > 0) {
            const peekData = this.peekQueue.pop();
            if (!peekData)
              throw new Error("peekData should be defined");
            const lenCopy = Math.min(peekData.length, remaining);
            buffer.set(peekData.subarray(0, lenCopy), bytesRead);
            bytesRead += lenCopy;
            remaining -= lenCopy;
            if (lenCopy < peekData.length) {
              this.peekQueue.push(peekData.subarray(lenCopy));
            }
          }
          return bytesRead;
        }
        async readRemainderFromStream(buffer, mayBeLess) {
          let bytesRead = 0;
          while (bytesRead < buffer.length && !this.endOfStream) {
            if (this.interrupted) {
              throw new AbortError();
            }
            const chunkLen = await this.readFromStream(buffer.subarray(bytesRead), mayBeLess);
            if (chunkLen === 0)
              break;
            bytesRead += chunkLen;
          }
          if (!mayBeLess && bytesRead < buffer.length) {
            throw new EndOfStreamError$1();
          }
          return bytesRead;
        }
      };
      let WebStreamReader$1 = class WebStreamReader extends AbstractStreamReader$1 {
        constructor(reader) {
          super();
          this.reader = reader;
        }
        async abort() {
          return this.close();
        }
        async close() {
          this.reader.releaseLock();
        }
      };
      class WebStreamByobReader extends WebStreamReader$1 {
        /**
         * Read from stream
         * @param buffer - Target Uint8Array (or Buffer) to store data read from stream in
         * @param mayBeLess - If true, may fill the buffer partially
         * @protected Bytes read
         */
        async readFromStream(buffer, mayBeLess) {
          if (buffer.length === 0)
            return 0;
          const result = await this.reader.read(new Uint8Array(buffer.length), { min: mayBeLess ? void 0 : buffer.length });
          if (result.done) {
            this.endOfStream = result.done;
          }
          if (result.value) {
            buffer.set(result.value);
            return result.value.length;
          }
          return 0;
        }
      }
      class WebStreamDefaultReader extends AbstractStreamReader$1 {
        constructor(reader) {
          super();
          this.reader = reader;
          this.buffer = null;
        }
        /**
         * Copy chunk to target, and store the remainder in this.buffer
         */
        writeChunk(target, chunk) {
          const written = Math.min(chunk.length, target.length);
          target.set(chunk.subarray(0, written));
          if (written < chunk.length) {
            this.buffer = chunk.subarray(written);
          } else {
            this.buffer = null;
          }
          return written;
        }
        /**
         * Read from stream
         * @param buffer - Target Uint8Array (or Buffer) to store data read from stream in
         * @param mayBeLess - If true, may fill the buffer partially
         * @protected Bytes read
         */
        async readFromStream(buffer, mayBeLess) {
          if (buffer.length === 0)
            return 0;
          let totalBytesRead = 0;
          if (this.buffer) {
            totalBytesRead += this.writeChunk(buffer, this.buffer);
          }
          while (totalBytesRead < buffer.length && !this.endOfStream) {
            const result = await this.reader.read();
            if (result.done) {
              this.endOfStream = true;
              break;
            }
            if (result.value) {
              totalBytesRead += this.writeChunk(buffer.subarray(totalBytesRead), result.value);
            }
          }
          if (totalBytesRead === 0 && this.endOfStream) {
            throw new EndOfStreamError$1();
          }
          return totalBytesRead;
        }
        abort() {
          this.interrupted = true;
          return this.reader.cancel();
        }
        async close() {
          await this.abort();
          this.reader.releaseLock();
        }
      }
      function makeWebStreamReader(stream) {
        try {
          const reader = stream.getReader({ mode: "byob" });
          if (reader instanceof ReadableStreamDefaultReader) {
            return new WebStreamDefaultReader(reader);
          }
          return new WebStreamByobReader(reader);
        } catch (error) {
          if (error instanceof TypeError) {
            return new WebStreamDefaultReader(stream.getReader());
          }
          throw error;
        }
      }
      let AbstractTokenizer$1 = class AbstractTokenizer {
        /**
         * Constructor
         * @param options Tokenizer options
         * @protected
         */
        constructor(options) {
          this.numBuffer = new Uint8Array(8);
          this.position = 0;
          this.onClose = options == null ? void 0 : options.onClose;
          if (options == null ? void 0 : options.abortSignal) {
            options.abortSignal.addEventListener("abort", () => {
              this.abort();
            });
          }
        }
        /**
         * Read a token from the tokenizer-stream
         * @param token - The token to read
         * @param position - If provided, the desired position in the tokenizer-stream
         * @returns Promise with token data
         */
        async readToken(token, position = this.position) {
          const uint8Array = new Uint8Array(token.len);
          const len = await this.readBuffer(uint8Array, { position });
          if (len < token.len)
            throw new EndOfStreamError$1();
          return token.get(uint8Array, 0);
        }
        /**
         * Peek a token from the tokenizer-stream.
         * @param token - Token to peek from the tokenizer-stream.
         * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.
         * @returns Promise with token data
         */
        async peekToken(token, position = this.position) {
          const uint8Array = new Uint8Array(token.len);
          const len = await this.peekBuffer(uint8Array, { position });
          if (len < token.len)
            throw new EndOfStreamError$1();
          return token.get(uint8Array, 0);
        }
        /**
         * Read a numeric token from the stream
         * @param token - Numeric token
         * @returns Promise with number
         */
        async readNumber(token) {
          const len = await this.readBuffer(this.numBuffer, { length: token.len });
          if (len < token.len)
            throw new EndOfStreamError$1();
          return token.get(this.numBuffer, 0);
        }
        /**
         * Read a numeric token from the stream
         * @param token - Numeric token
         * @returns Promise with number
         */
        async peekNumber(token) {
          const len = await this.peekBuffer(this.numBuffer, { length: token.len });
          if (len < token.len)
            throw new EndOfStreamError$1();
          return token.get(this.numBuffer, 0);
        }
        /**
         * Ignore number of bytes, advances the pointer in under tokenizer-stream.
         * @param length - Number of bytes to ignore
         * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available
         */
        async ignore(length) {
          if (this.fileInfo.size !== void 0) {
            const bytesLeft = this.fileInfo.size - this.position;
            if (length > bytesLeft) {
              this.position += bytesLeft;
              return bytesLeft;
            }
          }
          this.position += length;
          return length;
        }
        async close() {
          var _a;
          await this.abort();
          await ((_a = this.onClose) == null ? void 0 : _a.call(this));
        }
        normalizeOptions(uint8Array, options) {
          if (!this.supportsRandomAccess() && options && options.position !== void 0 && options.position < this.position) {
            throw new Error("`options.position` must be equal or greater than `tokenizer.position`");
          }
          return {
            ...{
              mayBeLess: false,
              offset: 0,
              length: uint8Array.length,
              position: this.position
            },
            ...options
          };
        }
        abort() {
          return Promise.resolve();
        }
      };
      const maxBufferSize$1 = 256e3;
      let ReadStreamTokenizer$1 = class ReadStreamTokenizer extends AbstractTokenizer$1 {
        /**
         * Constructor
         * @param streamReader stream-reader to read from
         * @param options Tokenizer options
         */
        constructor(streamReader, options) {
          super(options);
          this.streamReader = streamReader;
          this.fileInfo = (options == null ? void 0 : options.fileInfo) ?? {};
        }
        /**
         * Read buffer from tokenizer
         * @param uint8Array - Target Uint8Array to fill with data read from the tokenizer-stream
         * @param options - Read behaviour options
         * @returns Promise with number of bytes read
         */
        async readBuffer(uint8Array, options) {
          const normOptions = this.normalizeOptions(uint8Array, options);
          const skipBytes = normOptions.position - this.position;
          if (skipBytes > 0) {
            await this.ignore(skipBytes);
            return this.readBuffer(uint8Array, options);
          }
          if (skipBytes < 0) {
            throw new Error("`options.position` must be equal or greater than `tokenizer.position`");
          }
          if (normOptions.length === 0) {
            return 0;
          }
          const bytesRead = await this.streamReader.read(uint8Array.subarray(0, normOptions.length), normOptions.mayBeLess);
          this.position += bytesRead;
          if ((!options || !options.mayBeLess) && bytesRead < normOptions.length) {
            throw new EndOfStreamError$1();
          }
          return bytesRead;
        }
        /**
         * Peek (read ahead) buffer from tokenizer
         * @param uint8Array - Uint8Array (or Buffer) to write data to
         * @param options - Read behaviour options
         * @returns Promise with number of bytes peeked
         */
        async peekBuffer(uint8Array, options) {
          const normOptions = this.normalizeOptions(uint8Array, options);
          let bytesRead = 0;
          if (normOptions.position) {
            const skipBytes = normOptions.position - this.position;
            if (skipBytes > 0) {
              const skipBuffer = new Uint8Array(normOptions.length + skipBytes);
              bytesRead = await this.peekBuffer(skipBuffer, { mayBeLess: normOptions.mayBeLess });
              uint8Array.set(skipBuffer.subarray(skipBytes));
              return bytesRead - skipBytes;
            }
            if (skipBytes < 0) {
              throw new Error("Cannot peek from a negative offset in a stream");
            }
          }
          if (normOptions.length > 0) {
            try {
              bytesRead = await this.streamReader.peek(uint8Array.subarray(0, normOptions.length), normOptions.mayBeLess);
            } catch (err) {
              if ((options == null ? void 0 : options.mayBeLess) && err instanceof EndOfStreamError$1) {
                return 0;
              }
              throw err;
            }
            if (!normOptions.mayBeLess && bytesRead < normOptions.length) {
              throw new EndOfStreamError$1();
            }
          }
          return bytesRead;
        }
        async ignore(length) {
          const bufSize = Math.min(maxBufferSize$1, length);
          const buf = new Uint8Array(bufSize);
          let totBytesRead = 0;
          while (totBytesRead < length) {
            const remaining = length - totBytesRead;
            const bytesRead = await this.readBuffer(buf, { length: Math.min(bufSize, remaining) });
            if (bytesRead < 0) {
              return bytesRead;
            }
            totBytesRead += bytesRead;
          }
          return totBytesRead;
        }
        abort() {
          return this.streamReader.abort();
        }
        async close() {
          return this.streamReader.close();
        }
        supportsRandomAccess() {
          return false;
        }
      };
      let BufferTokenizer$1 = class BufferTokenizer extends AbstractTokenizer$1 {
        /**
         * Construct BufferTokenizer
         * @param uint8Array - Uint8Array to tokenize
         * @param options Tokenizer options
         */
        constructor(uint8Array, options) {
          super(options);
          this.uint8Array = uint8Array;
          this.fileInfo = { ...(options == null ? void 0 : options.fileInfo) ?? {}, ...{ size: uint8Array.length } };
        }
        /**
         * Read buffer from tokenizer
         * @param uint8Array - Uint8Array to tokenize
         * @param options - Read behaviour options
         * @returns {Promise<number>}
         */
        async readBuffer(uint8Array, options) {
          if (options == null ? void 0 : options.position) {
            this.position = options.position;
          }
          const bytesRead = await this.peekBuffer(uint8Array, options);
          this.position += bytesRead;
          return bytesRead;
        }
        /**
         * Peek (read ahead) buffer from tokenizer
         * @param uint8Array
         * @param options - Read behaviour options
         * @returns {Promise<number>}
         */
        async peekBuffer(uint8Array, options) {
          const normOptions = this.normalizeOptions(uint8Array, options);
          const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);
          if (!normOptions.mayBeLess && bytes2read < normOptions.length) {
            throw new EndOfStreamError$1();
          }
          uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read));
          return bytes2read;
        }
        close() {
          return super.close();
        }
        supportsRandomAccess() {
          return true;
        }
        setPosition(position) {
          this.position = position;
        }
      };
      function fromWebStream$1(webStream, options) {
        const webStreamReader = makeWebStreamReader(webStream);
        const _options = options ?? {};
        const chainedClose = _options.onClose;
        _options.onClose = async () => {
          await webStreamReader.close();
          if (chainedClose) {
            return chainedClose();
          }
        };
        return new ReadStreamTokenizer$1(webStreamReader, _options);
      }
      function fromBuffer$1(uint8Array, options) {
        return new BufferTokenizer$1(uint8Array, options);
      }
      /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
      var read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m2;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m2 = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m2 = m2 * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m2 ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m2 = m2 + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m2 * Math.pow(2, e - mLen);
      };
      var write3 = function(buffer, value2, offset, isLE, mLen, nBytes) {
        var e, m2, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value2 < 0 || value2 === 0 && 1 / value2 < 0 ? 1 : 0;
        value2 = Math.abs(value2);
        if (isNaN(value2) || value2 === Infinity) {
          m2 = isNaN(value2) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value2) / Math.LN2);
          if (value2 * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value2 += rt / c;
          } else {
            value2 += rt * Math.pow(2, 1 - eBias);
          }
          if (value2 * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m2 = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m2 = (value2 * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m2 = value2 * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m2 & 255, i += d, m2 /= 256, mLen -= 8) {
        }
        e = e << mLen | m2;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s * 128;
      };
      function dv(array) {
        return new DataView(array.buffer, array.byteOffset);
      }
      const UINT8 = exports("c", {
        len: 1,
        get(array, offset) {
          return dv(array).getUint8(offset);
        },
        put(array, offset, value2) {
          dv(array).setUint8(offset, value2);
          return offset + 1;
        }
      });
      const UINT16_LE = exports("k", {
        len: 2,
        get(array, offset) {
          return dv(array).getUint16(offset, true);
        },
        put(array, offset, value2) {
          dv(array).setUint16(offset, value2, true);
          return offset + 2;
        }
      });
      const UINT16_BE = exports("d", {
        len: 2,
        get(array, offset) {
          return dv(array).getUint16(offset);
        },
        put(array, offset, value2) {
          dv(array).setUint16(offset, value2);
          return offset + 2;
        }
      });
      const UINT24_LE = exports("N", {
        len: 3,
        get(array, offset) {
          const dataView = dv(array);
          return dataView.getUint8(offset) + (dataView.getUint16(offset + 1, true) << 8);
        },
        put(array, offset, value2) {
          const dataView = dv(array);
          dataView.setUint8(offset, value2 & 255);
          dataView.setUint16(offset + 1, value2 >> 8, true);
          return offset + 3;
        }
      });
      const UINT24_BE = exports("r", {
        len: 3,
        get(array, offset) {
          const dataView = dv(array);
          return (dataView.getUint16(offset) << 8) + dataView.getUint8(offset + 2);
        },
        put(array, offset, value2) {
          const dataView = dv(array);
          dataView.setUint16(offset, value2 >> 8);
          dataView.setUint8(offset + 2, value2 & 255);
          return offset + 3;
        }
      });
      const UINT32_LE = exports("f", {
        len: 4,
        get(array, offset) {
          return dv(array).getUint32(offset, true);
        },
        put(array, offset, value2) {
          dv(array).setUint32(offset, value2, true);
          return offset + 4;
        }
      });
      const UINT32_BE = exports("a", {
        len: 4,
        get(array, offset) {
          return dv(array).getUint32(offset);
        },
        put(array, offset, value2) {
          dv(array).setUint32(offset, value2);
          return offset + 4;
        }
      });
      const INT8 = exports("D", {
        len: 1,
        get(array, offset) {
          return dv(array).getInt8(offset);
        },
        put(array, offset, value2) {
          dv(array).setInt8(offset, value2);
          return offset + 1;
        }
      });
      const INT16_BE = exports("I", {
        len: 2,
        get(array, offset) {
          return dv(array).getInt16(offset);
        },
        put(array, offset, value2) {
          dv(array).setInt16(offset, value2);
          return offset + 2;
        }
      });
      const INT16_LE = {
        len: 2,
        get(array, offset) {
          return dv(array).getInt16(offset, true);
        },
        put(array, offset, value2) {
          dv(array).setInt16(offset, value2, true);
          return offset + 2;
        }
      };
      const INT24_LE = {
        len: 3,
        get(array, offset) {
          const unsigned = UINT24_LE.get(array, offset);
          return unsigned > 8388607 ? unsigned - 16777216 : unsigned;
        },
        put(array, offset, value2) {
          const dataView = dv(array);
          dataView.setUint8(offset, value2 & 255);
          dataView.setUint16(offset + 1, value2 >> 8, true);
          return offset + 3;
        }
      };
      const INT24_BE = exports("G", {
        len: 3,
        get(array, offset) {
          const unsigned = UINT24_BE.get(array, offset);
          return unsigned > 8388607 ? unsigned - 16777216 : unsigned;
        },
        put(array, offset, value2) {
          const dataView = dv(array);
          dataView.setUint16(offset, value2 >> 8);
          dataView.setUint8(offset + 2, value2 & 255);
          return offset + 3;
        }
      });
      const INT32_BE = exports("C", {
        len: 4,
        get(array, offset) {
          return dv(array).getInt32(offset);
        },
        put(array, offset, value2) {
          dv(array).setInt32(offset, value2);
          return offset + 4;
        }
      });
      const INT32_LE = exports("q", {
        len: 4,
        get(array, offset) {
          return dv(array).getInt32(offset, true);
        },
        put(array, offset, value2) {
          dv(array).setInt32(offset, value2, true);
          return offset + 4;
        }
      });
      const UINT64_LE = exports("e", {
        len: 8,
        get(array, offset) {
          return dv(array).getBigUint64(offset, true);
        },
        put(array, offset, value2) {
          dv(array).setBigUint64(offset, value2, true);
          return offset + 8;
        }
      });
      const INT64_LE = exports("p", {
        len: 8,
        get(array, offset) {
          return dv(array).getBigInt64(offset, true);
        },
        put(array, offset, value2) {
          dv(array).setBigInt64(offset, value2, true);
          return offset + 8;
        }
      });
      const UINT64_BE = exports("x", {
        len: 8,
        get(array, offset) {
          return dv(array).getBigUint64(offset);
        },
        put(array, offset, value2) {
          dv(array).setBigUint64(offset, value2);
          return offset + 8;
        }
      });
      const INT64_BE = exports("o", {
        len: 8,
        get(array, offset) {
          return dv(array).getBigInt64(offset);
        },
        put(array, offset, value2) {
          dv(array).setBigInt64(offset, value2);
          return offset + 8;
        }
      });
      const Float16_BE = {
        len: 2,
        get(dataView, offset) {
          return read(dataView, offset, false, 10, this.len);
        },
        put(dataView, offset, value2) {
          write3(dataView, value2, offset, false, 10, this.len);
          return offset + this.len;
        }
      };
      const Float16_LE = {
        len: 2,
        get(array, offset) {
          return read(array, offset, true, 10, this.len);
        },
        put(array, offset, value2) {
          write3(array, value2, offset, true, 10, this.len);
          return offset + this.len;
        }
      };
      const Float32_BE = exports("w", {
        len: 4,
        get(array, offset) {
          return dv(array).getFloat32(offset);
        },
        put(array, offset, value2) {
          dv(array).setFloat32(offset, value2);
          return offset + 4;
        }
      });
      const Float32_LE = {
        len: 4,
        get(array, offset) {
          return dv(array).getFloat32(offset, true);
        },
        put(array, offset, value2) {
          dv(array).setFloat32(offset, value2, true);
          return offset + 4;
        }
      };
      const Float64_BE = exports("v", {
        len: 8,
        get(array, offset) {
          return dv(array).getFloat64(offset);
        },
        put(array, offset, value2) {
          dv(array).setFloat64(offset, value2);
          return offset + 8;
        }
      });
      const Float64_LE = {
        len: 8,
        get(array, offset) {
          return dv(array).getFloat64(offset, true);
        },
        put(array, offset, value2) {
          dv(array).setFloat64(offset, value2, true);
          return offset + 8;
        }
      };
      const Float80_BE = {
        len: 10,
        get(array, offset) {
          return read(array, offset, false, 63, this.len);
        },
        put(array, offset, value2) {
          write3(array, value2, offset, false, 63, this.len);
          return offset + this.len;
        }
      };
      const Float80_LE = {
        len: 10,
        get(array, offset) {
          return read(array, offset, true, 63, this.len);
        },
        put(array, offset, value2) {
          write3(array, value2, offset, true, 63, this.len);
          return offset + this.len;
        }
      };
      class IgnoreType {
        /**
         * @param len number of bytes to ignore
         */
        constructor(len) {
          this.len = len;
        }
        // ToDo: don't read, but skip data
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        get(array, off) {
        }
      }
      class Uint8ArrayType {
        constructor(len) {
          this.len = len;
        }
        get(array, offset) {
          return array.subarray(offset, offset + this.len);
        }
      } exports("U", Uint8ArrayType);
      class StringType {
        constructor(len, encoding) {
          this.len = len;
          this.encoding = encoding;
          this.textDecoder = new TextDecoder(encoding);
        }
        get(uint8Array, offset) {
          return this.textDecoder.decode(uint8Array.subarray(offset, offset + this.len));
        }
      } exports("S", StringType);
      class AnsiStringType {
        constructor(len) {
          this.len = len;
          this.textDecoder = new TextDecoder("windows-1252");
        }
        get(uint8Array, offset = 0) {
          return this.textDecoder.decode(uint8Array.subarray(offset, offset + this.len));
        }
      }
      const Token = exports("y", /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
        __proto__: null,
        AnsiStringType,
        Float16_BE,
        Float16_LE,
        Float32_BE,
        Float32_LE,
        Float64_BE,
        Float64_LE,
        Float80_BE,
        Float80_LE,
        INT16_BE,
        INT16_LE,
        INT24_BE,
        INT24_LE,
        INT32_BE,
        INT32_LE,
        INT64_BE,
        INT64_LE,
        INT8,
        IgnoreType,
        StringType,
        UINT16_BE,
        UINT16_LE,
        UINT24_BE,
        UINT24_LE,
        UINT32_BE,
        UINT32_LE,
        UINT64_BE,
        UINT64_LE,
        UINT8,
        Uint8ArrayType
      }, Symbol.toStringTag, { value: "Module" })));
      const defaultMessages = "End-Of-Stream";
      class EndOfStreamError2 extends Error {
        constructor() {
          super(defaultMessages);
        }
      }
      class AbstractStreamReader2 {
        constructor() {
          this.maxStreamReadSize = 1 * 1024 * 1024;
          this.endOfStream = false;
          this.peekQueue = [];
        }
        async peek(uint8Array, offset, length) {
          const bytesRead = await this.read(uint8Array, offset, length);
          this.peekQueue.push(uint8Array.subarray(offset, offset + bytesRead));
          return bytesRead;
        }
        async read(buffer, offset, length) {
          if (length === 0) {
            return 0;
          }
          let bytesRead = this.readFromPeekBuffer(buffer, offset, length);
          bytesRead += await this.readRemainderFromStream(buffer, offset + bytesRead, length - bytesRead);
          if (bytesRead === 0) {
            throw new EndOfStreamError2();
          }
          return bytesRead;
        }
        /**
         * Read chunk from stream
         * @param buffer - Target Uint8Array (or Buffer) to store data read from stream in
         * @param offset - Offset target
         * @param length - Number of bytes to read
         * @returns Number of bytes read
         */
        readFromPeekBuffer(buffer, offset, length) {
          let remaining = length;
          let bytesRead = 0;
          while (this.peekQueue.length > 0 && remaining > 0) {
            const peekData = this.peekQueue.pop();
            if (!peekData)
              throw new Error("peekData should be defined");
            const lenCopy = Math.min(peekData.length, remaining);
            buffer.set(peekData.subarray(0, lenCopy), offset + bytesRead);
            bytesRead += lenCopy;
            remaining -= lenCopy;
            if (lenCopy < peekData.length) {
              this.peekQueue.push(peekData.subarray(lenCopy));
            }
          }
          return bytesRead;
        }
        async readRemainderFromStream(buffer, offset, initialRemaining) {
          let remaining = initialRemaining;
          let bytesRead = 0;
          while (remaining > 0 && !this.endOfStream) {
            const reqLen = Math.min(remaining, this.maxStreamReadSize);
            const chunkLen = await this.readFromStream(buffer, offset + bytesRead, reqLen);
            if (chunkLen === 0)
              break;
            bytesRead += chunkLen;
            remaining -= chunkLen;
          }
          return bytesRead;
        }
      }
      class WebStreamReader2 extends AbstractStreamReader2 {
        constructor(stream) {
          super();
          this.reader = stream.getReader({ mode: "byob" });
        }
        async readFromStream(buffer, offset, length) {
          if (this.endOfStream) {
            throw new EndOfStreamError2();
          }
          const result = await this.reader.read(new Uint8Array(length));
          if (result.done) {
            this.endOfStream = result.done;
          }
          if (result.value) {
            buffer.set(result.value, offset);
            return result.value.byteLength;
          }
          return 0;
        }
        abort() {
          return this.reader.cancel();
        }
        async close() {
          await this.abort();
          this.reader.releaseLock();
        }
      }
      class AbstractTokenizer2 {
        /**
         * Constructor
         * @param options Tokenizer options
         * @protected
         */
        constructor(options) {
          this.numBuffer = new Uint8Array(8);
          this.position = 0;
          this.onClose = options == null ? void 0 : options.onClose;
          if (options == null ? void 0 : options.abortSignal) {
            options.abortSignal.addEventListener("abort", () => {
              this.abort();
            });
          }
        }
        /**
         * Read a token from the tokenizer-stream
         * @param token - The token to read
         * @param position - If provided, the desired position in the tokenizer-stream
         * @returns Promise with token data
         */
        async readToken(token, position = this.position) {
          const uint8Array = new Uint8Array(token.len);
          const len = await this.readBuffer(uint8Array, { position });
          if (len < token.len)
            throw new EndOfStreamError2();
          return token.get(uint8Array, 0);
        }
        /**
         * Peek a token from the tokenizer-stream.
         * @param token - Token to peek from the tokenizer-stream.
         * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.
         * @returns Promise with token data
         */
        async peekToken(token, position = this.position) {
          const uint8Array = new Uint8Array(token.len);
          const len = await this.peekBuffer(uint8Array, { position });
          if (len < token.len)
            throw new EndOfStreamError2();
          return token.get(uint8Array, 0);
        }
        /**
         * Read a numeric token from the stream
         * @param token - Numeric token
         * @returns Promise with number
         */
        async readNumber(token) {
          const len = await this.readBuffer(this.numBuffer, { length: token.len });
          if (len < token.len)
            throw new EndOfStreamError2();
          return token.get(this.numBuffer, 0);
        }
        /**
         * Read a numeric token from the stream
         * @param token - Numeric token
         * @returns Promise with number
         */
        async peekNumber(token) {
          const len = await this.peekBuffer(this.numBuffer, { length: token.len });
          if (len < token.len)
            throw new EndOfStreamError2();
          return token.get(this.numBuffer, 0);
        }
        /**
         * Ignore number of bytes, advances the pointer in under tokenizer-stream.
         * @param length - Number of bytes to ignore
         * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available
         */
        async ignore(length) {
          if (this.fileInfo.size !== void 0) {
            const bytesLeft = this.fileInfo.size - this.position;
            if (length > bytesLeft) {
              this.position += bytesLeft;
              return bytesLeft;
            }
          }
          this.position += length;
          return length;
        }
        async close() {
          var _a;
          await this.abort();
          await ((_a = this.onClose) == null ? void 0 : _a.call(this));
        }
        normalizeOptions(uint8Array, options) {
          if (options && options.position !== void 0 && options.position < this.position) {
            throw new Error("`options.position` must be equal or greater than `tokenizer.position`");
          }
          if (options) {
            return {
              mayBeLess: options.mayBeLess === true,
              offset: options.offset ? options.offset : 0,
              length: options.length ? options.length : uint8Array.length - (options.offset ? options.offset : 0),
              position: options.position ? options.position : this.position
            };
          }
          return {
            mayBeLess: false,
            offset: 0,
            length: uint8Array.length,
            position: this.position
          };
        }
        abort() {
          return Promise.resolve();
        }
      }
      const maxBufferSize = 256e3;
      class ReadStreamTokenizer2 extends AbstractTokenizer2 {
        /**
         * Constructor
         * @param streamReader stream-reader to read from
         * @param options Tokenizer options
         */
        constructor(streamReader, options) {
          super(options);
          this.streamReader = streamReader;
          this.fileInfo = (options == null ? void 0 : options.fileInfo) ?? {};
        }
        /**
         * Read buffer from tokenizer
         * @param uint8Array - Target Uint8Array to fill with data read from the tokenizer-stream
         * @param options - Read behaviour options
         * @returns Promise with number of bytes read
         */
        async readBuffer(uint8Array, options) {
          const normOptions = this.normalizeOptions(uint8Array, options);
          const skipBytes = normOptions.position - this.position;
          if (skipBytes > 0) {
            await this.ignore(skipBytes);
            return this.readBuffer(uint8Array, options);
          }
          if (skipBytes < 0) {
            throw new Error("`options.position` must be equal or greater than `tokenizer.position`");
          }
          if (normOptions.length === 0) {
            return 0;
          }
          const bytesRead = await this.streamReader.read(uint8Array, normOptions.offset, normOptions.length);
          this.position += bytesRead;
          if ((!options || !options.mayBeLess) && bytesRead < normOptions.length) {
            throw new EndOfStreamError2();
          }
          return bytesRead;
        }
        /**
         * Peek (read ahead) buffer from tokenizer
         * @param uint8Array - Uint8Array (or Buffer) to write data to
         * @param options - Read behaviour options
         * @returns Promise with number of bytes peeked
         */
        async peekBuffer(uint8Array, options) {
          const normOptions = this.normalizeOptions(uint8Array, options);
          let bytesRead = 0;
          if (normOptions.position) {
            const skipBytes = normOptions.position - this.position;
            if (skipBytes > 0) {
              const skipBuffer = new Uint8Array(normOptions.length + skipBytes);
              bytesRead = await this.peekBuffer(skipBuffer, { mayBeLess: normOptions.mayBeLess });
              uint8Array.set(skipBuffer.subarray(skipBytes), normOptions.offset);
              return bytesRead - skipBytes;
            }
            if (skipBytes < 0) {
              throw new Error("Cannot peek from a negative offset in a stream");
            }
          }
          if (normOptions.length > 0) {
            try {
              bytesRead = await this.streamReader.peek(uint8Array, normOptions.offset, normOptions.length);
            } catch (err) {
              if ((options == null ? void 0 : options.mayBeLess) && err instanceof EndOfStreamError2) {
                return 0;
              }
              throw err;
            }
            if (!normOptions.mayBeLess && bytesRead < normOptions.length) {
              throw new EndOfStreamError2();
            }
          }
          return bytesRead;
        }
        async ignore(length) {
          const bufSize = Math.min(maxBufferSize, length);
          const buf = new Uint8Array(bufSize);
          let totBytesRead = 0;
          while (totBytesRead < length) {
            const remaining = length - totBytesRead;
            const bytesRead = await this.readBuffer(buf, { length: Math.min(bufSize, remaining) });
            if (bytesRead < 0) {
              return bytesRead;
            }
            totBytesRead += bytesRead;
          }
          return totBytesRead;
        }
        abort() {
          return this.streamReader.abort();
        }
        supportsRandomAccess() {
          return false;
        }
      }
      class BufferTokenizer2 extends AbstractTokenizer2 {
        /**
         * Construct BufferTokenizer
         * @param uint8Array - Uint8Array to tokenize
         * @param options Tokenizer options
         */
        constructor(uint8Array, options) {
          super(options);
          this.uint8Array = uint8Array;
          this.fileInfo = { ...(options == null ? void 0 : options.fileInfo) ?? {}, ...{ size: uint8Array.length } };
        }
        /**
         * Read buffer from tokenizer
         * @param uint8Array - Uint8Array to tokenize
         * @param options - Read behaviour options
         * @returns {Promise<number>}
         */
        async readBuffer(uint8Array, options) {
          if (options == null ? void 0 : options.position) {
            if (options.position < this.position) {
              throw new Error("`options.position` must be equal or greater than `tokenizer.position`");
            }
            this.position = options.position;
          }
          const bytesRead = await this.peekBuffer(uint8Array, options);
          this.position += bytesRead;
          return bytesRead;
        }
        /**
         * Peek (read ahead) buffer from tokenizer
         * @param uint8Array
         * @param options - Read behaviour options
         * @returns {Promise<number>}
         */
        async peekBuffer(uint8Array, options) {
          const normOptions = this.normalizeOptions(uint8Array, options);
          const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);
          if (!normOptions.mayBeLess && bytes2read < normOptions.length) {
            throw new EndOfStreamError2();
          }
          uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);
          return bytes2read;
        }
        close() {
          return super.close();
        }
        supportsRandomAccess() {
          return true;
        }
        setPosition(position) {
          this.position = position;
        }
      }
      function fromWebStream(webStream, options) {
        return new ReadStreamTokenizer2(new WebStreamReader2(webStream), options);
      }
      function fromBuffer(uint8Array, options) {
        return new BufferTokenizer2(uint8Array, options);
      }
      const objectToString = Object.prototype.toString;
      const uint8ArrayStringified = "[object Uint8Array]";
      const arrayBufferStringified = "[object ArrayBuffer]";
      function isType(value2, typeConstructor, typeStringified) {
        if (!value2) {
          return false;
        }
        if (value2.constructor === typeConstructor) {
          return true;
        }
        return objectToString.call(value2) === typeStringified;
      }
      function isUint8Array(value2) {
        return isType(value2, Uint8Array, uint8ArrayStringified);
      }
      function isArrayBuffer(value2) {
        return isType(value2, ArrayBuffer, arrayBufferStringified);
      }
      function isUint8ArrayOrArrayBuffer(value2) {
        return isUint8Array(value2) || isArrayBuffer(value2);
      }
      function assertUint8Array(value2) {
        if (!isUint8Array(value2)) {
          throw new TypeError(`Expected \`Uint8Array\`, got \`${typeof value2}\``);
        }
      }
      function assertUint8ArrayOrArrayBuffer(value2) {
        if (!isUint8ArrayOrArrayBuffer(value2)) {
          throw new TypeError(`Expected \`Uint8Array\` or \`ArrayBuffer\`, got \`${typeof value2}\``);
        }
      }
      const cachedDecoders = {
        utf8: new globalThis.TextDecoder("utf8")
      };
      function uint8ArrayToString(array, encoding = "utf8") {
        assertUint8ArrayOrArrayBuffer(array);
        cachedDecoders[encoding] ?? (cachedDecoders[encoding] = new globalThis.TextDecoder(encoding));
        return cachedDecoders[encoding].decode(array);
      }
      function assertString(value2) {
        if (typeof value2 !== "string") {
          throw new TypeError(`Expected \`string\`, got \`${typeof value2}\``);
        }
      }
      const cachedEncoder = new globalThis.TextEncoder();
      function stringToUint8Array(string) {
        assertString(string);
        return cachedEncoder.encode(string);
      }
      const byteToHexLookupTable = Array.from({ length: 256 }, (_, index) => index.toString(16).padStart(2, "0"));
      function uint8ArrayToHex(array) {
        assertUint8Array(array);
        let hexString = "";
        for (let index = 0; index < array.length; index++) {
          hexString += byteToHexLookupTable[array[index]];
        }
        return hexString;
      }
      const hexToDecimalLookupTable = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        a: 10,
        b: 11,
        c: 12,
        d: 13,
        e: 14,
        f: 15,
        A: 10,
        B: 11,
        C: 12,
        D: 13,
        E: 14,
        F: 15
      };
      function hexToUint8Array(hexString) {
        assertString(hexString);
        if (hexString.length % 2 !== 0) {
          throw new Error("Invalid Hex string length.");
        }
        const resultLength = hexString.length / 2;
        const bytes = new Uint8Array(resultLength);
        for (let index = 0; index < resultLength; index++) {
          const highNibble = hexToDecimalLookupTable[hexString[index * 2]];
          const lowNibble = hexToDecimalLookupTable[hexString[index * 2 + 1]];
          if (highNibble === void 0 || lowNibble === void 0) {
            throw new Error(`Invalid Hex character encountered at position ${index * 2}`);
          }
          bytes[index] = highNibble << 4 | lowNibble;
        }
        return bytes;
      }
      function getUintBE(view) {
        const { byteLength } = view;
        if (byteLength === 6) {
          return view.getUint16(0) * 2 ** 32 + view.getUint32(2);
        }
        if (byteLength === 5) {
          return view.getUint8(0) * 2 ** 32 + view.getUint32(1);
        }
        if (byteLength === 4) {
          return view.getUint32(0);
        }
        if (byteLength === 3) {
          return view.getUint8(0) * 2 ** 16 + view.getUint16(1);
        }
        if (byteLength === 2) {
          return view.getUint16(0);
        }
        if (byteLength === 1) {
          return view.getUint8(0);
        }
      }
      function indexOf(array, value2) {
        const arrayLength = array.length;
        const valueLength = value2.length;
        if (valueLength === 0) {
          return -1;
        }
        if (valueLength > arrayLength) {
          return -1;
        }
        const validOffsetLength = arrayLength - valueLength;
        for (let index = 0; index <= validOffsetLength; index++) {
          let isMatch = true;
          for (let index2 = 0; index2 < valueLength; index2++) {
            if (array[index + index2] !== value2[index2]) {
              isMatch = false;
              break;
            }
          }
          if (isMatch) {
            return index;
          }
        }
        return -1;
      }
      function includes(array, value2) {
        return indexOf(array, value2) !== -1;
      }
      function stringToBytes(string) {
        return [...string].map((character) => character.charCodeAt(0));
      }
      function tarHeaderChecksumMatches(arrayBuffer, offset = 0) {
        const readSum = Number.parseInt(new StringType(6).get(arrayBuffer, 148).replace(/\0.*$/, "").trim(), 8);
        if (Number.isNaN(readSum)) {
          return false;
        }
        let sum = 8 * 32;
        for (let index = offset; index < offset + 148; index++) {
          sum += arrayBuffer[index];
        }
        for (let index = offset + 156; index < offset + 512; index++) {
          sum += arrayBuffer[index];
        }
        return readSum === sum;
      }
      const uint32SyncSafeToken = {
        get: (buffer, offset) => buffer[offset + 3] & 127 | buffer[offset + 2] << 7 | buffer[offset + 1] << 14 | buffer[offset] << 21,
        len: 4
      };
      const extensions = [
        "jpg",
        "png",
        "apng",
        "gif",
        "webp",
        "flif",
        "xcf",
        "cr2",
        "cr3",
        "orf",
        "arw",
        "dng",
        "nef",
        "rw2",
        "raf",
        "tif",
        "bmp",
        "icns",
        "jxr",
        "psd",
        "indd",
        "zip",
        "tar",
        "rar",
        "gz",
        "bz2",
        "7z",
        "dmg",
        "mp4",
        "mid",
        "mkv",
        "webm",
        "mov",
        "avi",
        "mpg",
        "mp2",
        "mp3",
        "m4a",
        "oga",
        "ogg",
        "ogv",
        "opus",
        "flac",
        "wav",
        "spx",
        "amr",
        "pdf",
        "epub",
        "elf",
        "macho",
        "exe",
        "swf",
        "rtf",
        "wasm",
        "woff",
        "woff2",
        "eot",
        "ttf",
        "otf",
        "ico",
        "flv",
        "ps",
        "xz",
        "sqlite",
        "nes",
        "crx",
        "xpi",
        "cab",
        "deb",
        "ar",
        "rpm",
        "Z",
        "lz",
        "cfb",
        "mxf",
        "mts",
        "blend",
        "bpg",
        "docx",
        "pptx",
        "xlsx",
        "3gp",
        "3g2",
        "j2c",
        "jp2",
        "jpm",
        "jpx",
        "mj2",
        "aif",
        "qcp",
        "odt",
        "ods",
        "odp",
        "xml",
        "mobi",
        "heic",
        "cur",
        "ktx",
        "ape",
        "wv",
        "dcm",
        "ics",
        "glb",
        "pcap",
        "dsf",
        "lnk",
        "alias",
        "voc",
        "ac3",
        "m4v",
        "m4p",
        "m4b",
        "f4v",
        "f4p",
        "f4b",
        "f4a",
        "mie",
        "asf",
        "ogm",
        "ogx",
        "mpc",
        "arrow",
        "shp",
        "aac",
        "mp1",
        "it",
        "s3m",
        "xm",
        "ai",
        "skp",
        "avif",
        "eps",
        "lzh",
        "pgp",
        "asar",
        "stl",
        "chm",
        "3mf",
        "zst",
        "jxl",
        "vcf",
        "jls",
        "pst",
        "dwg",
        "parquet",
        "class",
        "arj",
        "cpio",
        "ace",
        "avro",
        "icc",
        "fbx",
        "vsdx",
        "vtt",
        "apk"
      ];
      const mimeTypes = [
        "image/jpeg",
        "image/png",
        "image/gif",
        "image/webp",
        "image/flif",
        "image/x-xcf",
        "image/x-canon-cr2",
        "image/x-canon-cr3",
        "image/tiff",
        "image/bmp",
        "image/vnd.ms-photo",
        "image/vnd.adobe.photoshop",
        "application/x-indesign",
        "application/epub+zip",
        "application/x-xpinstall",
        "application/vnd.oasis.opendocument.text",
        "application/vnd.oasis.opendocument.spreadsheet",
        "application/vnd.oasis.opendocument.presentation",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "application/zip",
        "application/x-tar",
        "application/x-rar-compressed",
        "application/gzip",
        "application/x-bzip2",
        "application/x-7z-compressed",
        "application/x-apple-diskimage",
        "application/x-apache-arrow",
        "video/mp4",
        "audio/midi",
        "video/x-matroska",
        "video/webm",
        "video/quicktime",
        "video/vnd.avi",
        "audio/wav",
        "audio/qcelp",
        "audio/x-ms-asf",
        "video/x-ms-asf",
        "application/vnd.ms-asf",
        "video/mpeg",
        "video/3gpp",
        "audio/mpeg",
        "audio/mp4",
        // RFC 4337
        "video/ogg",
        "audio/ogg",
        "audio/ogg; codecs=opus",
        "application/ogg",
        "audio/x-flac",
        "audio/ape",
        "audio/wavpack",
        "audio/amr",
        "application/pdf",
        "application/x-elf",
        "application/x-mach-binary",
        "application/x-msdownload",
        "application/x-shockwave-flash",
        "application/rtf",
        "application/wasm",
        "font/woff",
        "font/woff2",
        "application/vnd.ms-fontobject",
        "font/ttf",
        "font/otf",
        "image/x-icon",
        "video/x-flv",
        "application/postscript",
        "application/eps",
        "application/x-xz",
        "application/x-sqlite3",
        "application/x-nintendo-nes-rom",
        "application/x-google-chrome-extension",
        "application/vnd.ms-cab-compressed",
        "application/x-deb",
        "application/x-unix-archive",
        "application/x-rpm",
        "application/x-compress",
        "application/x-lzip",
        "application/x-cfb",
        "application/x-mie",
        "application/mxf",
        "video/mp2t",
        "application/x-blender",
        "image/bpg",
        "image/j2c",
        "image/jp2",
        "image/jpx",
        "image/jpm",
        "image/mj2",
        "audio/aiff",
        "application/xml",
        "application/x-mobipocket-ebook",
        "image/heif",
        "image/heif-sequence",
        "image/heic",
        "image/heic-sequence",
        "image/icns",
        "image/ktx",
        "application/dicom",
        "audio/x-musepack",
        "text/calendar",
        "text/vcard",
        "text/vtt",
        "model/gltf-binary",
        "application/vnd.tcpdump.pcap",
        "audio/x-dsf",
        // Non-standard
        "application/x.ms.shortcut",
        // Invented by us
        "application/x.apple.alias",
        // Invented by us
        "audio/x-voc",
        "audio/vnd.dolby.dd-raw",
        "audio/x-m4a",
        "image/apng",
        "image/x-olympus-orf",
        "image/x-sony-arw",
        "image/x-adobe-dng",
        "image/x-nikon-nef",
        "image/x-panasonic-rw2",
        "image/x-fujifilm-raf",
        "video/x-m4v",
        "video/3gpp2",
        "application/x-esri-shape",
        "audio/aac",
        "audio/x-it",
        "audio/x-s3m",
        "audio/x-xm",
        "video/MP1S",
        "video/MP2P",
        "application/vnd.sketchup.skp",
        "image/avif",
        "application/x-lzh-compressed",
        "application/pgp-encrypted",
        "application/x-asar",
        "model/stl",
        "application/vnd.ms-htmlhelp",
        "model/3mf",
        "image/jxl",
        "application/zstd",
        "image/jls",
        "application/vnd.ms-outlook",
        "image/vnd.dwg",
        "application/x-parquet",
        "application/java-vm",
        "application/x-arj",
        "application/x-cpio",
        "application/x-ace-compressed",
        "application/avro",
        "application/vnd.iccprofile",
        "application/x.autodesk.fbx",
        // Invented by us
        "application/vnd.visio",
        "application/vnd.android.package-archive"
      ];
      const reasonableDetectionSizeInBytes = 4100;
      async function fileTypeFromBuffer(input) {
        return new FileTypeParser().fromBuffer(input);
      }
      function _check(buffer, headers, options) {
        options = {
          offset: 0,
          ...options
        };
        for (const [index, header] of headers.entries()) {
          if (options.mask) {
            if (header !== (options.mask[index] & buffer[index + options.offset])) {
              return false;
            }
          } else if (header !== buffer[index + options.offset]) {
            return false;
          }
        }
        return true;
      }
      class FileTypeParser {
        constructor(options) {
          this.detectors = options == null ? void 0 : options.customDetectors;
          this.tokenizerOptions = {
            abortSignal: options == null ? void 0 : options.signal
          };
          this.fromTokenizer = this.fromTokenizer.bind(this);
          this.fromBuffer = this.fromBuffer.bind(this);
          this.parse = this.parse.bind(this);
        }
        async fromTokenizer(tokenizer) {
          const initialPosition = tokenizer.position;
          for (const detector of this.detectors || []) {
            const fileType = await detector(tokenizer);
            if (fileType) {
              return fileType;
            }
            if (initialPosition !== tokenizer.position) {
              return void 0;
            }
          }
          return this.parse(tokenizer);
        }
        async fromBuffer(input) {
          if (!(input instanceof Uint8Array || input instanceof ArrayBuffer)) {
            throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`ArrayBuffer\`, got \`${typeof input}\``);
          }
          const buffer = input instanceof Uint8Array ? input : new Uint8Array(input);
          if (!((buffer == null ? void 0 : buffer.length) > 1)) {
            return;
          }
          return this.fromTokenizer(fromBuffer(buffer, this.tokenizerOptions));
        }
        async fromBlob(blob) {
          return this.fromStream(blob.stream());
        }
        async fromStream(stream) {
          const tokenizer = await fromWebStream(stream, this.tokenizerOptions);
          try {
            return await this.fromTokenizer(tokenizer);
          } finally {
            await tokenizer.close();
          }
        }
        async toDetectionStream(stream, options) {
          const { sampleSize = reasonableDetectionSizeInBytes } = options;
          let detectedFileType;
          let firstChunk;
          const reader = stream.getReader({ mode: "byob" });
          try {
            const { value: chunk, done } = await reader.read(new Uint8Array(sampleSize));
            firstChunk = chunk;
            if (!done && chunk) {
              try {
                detectedFileType = await this.fromBuffer(chunk.slice(0, sampleSize));
              } catch (error) {
                if (!(error instanceof EndOfStreamError2)) {
                  throw error;
                }
                detectedFileType = void 0;
              }
            }
            firstChunk = chunk;
          } finally {
            reader.releaseLock();
          }
          const transformStream = new TransformStream({
            async start(controller) {
              controller.enqueue(firstChunk);
            },
            transform(chunk, controller) {
              controller.enqueue(chunk);
            }
          });
          const newStream = stream.pipeThrough(transformStream);
          newStream.fileType = detectedFileType;
          return newStream;
        }
        check(header, options) {
          return _check(this.buffer, header, options);
        }
        checkString(header, options) {
          return this.check(stringToBytes(header), options);
        }
        async parse(tokenizer) {
          this.buffer = new Uint8Array(reasonableDetectionSizeInBytes);
          if (tokenizer.fileInfo.size === void 0) {
            tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;
          }
          this.tokenizer = tokenizer;
          await tokenizer.peekBuffer(this.buffer, { length: 12, mayBeLess: true });
          if (this.check([66, 77])) {
            return {
              ext: "bmp",
              mime: "image/bmp"
            };
          }
          if (this.check([11, 119])) {
            return {
              ext: "ac3",
              mime: "audio/vnd.dolby.dd-raw"
            };
          }
          if (this.check([120, 1])) {
            return {
              ext: "dmg",
              mime: "application/x-apple-diskimage"
            };
          }
          if (this.check([77, 90])) {
            return {
              ext: "exe",
              mime: "application/x-msdownload"
            };
          }
          if (this.check([37, 33])) {
            await tokenizer.peekBuffer(this.buffer, { length: 24, mayBeLess: true });
            if (this.checkString("PS-Adobe-", { offset: 2 }) && this.checkString(" EPSF-", { offset: 14 })) {
              return {
                ext: "eps",
                mime: "application/eps"
              };
            }
            return {
              ext: "ps",
              mime: "application/postscript"
            };
          }
          if (this.check([31, 160]) || this.check([31, 157])) {
            return {
              ext: "Z",
              mime: "application/x-compress"
            };
          }
          if (this.check([199, 113])) {
            return {
              ext: "cpio",
              mime: "application/x-cpio"
            };
          }
          if (this.check([96, 234])) {
            return {
              ext: "arj",
              mime: "application/x-arj"
            };
          }
          if (this.check([239, 187, 191])) {
            this.tokenizer.ignore(3);
            return this.parse(tokenizer);
          }
          if (this.check([71, 73, 70])) {
            return {
              ext: "gif",
              mime: "image/gif"
            };
          }
          if (this.check([73, 73, 188])) {
            return {
              ext: "jxr",
              mime: "image/vnd.ms-photo"
            };
          }
          if (this.check([31, 139, 8])) {
            return {
              ext: "gz",
              mime: "application/gzip"
            };
          }
          if (this.check([66, 90, 104])) {
            return {
              ext: "bz2",
              mime: "application/x-bzip2"
            };
          }
          if (this.checkString("ID3")) {
            await tokenizer.ignore(6);
            const id3HeaderLength = await tokenizer.readToken(uint32SyncSafeToken);
            if (tokenizer.position + id3HeaderLength > tokenizer.fileInfo.size) {
              return {
                ext: "mp3",
                mime: "audio/mpeg"
              };
            }
            await tokenizer.ignore(id3HeaderLength);
            return this.fromTokenizer(tokenizer);
          }
          if (this.checkString("MP+")) {
            return {
              ext: "mpc",
              mime: "audio/x-musepack"
            };
          }
          if ((this.buffer[0] === 67 || this.buffer[0] === 70) && this.check([87, 83], { offset: 1 })) {
            return {
              ext: "swf",
              mime: "application/x-shockwave-flash"
            };
          }
          if (this.check([255, 216, 255])) {
            if (this.check([247], { offset: 3 })) {
              return {
                ext: "jls",
                mime: "image/jls"
              };
            }
            return {
              ext: "jpg",
              mime: "image/jpeg"
            };
          }
          if (this.check([79, 98, 106, 1])) {
            return {
              ext: "avro",
              mime: "application/avro"
            };
          }
          if (this.checkString("FLIF")) {
            return {
              ext: "flif",
              mime: "image/flif"
            };
          }
          if (this.checkString("8BPS")) {
            return {
              ext: "psd",
              mime: "image/vnd.adobe.photoshop"
            };
          }
          if (this.checkString("WEBP", { offset: 8 })) {
            return {
              ext: "webp",
              mime: "image/webp"
            };
          }
          if (this.checkString("MPCK")) {
            return {
              ext: "mpc",
              mime: "audio/x-musepack"
            };
          }
          if (this.checkString("FORM")) {
            return {
              ext: "aif",
              mime: "audio/aiff"
            };
          }
          if (this.checkString("icns", { offset: 0 })) {
            return {
              ext: "icns",
              mime: "image/icns"
            };
          }
          if (this.check([80, 75, 3, 4])) {
            try {
              while (tokenizer.position + 30 < tokenizer.fileInfo.size) {
                await tokenizer.readBuffer(this.buffer, { length: 30 });
                const view = new DataView(this.buffer.buffer);
                const zipHeader = {
                  compressedSize: view.getUint32(18, true),
                  uncompressedSize: view.getUint32(22, true),
                  filenameLength: view.getUint16(26, true),
                  extraFieldLength: view.getUint16(28, true)
                };
                zipHeader.filename = await tokenizer.readToken(new StringType(zipHeader.filenameLength, "utf-8"));
                await tokenizer.ignore(zipHeader.extraFieldLength);
                if (/classes\d*\.dex/.test(zipHeader.filename)) {
                  return {
                    ext: "apk",
                    mime: "application/vnd.android.package-archive"
                  };
                }
                if (zipHeader.filename === "META-INF/mozilla.rsa") {
                  return {
                    ext: "xpi",
                    mime: "application/x-xpinstall"
                  };
                }
                if (zipHeader.filename.endsWith(".rels") || zipHeader.filename.endsWith(".xml")) {
                  const type = zipHeader.filename.split("/")[0];
                  switch (type) {
                    case "_rels":
                      break;
                    case "word":
                      return {
                        ext: "docx",
                        mime: "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                      };
                    case "ppt":
                      return {
                        ext: "pptx",
                        mime: "application/vnd.openxmlformats-officedocument.presentationml.presentation"
                      };
                    case "xl":
                      return {
                        ext: "xlsx",
                        mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                      };
                    case "visio":
                      return {
                        ext: "vsdx",
                        mime: "application/vnd.visio"
                      };
                    default:
                      break;
                  }
                }
                if (zipHeader.filename.startsWith("xl/")) {
                  return {
                    ext: "xlsx",
                    mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                  };
                }
                if (zipHeader.filename.startsWith("3D/") && zipHeader.filename.endsWith(".model")) {
                  return {
                    ext: "3mf",
                    mime: "model/3mf"
                  };
                }
                if (zipHeader.filename === "mimetype" && zipHeader.compressedSize === zipHeader.uncompressedSize) {
                  let mimeType = await tokenizer.readToken(new StringType(zipHeader.compressedSize, "utf-8"));
                  mimeType = mimeType.trim();
                  switch (mimeType) {
                    case "application/epub+zip":
                      return {
                        ext: "epub",
                        mime: "application/epub+zip"
                      };
                    case "application/vnd.oasis.opendocument.text":
                      return {
                        ext: "odt",
                        mime: "application/vnd.oasis.opendocument.text"
                      };
                    case "application/vnd.oasis.opendocument.spreadsheet":
                      return {
                        ext: "ods",
                        mime: "application/vnd.oasis.opendocument.spreadsheet"
                      };
                    case "application/vnd.oasis.opendocument.presentation":
                      return {
                        ext: "odp",
                        mime: "application/vnd.oasis.opendocument.presentation"
                      };
                    default:
                  }
                }
                if (zipHeader.compressedSize === 0) {
                  let nextHeaderIndex = -1;
                  while (nextHeaderIndex < 0 && tokenizer.position < tokenizer.fileInfo.size) {
                    await tokenizer.peekBuffer(this.buffer, { mayBeLess: true });
                    nextHeaderIndex = indexOf(this.buffer, new Uint8Array([80, 75, 3, 4]));
                    await tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : this.buffer.length);
                  }
                } else {
                  await tokenizer.ignore(zipHeader.compressedSize);
                }
              }
            } catch (error) {
              if (!(error instanceof EndOfStreamError2)) {
                throw error;
              }
            }
            return {
              ext: "zip",
              mime: "application/zip"
            };
          }
          if (this.checkString("OggS")) {
            await tokenizer.ignore(28);
            const type = new Uint8Array(8);
            await tokenizer.readBuffer(type);
            if (_check(type, [79, 112, 117, 115, 72, 101, 97, 100])) {
              return {
                ext: "opus",
                mime: "audio/ogg; codecs=opus"
              };
            }
            if (_check(type, [128, 116, 104, 101, 111, 114, 97])) {
              return {
                ext: "ogv",
                mime: "video/ogg"
              };
            }
            if (_check(type, [1, 118, 105, 100, 101, 111, 0])) {
              return {
                ext: "ogm",
                mime: "video/ogg"
              };
            }
            if (_check(type, [127, 70, 76, 65, 67])) {
              return {
                ext: "oga",
                mime: "audio/ogg"
              };
            }
            if (_check(type, [83, 112, 101, 101, 120, 32, 32])) {
              return {
                ext: "spx",
                mime: "audio/ogg"
              };
            }
            if (_check(type, [1, 118, 111, 114, 98, 105, 115])) {
              return {
                ext: "ogg",
                mime: "audio/ogg"
              };
            }
            return {
              ext: "ogx",
              mime: "application/ogg"
            };
          }
          if (this.check([80, 75]) && (this.buffer[2] === 3 || this.buffer[2] === 5 || this.buffer[2] === 7) && (this.buffer[3] === 4 || this.buffer[3] === 6 || this.buffer[3] === 8)) {
            return {
              ext: "zip",
              mime: "application/zip"
            };
          }
          if (this.checkString("ftyp", { offset: 4 }) && (this.buffer[8] & 96) !== 0) {
            const brandMajor = new StringType(4, "latin1").get(this.buffer, 8).replace("\0", " ").trim();
            switch (brandMajor) {
              case "avif":
              case "avis":
                return { ext: "avif", mime: "image/avif" };
              case "mif1":
                return { ext: "heic", mime: "image/heif" };
              case "msf1":
                return { ext: "heic", mime: "image/heif-sequence" };
              case "heic":
              case "heix":
                return { ext: "heic", mime: "image/heic" };
              case "hevc":
              case "hevx":
                return { ext: "heic", mime: "image/heic-sequence" };
              case "qt":
                return { ext: "mov", mime: "video/quicktime" };
              case "M4V":
              case "M4VH":
              case "M4VP":
                return { ext: "m4v", mime: "video/x-m4v" };
              case "M4P":
                return { ext: "m4p", mime: "video/mp4" };
              case "M4B":
                return { ext: "m4b", mime: "audio/mp4" };
              case "M4A":
                return { ext: "m4a", mime: "audio/x-m4a" };
              case "F4V":
                return { ext: "f4v", mime: "video/mp4" };
              case "F4P":
                return { ext: "f4p", mime: "video/mp4" };
              case "F4A":
                return { ext: "f4a", mime: "audio/mp4" };
              case "F4B":
                return { ext: "f4b", mime: "audio/mp4" };
              case "crx":
                return { ext: "cr3", mime: "image/x-canon-cr3" };
              default:
                if (brandMajor.startsWith("3g")) {
                  if (brandMajor.startsWith("3g2")) {
                    return { ext: "3g2", mime: "video/3gpp2" };
                  }
                  return { ext: "3gp", mime: "video/3gpp" };
                }
                return { ext: "mp4", mime: "video/mp4" };
            }
          }
          if (this.checkString("MThd")) {
            return {
              ext: "mid",
              mime: "audio/midi"
            };
          }
          if (this.checkString("wOFF") && (this.check([0, 1, 0, 0], { offset: 4 }) || this.checkString("OTTO", { offset: 4 }))) {
            return {
              ext: "woff",
              mime: "font/woff"
            };
          }
          if (this.checkString("wOF2") && (this.check([0, 1, 0, 0], { offset: 4 }) || this.checkString("OTTO", { offset: 4 }))) {
            return {
              ext: "woff2",
              mime: "font/woff2"
            };
          }
          if (this.check([212, 195, 178, 161]) || this.check([161, 178, 195, 212])) {
            return {
              ext: "pcap",
              mime: "application/vnd.tcpdump.pcap"
            };
          }
          if (this.checkString("DSD ")) {
            return {
              ext: "dsf",
              mime: "audio/x-dsf"
              // Non-standard
            };
          }
          if (this.checkString("LZIP")) {
            return {
              ext: "lz",
              mime: "application/x-lzip"
            };
          }
          if (this.checkString("fLaC")) {
            return {
              ext: "flac",
              mime: "audio/x-flac"
            };
          }
          if (this.check([66, 80, 71, 251])) {
            return {
              ext: "bpg",
              mime: "image/bpg"
            };
          }
          if (this.checkString("wvpk")) {
            return {
              ext: "wv",
              mime: "audio/wavpack"
            };
          }
          if (this.checkString("%PDF")) {
            try {
              await tokenizer.ignore(1350);
              const maxBufferSize2 = 10 * 1024 * 1024;
              const buffer = new Uint8Array(Math.min(maxBufferSize2, tokenizer.fileInfo.size));
              await tokenizer.readBuffer(buffer, { mayBeLess: true });
              if (includes(buffer, new TextEncoder().encode("AIPrivateData"))) {
                return {
                  ext: "ai",
                  mime: "application/postscript"
                };
              }
            } catch (error) {
              if (!(error instanceof EndOfStreamError2)) {
                throw error;
              }
            }
            return {
              ext: "pdf",
              mime: "application/pdf"
            };
          }
          if (this.check([0, 97, 115, 109])) {
            return {
              ext: "wasm",
              mime: "application/wasm"
            };
          }
          if (this.check([73, 73])) {
            const fileType = await this.readTiffHeader(false);
            if (fileType) {
              return fileType;
            }
          }
          if (this.check([77, 77])) {
            const fileType = await this.readTiffHeader(true);
            if (fileType) {
              return fileType;
            }
          }
          if (this.checkString("MAC ")) {
            return {
              ext: "ape",
              mime: "audio/ape"
            };
          }
          if (this.check([26, 69, 223, 163])) {
            async function readField() {
              const msb = await tokenizer.peekNumber(UINT8);
              let mask = 128;
              let ic = 0;
              while ((msb & mask) === 0 && mask !== 0) {
                ++ic;
                mask >>= 1;
              }
              const id = new Uint8Array(ic + 1);
              await tokenizer.readBuffer(id);
              return id;
            }
            async function readElement() {
              const idField = await readField();
              const lengthField = await readField();
              lengthField[0] ^= 128 >> lengthField.length - 1;
              const nrLength = Math.min(6, lengthField.length);
              const idView = new DataView(idField.buffer);
              const lengthView = new DataView(lengthField.buffer, lengthField.length - nrLength, nrLength);
              return {
                id: getUintBE(idView),
                len: getUintBE(lengthView)
              };
            }
            async function readChildren(children) {
              while (children > 0) {
                const element = await readElement();
                if (element.id === 17026) {
                  const rawValue = await tokenizer.readToken(new StringType(element.len));
                  return rawValue.replaceAll(/\00.*$/g, "");
                }
                await tokenizer.ignore(element.len);
                --children;
              }
            }
            const re = await readElement();
            const docType = await readChildren(re.len);
            switch (docType) {
              case "webm":
                return {
                  ext: "webm",
                  mime: "video/webm"
                };
              case "matroska":
                return {
                  ext: "mkv",
                  mime: "video/x-matroska"
                };
              default:
                return;
            }
          }
          if (this.check([82, 73, 70, 70])) {
            if (this.check([65, 86, 73], { offset: 8 })) {
              return {
                ext: "avi",
                mime: "video/vnd.avi"
              };
            }
            if (this.check([87, 65, 86, 69], { offset: 8 })) {
              return {
                ext: "wav",
                mime: "audio/wav"
              };
            }
            if (this.check([81, 76, 67, 77], { offset: 8 })) {
              return {
                ext: "qcp",
                mime: "audio/qcelp"
              };
            }
          }
          if (this.checkString("SQLi")) {
            return {
              ext: "sqlite",
              mime: "application/x-sqlite3"
            };
          }
          if (this.check([78, 69, 83, 26])) {
            return {
              ext: "nes",
              mime: "application/x-nintendo-nes-rom"
            };
          }
          if (this.checkString("Cr24")) {
            return {
              ext: "crx",
              mime: "application/x-google-chrome-extension"
            };
          }
          if (this.checkString("MSCF") || this.checkString("ISc(")) {
            return {
              ext: "cab",
              mime: "application/vnd.ms-cab-compressed"
            };
          }
          if (this.check([237, 171, 238, 219])) {
            return {
              ext: "rpm",
              mime: "application/x-rpm"
            };
          }
          if (this.check([197, 208, 211, 198])) {
            return {
              ext: "eps",
              mime: "application/eps"
            };
          }
          if (this.check([40, 181, 47, 253])) {
            return {
              ext: "zst",
              mime: "application/zstd"
            };
          }
          if (this.check([127, 69, 76, 70])) {
            return {
              ext: "elf",
              mime: "application/x-elf"
            };
          }
          if (this.check([33, 66, 68, 78])) {
            return {
              ext: "pst",
              mime: "application/vnd.ms-outlook"
            };
          }
          if (this.checkString("PAR1")) {
            return {
              ext: "parquet",
              mime: "application/x-parquet"
            };
          }
          if (this.check([207, 250, 237, 254])) {
            return {
              ext: "macho",
              mime: "application/x-mach-binary"
            };
          }
          if (this.check([79, 84, 84, 79, 0])) {
            return {
              ext: "otf",
              mime: "font/otf"
            };
          }
          if (this.checkString("#!AMR")) {
            return {
              ext: "amr",
              mime: "audio/amr"
            };
          }
          if (this.checkString("{\\rtf")) {
            return {
              ext: "rtf",
              mime: "application/rtf"
            };
          }
          if (this.check([70, 76, 86, 1])) {
            return {
              ext: "flv",
              mime: "video/x-flv"
            };
          }
          if (this.checkString("IMPM")) {
            return {
              ext: "it",
              mime: "audio/x-it"
            };
          }
          if (this.checkString("-lh0-", { offset: 2 }) || this.checkString("-lh1-", { offset: 2 }) || this.checkString("-lh2-", { offset: 2 }) || this.checkString("-lh3-", { offset: 2 }) || this.checkString("-lh4-", { offset: 2 }) || this.checkString("-lh5-", { offset: 2 }) || this.checkString("-lh6-", { offset: 2 }) || this.checkString("-lh7-", { offset: 2 }) || this.checkString("-lzs-", { offset: 2 }) || this.checkString("-lz4-", { offset: 2 }) || this.checkString("-lz5-", { offset: 2 }) || this.checkString("-lhd-", { offset: 2 })) {
            return {
              ext: "lzh",
              mime: "application/x-lzh-compressed"
            };
          }
          if (this.check([0, 0, 1, 186])) {
            if (this.check([33], { offset: 4, mask: [241] })) {
              return {
                ext: "mpg",
                // May also be .ps, .mpeg
                mime: "video/MP1S"
              };
            }
            if (this.check([68], { offset: 4, mask: [196] })) {
              return {
                ext: "mpg",
                // May also be .mpg, .m2p, .vob or .sub
                mime: "video/MP2P"
              };
            }
          }
          if (this.checkString("ITSF")) {
            return {
              ext: "chm",
              mime: "application/vnd.ms-htmlhelp"
            };
          }
          if (this.check([202, 254, 186, 190])) {
            return {
              ext: "class",
              mime: "application/java-vm"
            };
          }
          if (this.check([253, 55, 122, 88, 90, 0])) {
            return {
              ext: "xz",
              mime: "application/x-xz"
            };
          }
          if (this.checkString("<?xml ")) {
            return {
              ext: "xml",
              mime: "application/xml"
            };
          }
          if (this.check([55, 122, 188, 175, 39, 28])) {
            return {
              ext: "7z",
              mime: "application/x-7z-compressed"
            };
          }
          if (this.check([82, 97, 114, 33, 26, 7]) && (this.buffer[6] === 0 || this.buffer[6] === 1)) {
            return {
              ext: "rar",
              mime: "application/x-rar-compressed"
            };
          }
          if (this.checkString("solid ")) {
            return {
              ext: "stl",
              mime: "model/stl"
            };
          }
          if (this.checkString("AC")) {
            const version2 = new StringType(4, "latin1").get(this.buffer, 2);
            if (version2.match("^d*") && version2 >= 1e3 && version2 <= 1050) {
              return {
                ext: "dwg",
                mime: "image/vnd.dwg"
              };
            }
          }
          if (this.checkString("070707")) {
            return {
              ext: "cpio",
              mime: "application/x-cpio"
            };
          }
          if (this.checkString("BLENDER")) {
            return {
              ext: "blend",
              mime: "application/x-blender"
            };
          }
          if (this.checkString("!<arch>")) {
            await tokenizer.ignore(8);
            const string = await tokenizer.readToken(new StringType(13, "ascii"));
            if (string === "debian-binary") {
              return {
                ext: "deb",
                mime: "application/x-deb"
              };
            }
            return {
              ext: "ar",
              mime: "application/x-unix-archive"
            };
          }
          if (this.checkString("WEBVTT") && // One of LF, CR, tab, space, or end of file must follow "WEBVTT" per the spec (see `fixture/fixture-vtt-*.vtt` for examples). Note that `\0` is technically the null character (there is no such thing as an EOF character). However, checking for `\0` gives us the same result as checking for the end of the stream.
          ["\n", "\r", "	", " ", "\0"].some((char7) => this.checkString(char7, { offset: 6 }))) {
            return {
              ext: "vtt",
              mime: "text/vtt"
            };
          }
          if (this.check([137, 80, 78, 71, 13, 10, 26, 10])) {
            await tokenizer.ignore(8);
            async function readChunkHeader() {
              return {
                length: await tokenizer.readToken(INT32_BE),
                type: await tokenizer.readToken(new StringType(4, "latin1"))
              };
            }
            do {
              const chunk = await readChunkHeader();
              if (chunk.length < 0) {
                return;
              }
              switch (chunk.type) {
                case "IDAT":
                  return {
                    ext: "png",
                    mime: "image/png"
                  };
                case "acTL":
                  return {
                    ext: "apng",
                    mime: "image/apng"
                  };
                default:
                  await tokenizer.ignore(chunk.length + 4);
              }
            } while (tokenizer.position + 8 < tokenizer.fileInfo.size);
            return {
              ext: "png",
              mime: "image/png"
            };
          }
          if (this.check([65, 82, 82, 79, 87, 49, 0, 0])) {
            return {
              ext: "arrow",
              mime: "application/x-apache-arrow"
            };
          }
          if (this.check([103, 108, 84, 70, 2, 0, 0, 0])) {
            return {
              ext: "glb",
              mime: "model/gltf-binary"
            };
          }
          if (this.check([102, 114, 101, 101], { offset: 4 }) || this.check([109, 100, 97, 116], { offset: 4 }) || this.check([109, 111, 111, 118], { offset: 4 }) || this.check([119, 105, 100, 101], { offset: 4 })) {
            return {
              ext: "mov",
              mime: "video/quicktime"
            };
          }
          if (this.check([73, 73, 82, 79, 8, 0, 0, 0, 24])) {
            return {
              ext: "orf",
              mime: "image/x-olympus-orf"
            };
          }
          if (this.checkString("gimp xcf ")) {
            return {
              ext: "xcf",
              mime: "image/x-xcf"
            };
          }
          if (this.check([73, 73, 85, 0, 24, 0, 0, 0, 136, 231, 116, 216])) {
            return {
              ext: "rw2",
              mime: "image/x-panasonic-rw2"
            };
          }
          if (this.check([48, 38, 178, 117, 142, 102, 207, 17, 166, 217])) {
            async function readHeader() {
              const guid = new Uint8Array(16);
              await tokenizer.readBuffer(guid);
              return {
                id: guid,
                size: Number(await tokenizer.readToken(UINT64_LE))
              };
            }
            await tokenizer.ignore(30);
            while (tokenizer.position + 24 < tokenizer.fileInfo.size) {
              const header = await readHeader();
              let payload = header.size - 24;
              if (_check(header.id, [145, 7, 220, 183, 183, 169, 207, 17, 142, 230, 0, 192, 12, 32, 83, 101])) {
                const typeId = new Uint8Array(16);
                payload -= await tokenizer.readBuffer(typeId);
                if (_check(typeId, [64, 158, 105, 248, 77, 91, 207, 17, 168, 253, 0, 128, 95, 92, 68, 43])) {
                  return {
                    ext: "asf",
                    mime: "audio/x-ms-asf"
                  };
                }
                if (_check(typeId, [192, 239, 25, 188, 77, 91, 207, 17, 168, 253, 0, 128, 95, 92, 68, 43])) {
                  return {
                    ext: "asf",
                    mime: "video/x-ms-asf"
                  };
                }
                break;
              }
              await tokenizer.ignore(payload);
            }
            return {
              ext: "asf",
              mime: "application/vnd.ms-asf"
            };
          }
          if (this.check([171, 75, 84, 88, 32, 49, 49, 187, 13, 10, 26, 10])) {
            return {
              ext: "ktx",
              mime: "image/ktx"
            };
          }
          if ((this.check([126, 16, 4]) || this.check([126, 24, 4])) && this.check([48, 77, 73, 69], { offset: 4 })) {
            return {
              ext: "mie",
              mime: "application/x-mie"
            };
          }
          if (this.check([39, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], { offset: 2 })) {
            return {
              ext: "shp",
              mime: "application/x-esri-shape"
            };
          }
          if (this.check([255, 79, 255, 81])) {
            return {
              ext: "j2c",
              mime: "image/j2c"
            };
          }
          if (this.check([0, 0, 0, 12, 106, 80, 32, 32, 13, 10, 135, 10])) {
            await tokenizer.ignore(20);
            const type = await tokenizer.readToken(new StringType(4, "ascii"));
            switch (type) {
              case "jp2 ":
                return {
                  ext: "jp2",
                  mime: "image/jp2"
                };
              case "jpx ":
                return {
                  ext: "jpx",
                  mime: "image/jpx"
                };
              case "jpm ":
                return {
                  ext: "jpm",
                  mime: "image/jpm"
                };
              case "mjp2":
                return {
                  ext: "mj2",
                  mime: "image/mj2"
                };
              default:
                return;
            }
          }
          if (this.check([255, 10]) || this.check([0, 0, 0, 12, 74, 88, 76, 32, 13, 10, 135, 10])) {
            return {
              ext: "jxl",
              mime: "image/jxl"
            };
          }
          if (this.check([254, 255])) {
            if (this.check([0, 60, 0, 63, 0, 120, 0, 109, 0, 108], { offset: 2 })) {
              return {
                ext: "xml",
                mime: "application/xml"
              };
            }
            return void 0;
          }
          if (this.check([0, 0, 1, 186]) || this.check([0, 0, 1, 179])) {
            return {
              ext: "mpg",
              mime: "video/mpeg"
            };
          }
          if (this.check([0, 1, 0, 0, 0])) {
            return {
              ext: "ttf",
              mime: "font/ttf"
            };
          }
          if (this.check([0, 0, 1, 0])) {
            return {
              ext: "ico",
              mime: "image/x-icon"
            };
          }
          if (this.check([0, 0, 2, 0])) {
            return {
              ext: "cur",
              mime: "image/x-icon"
            };
          }
          if (this.check([208, 207, 17, 224, 161, 177, 26, 225])) {
            return {
              ext: "cfb",
              mime: "application/x-cfb"
            };
          }
          await tokenizer.peekBuffer(this.buffer, { length: Math.min(256, tokenizer.fileInfo.size), mayBeLess: true });
          if (this.check([97, 99, 115, 112], { offset: 36 })) {
            return {
              ext: "icc",
              mime: "application/vnd.iccprofile"
            };
          }
          if (this.checkString("**ACE", { offset: 7 }) && this.checkString("**", { offset: 12 })) {
            return {
              ext: "ace",
              mime: "application/x-ace-compressed"
            };
          }
          if (this.checkString("BEGIN:")) {
            if (this.checkString("VCARD", { offset: 6 })) {
              return {
                ext: "vcf",
                mime: "text/vcard"
              };
            }
            if (this.checkString("VCALENDAR", { offset: 6 })) {
              return {
                ext: "ics",
                mime: "text/calendar"
              };
            }
          }
          if (this.checkString("FUJIFILMCCD-RAW")) {
            return {
              ext: "raf",
              mime: "image/x-fujifilm-raf"
            };
          }
          if (this.checkString("Extended Module:")) {
            return {
              ext: "xm",
              mime: "audio/x-xm"
            };
          }
          if (this.checkString("Creative Voice File")) {
            return {
              ext: "voc",
              mime: "audio/x-voc"
            };
          }
          if (this.check([4, 0, 0, 0]) && this.buffer.length >= 16) {
            const jsonSize = new DataView(this.buffer.buffer).getUint32(12, true);
            if (jsonSize > 12 && this.buffer.length >= jsonSize + 16) {
              try {
                const header = new TextDecoder().decode(this.buffer.slice(16, jsonSize + 16));
                const json = JSON.parse(header);
                if (json.files) {
                  return {
                    ext: "asar",
                    mime: "application/x-asar"
                  };
                }
              } catch {
              }
            }
          }
          if (this.check([6, 14, 43, 52, 2, 5, 1, 1, 13, 1, 2, 1, 1, 2])) {
            return {
              ext: "mxf",
              mime: "application/mxf"
            };
          }
          if (this.checkString("SCRM", { offset: 44 })) {
            return {
              ext: "s3m",
              mime: "audio/x-s3m"
            };
          }
          if (this.check([71]) && this.check([71], { offset: 188 })) {
            return {
              ext: "mts",
              mime: "video/mp2t"
            };
          }
          if (this.check([71], { offset: 4 }) && this.check([71], { offset: 196 })) {
            return {
              ext: "mts",
              mime: "video/mp2t"
            };
          }
          if (this.check([66, 79, 79, 75, 77, 79, 66, 73], { offset: 60 })) {
            return {
              ext: "mobi",
              mime: "application/x-mobipocket-ebook"
            };
          }
          if (this.check([68, 73, 67, 77], { offset: 128 })) {
            return {
              ext: "dcm",
              mime: "application/dicom"
            };
          }
          if (this.check([76, 0, 0, 0, 1, 20, 2, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 70])) {
            return {
              ext: "lnk",
              mime: "application/x.ms.shortcut"
              // Invented by us
            };
          }
          if (this.check([98, 111, 111, 107, 0, 0, 0, 0, 109, 97, 114, 107, 0, 0, 0, 0])) {
            return {
              ext: "alias",
              mime: "application/x.apple.alias"
              // Invented by us
            };
          }
          if (this.checkString("Kaydara FBX Binary  \0")) {
            return {
              ext: "fbx",
              mime: "application/x.autodesk.fbx"
              // Invented by us
            };
          }
          if (this.check([76, 80], { offset: 34 }) && (this.check([0, 0, 1], { offset: 8 }) || this.check([1, 0, 2], { offset: 8 }) || this.check([2, 0, 2], { offset: 8 }))) {
            return {
              ext: "eot",
              mime: "application/vnd.ms-fontobject"
            };
          }
          if (this.check([6, 6, 237, 245, 216, 29, 70, 229, 189, 49, 239, 231, 254, 116, 183, 29])) {
            return {
              ext: "indd",
              mime: "application/x-indesign"
            };
          }
          await tokenizer.peekBuffer(this.buffer, { length: Math.min(512, tokenizer.fileInfo.size), mayBeLess: true });
          if (tarHeaderChecksumMatches(this.buffer)) {
            return {
              ext: "tar",
              mime: "application/x-tar"
            };
          }
          if (this.check([255, 254])) {
            if (this.check([60, 0, 63, 0, 120, 0, 109, 0, 108, 0], { offset: 2 })) {
              return {
                ext: "xml",
                mime: "application/xml"
              };
            }
            if (this.check([255, 14, 83, 0, 107, 0, 101, 0, 116, 0, 99, 0, 104, 0, 85, 0, 112, 0, 32, 0, 77, 0, 111, 0, 100, 0, 101, 0, 108, 0], { offset: 2 })) {
              return {
                ext: "skp",
                mime: "application/vnd.sketchup.skp"
              };
            }
            return void 0;
          }
          if (this.checkString("-----BEGIN PGP MESSAGE-----")) {
            return {
              ext: "pgp",
              mime: "application/pgp-encrypted"
            };
          }
          if (this.buffer.length >= 2 && this.check([255, 224], { offset: 0, mask: [255, 224] })) {
            if (this.check([16], { offset: 1, mask: [22] })) {
              if (this.check([8], { offset: 1, mask: [8] })) {
                return {
                  ext: "aac",
                  mime: "audio/aac"
                };
              }
              return {
                ext: "aac",
                mime: "audio/aac"
              };
            }
            if (this.check([2], { offset: 1, mask: [6] })) {
              return {
                ext: "mp3",
                mime: "audio/mpeg"
              };
            }
            if (this.check([4], { offset: 1, mask: [6] })) {
              return {
                ext: "mp2",
                mime: "audio/mpeg"
              };
            }
            if (this.check([6], { offset: 1, mask: [6] })) {
              return {
                ext: "mp1",
                mime: "audio/mpeg"
              };
            }
          }
        }
        async readTiffTag(bigEndian) {
          const tagId = await this.tokenizer.readToken(bigEndian ? UINT16_BE : UINT16_LE);
          this.tokenizer.ignore(10);
          switch (tagId) {
            case 50341:
              return {
                ext: "arw",
                mime: "image/x-sony-arw"
              };
            case 50706:
              return {
                ext: "dng",
                mime: "image/x-adobe-dng"
              };
          }
        }
        async readTiffIFD(bigEndian) {
          const numberOfTags = await this.tokenizer.readToken(bigEndian ? UINT16_BE : UINT16_LE);
          for (let n2 = 0; n2 < numberOfTags; ++n2) {
            const fileType = await this.readTiffTag(bigEndian);
            if (fileType) {
              return fileType;
            }
          }
        }
        async readTiffHeader(bigEndian) {
          const version2 = (bigEndian ? UINT16_BE : UINT16_LE).get(this.buffer, 2);
          const ifdOffset = (bigEndian ? UINT32_BE : UINT32_LE).get(this.buffer, 4);
          if (version2 === 42) {
            if (ifdOffset >= 6) {
              if (this.checkString("CR", { offset: 8 })) {
                return {
                  ext: "cr2",
                  mime: "image/x-canon-cr2"
                };
              }
              if (ifdOffset >= 8 && (this.check([28, 0, 254, 0], { offset: 8 }) || this.check([31, 0, 11, 0], { offset: 8 }))) {
                return {
                  ext: "nef",
                  mime: "image/x-nikon-nef"
                };
              }
            }
            await this.tokenizer.ignore(ifdOffset);
            const fileType = await this.readTiffIFD(bigEndian);
            return fileType ?? {
              ext: "tif",
              mime: "image/tiff"
            };
          }
          if (version2 === 43) {
            return {
              ext: "tif",
              mime: "image/tiff"
            };
          }
        }
      }
      new Set(extensions);
      new Set(mimeTypes);
      var contentType = {};
      /*!
       * content-type
       * Copyright(c) 2015 Douglas Christopher Wilson
       * MIT Licensed
       */
      var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g;
      var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/;
      var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
      var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g;
      var QUOTE_REGEXP = /([\\"])/g;
      var TYPE_REGEXP$1 = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
      contentType.format = format;
      contentType.parse = parse$1;
      function format(obj) {
        if (!obj || typeof obj !== "object") {
          throw new TypeError("argument obj is required");
        }
        var parameters = obj.parameters;
        var type = obj.type;
        if (!type || !TYPE_REGEXP$1.test(type)) {
          throw new TypeError("invalid type");
        }
        var string = type;
        if (parameters && typeof parameters === "object") {
          var param;
          var params = Object.keys(parameters).sort();
          for (var i = 0; i < params.length; i++) {
            param = params[i];
            if (!TOKEN_REGEXP.test(param)) {
              throw new TypeError("invalid parameter name");
            }
            string += "; " + param + "=" + qstring(parameters[param]);
          }
        }
        return string;
      }
      function parse$1(string) {
        if (!string) {
          throw new TypeError("argument string is required");
        }
        var header = typeof string === "object" ? getcontenttype(string) : string;
        if (typeof header !== "string") {
          throw new TypeError("argument string is required to be a string");
        }
        var index = header.indexOf(";");
        var type = index !== -1 ? header.slice(0, index).trim() : header.trim();
        if (!TYPE_REGEXP$1.test(type)) {
          throw new TypeError("invalid media type");
        }
        var obj = new ContentType(type.toLowerCase());
        if (index !== -1) {
          var key;
          var match;
          var value2;
          PARAM_REGEXP.lastIndex = index;
          while (match = PARAM_REGEXP.exec(header)) {
            if (match.index !== index) {
              throw new TypeError("invalid parameter format");
            }
            index += match[0].length;
            key = match[1].toLowerCase();
            value2 = match[2];
            if (value2.charCodeAt(0) === 34) {
              value2 = value2.slice(1, -1);
              if (value2.indexOf("\\") !== -1) {
                value2 = value2.replace(QESC_REGEXP, "$1");
              }
            }
            obj.parameters[key] = value2;
          }
          if (index !== header.length) {
            throw new TypeError("invalid parameter format");
          }
        }
        return obj;
      }
      function getcontenttype(obj) {
        var header;
        if (typeof obj.getHeader === "function") {
          header = obj.getHeader("content-type");
        } else if (typeof obj.headers === "object") {
          header = obj.headers && obj.headers["content-type"];
        }
        if (typeof header !== "string") {
          throw new TypeError("content-type header is missing from object");
        }
        return header;
      }
      function qstring(val) {
        var str = String(val);
        if (TOKEN_REGEXP.test(str)) {
          return str;
        }
        if (str.length > 0 && !TEXT_REGEXP.test(str)) {
          throw new TypeError("invalid parameter value");
        }
        return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
      }
      function ContentType(type) {
        this.parameters = /* @__PURE__ */ Object.create(null);
        this.type = type;
      }
      /*!
       * media-typer
       * Copyright(c) 2014-2017 Douglas Christopher Wilson
       * MIT Licensed
       */
      var TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;
      var parse_1 = parse;
      function parse(string) {
        if (!string) {
          throw new TypeError("argument string is required");
        }
        if (typeof string !== "string") {
          throw new TypeError("argument string is required to be a string");
        }
        var match = TYPE_REGEXP.exec(string.toLowerCase());
        if (!match) {
          throw new TypeError("invalid media type");
        }
        var type = match[1];
        var subtype = match[2];
        var suffix;
        var index = subtype.lastIndexOf("+");
        if (index !== -1) {
          suffix = subtype.substr(index + 1);
          subtype = subtype.substr(0, index);
        }
        return new MediaType(type, subtype, suffix);
      }
      function MediaType(type, subtype, suffix) {
        this.type = type;
        this.subtype = subtype;
        this.suffix = suffix;
      }
      var browser = { exports: {} };
      var ms;
      var hasRequiredMs;
      function requireMs() {
        if (hasRequiredMs) return ms;
        hasRequiredMs = 1;
        var s = 1e3;
        var m2 = s * 60;
        var h = m2 * 60;
        var d = h * 24;
        var w = d * 7;
        var y = d * 365.25;
        ms = function(val, options) {
          options = options || {};
          var type = typeof val;
          if (type === "string" && val.length > 0) {
            return parse2(val);
          } else if (type === "number" && isFinite(val)) {
            return options.long ? fmtLong(val) : fmtShort(val);
          }
          throw new Error(
            "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
          );
        };
        function parse2(str) {
          str = String(str);
          if (str.length > 100) {
            return;
          }
          var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
            str
          );
          if (!match) {
            return;
          }
          var n2 = parseFloat(match[1]);
          var type = (match[2] || "ms").toLowerCase();
          switch (type) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return n2 * y;
            case "weeks":
            case "week":
            case "w":
              return n2 * w;
            case "days":
            case "day":
            case "d":
              return n2 * d;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return n2 * h;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return n2 * m2;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return n2 * s;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return n2;
            default:
              return void 0;
          }
        }
        function fmtShort(ms2) {
          var msAbs = Math.abs(ms2);
          if (msAbs >= d) {
            return Math.round(ms2 / d) + "d";
          }
          if (msAbs >= h) {
            return Math.round(ms2 / h) + "h";
          }
          if (msAbs >= m2) {
            return Math.round(ms2 / m2) + "m";
          }
          if (msAbs >= s) {
            return Math.round(ms2 / s) + "s";
          }
          return ms2 + "ms";
        }
        function fmtLong(ms2) {
          var msAbs = Math.abs(ms2);
          if (msAbs >= d) {
            return plural(ms2, msAbs, d, "day");
          }
          if (msAbs >= h) {
            return plural(ms2, msAbs, h, "hour");
          }
          if (msAbs >= m2) {
            return plural(ms2, msAbs, m2, "minute");
          }
          if (msAbs >= s) {
            return plural(ms2, msAbs, s, "second");
          }
          return ms2 + " ms";
        }
        function plural(ms2, msAbs, n2, name2) {
          var isPlural = msAbs >= n2 * 1.5;
          return Math.round(ms2 / n2) + " " + name2 + (isPlural ? "s" : "");
        }
        return ms;
      }
      function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = requireMs();
        createDebug.destroy = destroy;
        Object.keys(env).forEach((key) => {
          createDebug[key] = env[key];
        });
        createDebug.names = [];
        createDebug.skips = [];
        createDebug.formatters = {};
        function selectColor(namespace) {
          let hash = 0;
          for (let i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0;
          }
          return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }
        createDebug.selectColor = selectColor;
        function createDebug(namespace) {
          let prevTime;
          let enableOverride = null;
          let namespacesCache;
          let enabledCache;
          function debug2(...args) {
            if (!debug2.enabled) {
              return;
            }
            const self = debug2;
            const curr = Number(/* @__PURE__ */ new Date());
            const ms2 = curr - (prevTime || curr);
            self.diff = ms2;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") {
              args.unshift("%O");
            }
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format2) => {
              if (match === "%%") {
                return "%";
              }
              index++;
              const formatter = createDebug.formatters[format2];
              if (typeof formatter === "function") {
                const val = args[index];
                match = formatter.call(self, val);
                args.splice(index, 1);
                index--;
              }
              return match;
            });
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
          }
          debug2.namespace = namespace;
          debug2.useColors = createDebug.useColors();
          debug2.color = createDebug.selectColor(namespace);
          debug2.extend = extend;
          debug2.destroy = createDebug.destroy;
          Object.defineProperty(debug2, "enabled", {
            enumerable: true,
            configurable: false,
            get: () => {
              if (enableOverride !== null) {
                return enableOverride;
              }
              if (namespacesCache !== createDebug.namespaces) {
                namespacesCache = createDebug.namespaces;
                enabledCache = createDebug.enabled(namespace);
              }
              return enabledCache;
            },
            set: (v) => {
              enableOverride = v;
            }
          });
          if (typeof createDebug.init === "function") {
            createDebug.init(debug2);
          }
          return debug2;
        }
        function extend(namespace, delimiter) {
          const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
          newDebug.log = this.log;
          return newDebug;
        }
        function enable(namespaces) {
          createDebug.save(namespaces);
          createDebug.namespaces = namespaces;
          createDebug.names = [];
          createDebug.skips = [];
          const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
          for (const ns of split) {
            if (ns[0] === "-") {
              createDebug.skips.push(ns.slice(1));
            } else {
              createDebug.names.push(ns);
            }
          }
        }
        function matchesTemplate(search, template) {
          let searchIndex = 0;
          let templateIndex = 0;
          let starIndex = -1;
          let matchIndex = 0;
          while (searchIndex < search.length) {
            if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
              if (template[templateIndex] === "*") {
                starIndex = templateIndex;
                matchIndex = searchIndex;
                templateIndex++;
              } else {
                searchIndex++;
                templateIndex++;
              }
            } else if (starIndex !== -1) {
              templateIndex = starIndex + 1;
              matchIndex++;
              searchIndex = matchIndex;
            } else {
              return false;
            }
          }
          while (templateIndex < template.length && template[templateIndex] === "*") {
            templateIndex++;
          }
          return templateIndex === template.length;
        }
        function disable() {
          const namespaces = [
            ...createDebug.names,
            ...createDebug.skips.map((namespace) => "-" + namespace)
          ].join(",");
          createDebug.enable("");
          return namespaces;
        }
        function enabled(name2) {
          for (const skip of createDebug.skips) {
            if (matchesTemplate(name2, skip)) {
              return false;
            }
          }
          for (const ns of createDebug.names) {
            if (matchesTemplate(name2, ns)) {
              return true;
            }
          }
          return false;
        }
        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message;
          }
          return val;
        }
        function destroy() {
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
        createDebug.enable(createDebug.load());
        return createDebug;
      }
      var common$1 = setup;
      (function(module, exports) {
        var define_process_env_default = {};
        exports.formatArgs = formatArgs;
        exports.save = save;
        exports.load = load;
        exports.useColors = useColors;
        exports.storage = localstorage();
        exports.destroy = /* @__PURE__ */ (() => {
          let warned = false;
          return () => {
            if (!warned) {
              warned = true;
              console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
            }
          };
        })();
        exports.colors = [
          "#0000CC",
          "#0000FF",
          "#0033CC",
          "#0033FF",
          "#0066CC",
          "#0066FF",
          "#0099CC",
          "#0099FF",
          "#00CC00",
          "#00CC33",
          "#00CC66",
          "#00CC99",
          "#00CCCC",
          "#00CCFF",
          "#3300CC",
          "#3300FF",
          "#3333CC",
          "#3333FF",
          "#3366CC",
          "#3366FF",
          "#3399CC",
          "#3399FF",
          "#33CC00",
          "#33CC33",
          "#33CC66",
          "#33CC99",
          "#33CCCC",
          "#33CCFF",
          "#6600CC",
          "#6600FF",
          "#6633CC",
          "#6633FF",
          "#66CC00",
          "#66CC33",
          "#9900CC",
          "#9900FF",
          "#9933CC",
          "#9933FF",
          "#99CC00",
          "#99CC33",
          "#CC0000",
          "#CC0033",
          "#CC0066",
          "#CC0099",
          "#CC00CC",
          "#CC00FF",
          "#CC3300",
          "#CC3333",
          "#CC3366",
          "#CC3399",
          "#CC33CC",
          "#CC33FF",
          "#CC6600",
          "#CC6633",
          "#CC9900",
          "#CC9933",
          "#CCCC00",
          "#CCCC33",
          "#FF0000",
          "#FF0033",
          "#FF0066",
          "#FF0099",
          "#FF00CC",
          "#FF00FF",
          "#FF3300",
          "#FF3333",
          "#FF3366",
          "#FF3399",
          "#FF33CC",
          "#FF33FF",
          "#FF6600",
          "#FF6633",
          "#FF9900",
          "#FF9933",
          "#FFCC00",
          "#FFCC33"
        ];
        function useColors() {
          if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
            return true;
          }
          if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
            return false;
          }
          let m2;
          return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
          typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
          // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
          typeof navigator !== "undefined" && navigator.userAgent && (m2 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m2[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
          typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }
        function formatArgs(args) {
          args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
          if (!this.useColors) {
            return;
          }
          const c = "color: " + this.color;
          args.splice(1, 0, c, "color: inherit");
          let index = 0;
          let lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, (match) => {
            if (match === "%%") {
              return;
            }
            index++;
            if (match === "%c") {
              lastC = index;
            }
          });
          args.splice(lastC, 0, c);
        }
        exports.log = console.debug || console.log || (() => {
        });
        function save(namespaces) {
          try {
            if (namespaces) {
              exports.storage.setItem("debug", namespaces);
            } else {
              exports.storage.removeItem("debug");
            }
          } catch (error) {
          }
        }
        function load() {
          let r;
          try {
            r = exports.storage.getItem("debug");
          } catch (error) {
          }
          if (!r && typeof process !== "undefined" && "env" in process) {
            r = define_process_env_default.DEBUG;
          }
          return r;
        }
        function localstorage() {
          try {
            return localStorage;
          } catch (error) {
          }
        }
        module.exports = common$1(exports);
        const { formatters } = module.exports;
        formatters.j = function(v) {
          try {
            return JSON.stringify(v);
          } catch (error) {
            return "[UnexpectedJSONParseError]: " + error.message;
          }
        };
      })(browser, browser.exports);
      var browserExports = browser.exports;
      const initDebug = exports("i", /* @__PURE__ */ getDefaultExportFromCjs(browserExports));
      var TargetType; exports("t", TargetType);
      (function(TargetType2) {
        TargetType2[TargetType2["shot"] = 10] = "shot";
        TargetType2[TargetType2["scene"] = 20] = "scene";
        TargetType2[TargetType2["track"] = 30] = "track";
        TargetType2[TargetType2["part"] = 40] = "part";
        TargetType2[TargetType2["album"] = 50] = "album";
        TargetType2[TargetType2["edition"] = 60] = "edition";
        TargetType2[TargetType2["collection"] = 70] = "collection";
      })(TargetType || (exports("t", TargetType = {})));
      var TrackType; exports("T", TrackType);
      (function(TrackType2) {
        TrackType2[TrackType2["video"] = 1] = "video";
        TrackType2[TrackType2["audio"] = 2] = "audio";
        TrackType2[TrackType2["complex"] = 3] = "complex";
        TrackType2[TrackType2["logo"] = 4] = "logo";
        TrackType2[TrackType2["subtitle"] = 17] = "subtitle";
        TrackType2[TrackType2["button"] = 18] = "button";
        TrackType2[TrackType2["control"] = 32] = "control";
      })(TrackType || (exports("T", TrackType = {})));
      const makeParseError = (name2) => {
        return class ParseError extends Error {
          constructor(message2) {
            super(message2);
            this.name = name2;
          }
        };
      };
      class CouldNotDetermineFileTypeError extends makeParseError("CouldNotDetermineFileTypeError") {
      }
      class UnsupportedFileTypeError extends makeParseError("UnsupportedFileTypeError") {
      }
      class UnexpectedFileContentError extends makeParseError("UnexpectedFileContentError") {
        constructor(fileType, message2) {
          super(message2);
          this.fileType = fileType;
        }
        // Override toString to include file type information.
        toString() {
          return `${this.name} (FileType: ${this.fileType}): ${this.message}`;
        }
      }
      class FieldDecodingError extends makeParseError("FieldDecodingError") {
      }
      class InternalParserError extends makeParseError("InternalParserError") {
      }
      const makeUnexpectedFileContentError = exports("m", (fileType) => {
        return class extends UnexpectedFileContentError {
          constructor(message2) {
            super(fileType, message2);
          }
        };
      });
      function getBit(buf, off, bit) {
        return (buf[off] & 1 << bit) !== 0;
      }
      function findZero(uint8Array, start, end, encoding) {
        let i = start;
        if (encoding === "utf-16le") {
          while (uint8Array[i] !== 0 || uint8Array[i + 1] !== 0) {
            if (i >= end)
              return end;
            i += 2;
          }
          return i;
        }
        while (uint8Array[i] !== 0) {
          if (i >= end)
            return end;
          i++;
        }
        return i;
      }
      function trimRightNull(x) {
        const pos0 = x.indexOf("\0");
        return pos0 === -1 ? x : x.substr(0, pos0);
      }
      function swapBytes(uint8Array) {
        const l2 = uint8Array.length;
        if ((l2 & 1) !== 0)
          throw new FieldDecodingError("Buffer length must be even");
        for (let i = 0; i < l2; i += 2) {
          const a = uint8Array[i];
          uint8Array[i] = uint8Array[i + 1];
          uint8Array[i + 1] = a;
        }
        return uint8Array;
      }
      function decodeString(uint8Array, encoding) {
        if (uint8Array[0] === 255 && uint8Array[1] === 254) {
          return decodeString(uint8Array.subarray(2), encoding);
        }
        if (encoding === "utf-16le" && uint8Array[0] === 254 && uint8Array[1] === 255) {
          if ((uint8Array.length & 1) !== 0)
            throw new FieldDecodingError("Expected even number of octets for 16-bit unicode string");
          return decodeString(swapBytes(uint8Array), encoding);
        }
        return new StringType(uint8Array.length, encoding).get(uint8Array, 0);
      }
      function stripNulls(str) {
        str = str.replace(/^\x00+/g, "");
        str = str.replace(/\x00+$/g, "");
        return str;
      }
      function getBitAllignedNumber(source, byteOffset, bitOffset, len) {
        const byteOff = byteOffset + ~~(bitOffset / 8);
        const bitOff = bitOffset % 8;
        let value2 = source[byteOff];
        value2 &= 255 >> bitOff;
        const bitsRead = 8 - bitOff;
        const bitsLeft = len - bitsRead;
        if (bitsLeft < 0) {
          value2 >>= 8 - bitOff - len;
        } else if (bitsLeft > 0) {
          value2 <<= bitsLeft;
          value2 |= getBitAllignedNumber(source, byteOffset, bitOffset + bitsRead, bitsLeft);
        }
        return value2;
      }
      function isBitSet$1(source, byteOffset, bitOffset) {
        return getBitAllignedNumber(source, byteOffset, bitOffset, 1) === 1;
      }
      function a2hex(str) {
        const arr = [];
        for (let i = 0, l2 = str.length; i < l2; i++) {
          const hex = Number(str.charCodeAt(i)).toString(16);
          arr.push(hex.length === 1 ? `0${hex}` : hex);
        }
        return arr.join(" ");
      }
      function ratioToDb(ratio) {
        return 10 * Math.log10(ratio);
      }
      function dbToRatio(dB) {
        return 10 ** (dB / 10);
      }
      function toRatio(value2) {
        const ps = value2.split(" ").map((p2) => p2.trim().toLowerCase());
        if (ps.length >= 1) {
          const v = Number.parseFloat(ps[0]);
          return ps.length === 2 && ps[1] === "db" ? {
            dB: v,
            ratio: dbToRatio(v)
          } : {
            dB: ratioToDb(v),
            ratio: v
          };
        }
      }
      var AttachedPictureType; exports("A", AttachedPictureType);
      (function(AttachedPictureType2) {
        AttachedPictureType2[AttachedPictureType2["Other"] = 0] = "Other";
        AttachedPictureType2[AttachedPictureType2["32x32 pixels 'file icon' (PNG only)"] = 1] = "32x32 pixels 'file icon' (PNG only)";
        AttachedPictureType2[AttachedPictureType2["Other file icon"] = 2] = "Other file icon";
        AttachedPictureType2[AttachedPictureType2["Cover (front)"] = 3] = "Cover (front)";
        AttachedPictureType2[AttachedPictureType2["Cover (back)"] = 4] = "Cover (back)";
        AttachedPictureType2[AttachedPictureType2["Leaflet page"] = 5] = "Leaflet page";
        AttachedPictureType2[AttachedPictureType2["Media (e.g. label side of CD)"] = 6] = "Media (e.g. label side of CD)";
        AttachedPictureType2[AttachedPictureType2["Lead artist/lead performer/soloist"] = 7] = "Lead artist/lead performer/soloist";
        AttachedPictureType2[AttachedPictureType2["Artist/performer"] = 8] = "Artist/performer";
        AttachedPictureType2[AttachedPictureType2["Conductor"] = 9] = "Conductor";
        AttachedPictureType2[AttachedPictureType2["Band/Orchestra"] = 10] = "Band/Orchestra";
        AttachedPictureType2[AttachedPictureType2["Composer"] = 11] = "Composer";
        AttachedPictureType2[AttachedPictureType2["Lyricist/text writer"] = 12] = "Lyricist/text writer";
        AttachedPictureType2[AttachedPictureType2["Recording Location"] = 13] = "Recording Location";
        AttachedPictureType2[AttachedPictureType2["During recording"] = 14] = "During recording";
        AttachedPictureType2[AttachedPictureType2["During performance"] = 15] = "During performance";
        AttachedPictureType2[AttachedPictureType2["Movie/video screen capture"] = 16] = "Movie/video screen capture";
        AttachedPictureType2[AttachedPictureType2["A bright coloured fish"] = 17] = "A bright coloured fish";
        AttachedPictureType2[AttachedPictureType2["Illustration"] = 18] = "Illustration";
        AttachedPictureType2[AttachedPictureType2["Band/artist logotype"] = 19] = "Band/artist logotype";
        AttachedPictureType2[AttachedPictureType2["Publisher/Studio logotype"] = 20] = "Publisher/Studio logotype";
      })(AttachedPictureType || (exports("A", AttachedPictureType = {})));
      var LyricsContentType;
      (function(LyricsContentType2) {
        LyricsContentType2[LyricsContentType2["other"] = 0] = "other";
        LyricsContentType2[LyricsContentType2["lyrics"] = 1] = "lyrics";
        LyricsContentType2[LyricsContentType2["text"] = 2] = "text";
        LyricsContentType2[LyricsContentType2["movement_part"] = 3] = "movement_part";
        LyricsContentType2[LyricsContentType2["events"] = 4] = "events";
        LyricsContentType2[LyricsContentType2["chord"] = 5] = "chord";
        LyricsContentType2[LyricsContentType2["trivia_pop"] = 6] = "trivia_pop";
      })(LyricsContentType || (LyricsContentType = {}));
      var TimestampFormat;
      (function(TimestampFormat2) {
        TimestampFormat2[TimestampFormat2["notSynchronized0"] = 0] = "notSynchronized0";
        TimestampFormat2[TimestampFormat2["mpegFrameNumber"] = 1] = "mpegFrameNumber";
        TimestampFormat2[TimestampFormat2["milliseconds"] = 2] = "milliseconds";
      })(TimestampFormat || (TimestampFormat = {}));
      const UINT32SYNCSAFE = exports("P", {
        get: (buf, off) => {
          return buf[off + 3] & 127 | buf[off + 2] << 7 | buf[off + 1] << 14 | buf[off] << 21;
        },
        len: 4
      });
      const ID3v2Header = exports("K", {
        len: 10,
        get: (buf, off) => {
          return {
            // ID3v2/file identifier   "ID3"
            fileIdentifier: new StringType(3, "ascii").get(buf, off),
            // ID3v2 versionIndex
            version: {
              major: INT8.get(buf, off + 3),
              revision: INT8.get(buf, off + 4)
            },
            // ID3v2 flags
            flags: {
              // Unsynchronisation
              unsynchronisation: getBit(buf, off + 5, 7),
              // Extended header
              isExtendedHeader: getBit(buf, off + 5, 6),
              // Experimental indicator
              expIndicator: getBit(buf, off + 5, 5),
              footer: getBit(buf, off + 5, 4)
            },
            size: UINT32SYNCSAFE.get(buf, off + 6)
          };
        }
      });
      const ExtendedHeader = exports("O", {
        len: 10,
        get: (buf, off) => {
          return {
            // Extended header size
            size: UINT32_BE.get(buf, off),
            // Extended Flags
            extendedFlags: UINT16_BE.get(buf, off + 4),
            // Size of padding
            sizeOfPadding: UINT32_BE.get(buf, off + 6),
            // CRC data present
            crcDataPresent: getBit(buf, off + 4, 31)
          };
        }
      });
      const TextEncodingToken = exports("Q", {
        len: 1,
        get: (uint8Array, off) => {
          switch (uint8Array[off]) {
            case 0:
              return { encoding: "latin1" };
            case 1:
              return { encoding: "utf-16le", bom: true };
            case 2:
              return { encoding: "utf-16le", bom: false };
            case 3:
              return { encoding: "utf8", bom: false };
            default:
              return { encoding: "utf8", bom: false };
          }
        }
      });
      const TextHeader = exports("V", {
        len: 4,
        get: (uint8Array, off) => {
          return {
            encoding: TextEncodingToken.get(uint8Array, off),
            language: new StringType(3, "latin1").get(uint8Array, off + 1)
          };
        }
      });
      const SyncTextHeader = exports("W", {
        len: 6,
        get: (uint8Array, off) => {
          const text2 = TextHeader.get(uint8Array, off);
          return {
            encoding: text2.encoding,
            language: text2.language,
            timeStampFormat: UINT8.get(uint8Array, off + 4),
            contentType: UINT8.get(uint8Array, off + 5)
          };
        }
      });
      const commonTags = {
        year: { multiple: false },
        track: { multiple: false },
        disk: { multiple: false },
        title: { multiple: false },
        artist: { multiple: false },
        artists: { multiple: true, unique: true },
        albumartist: { multiple: false },
        album: { multiple: false },
        date: { multiple: false },
        originaldate: { multiple: false },
        originalyear: { multiple: false },
        releasedate: { multiple: false },
        comment: { multiple: true, unique: false },
        genre: { multiple: true, unique: true },
        picture: { multiple: true, unique: true },
        composer: { multiple: true, unique: true },
        lyrics: { multiple: true, unique: false },
        albumsort: { multiple: false, unique: true },
        titlesort: { multiple: false, unique: true },
        work: { multiple: false, unique: true },
        artistsort: { multiple: false, unique: true },
        albumartistsort: { multiple: false, unique: true },
        composersort: { multiple: false, unique: true },
        lyricist: { multiple: true, unique: true },
        writer: { multiple: true, unique: true },
        conductor: { multiple: true, unique: true },
        remixer: { multiple: true, unique: true },
        arranger: { multiple: true, unique: true },
        engineer: { multiple: true, unique: true },
        producer: { multiple: true, unique: true },
        technician: { multiple: true, unique: true },
        djmixer: { multiple: true, unique: true },
        mixer: { multiple: true, unique: true },
        label: { multiple: true, unique: true },
        grouping: { multiple: false },
        subtitle: { multiple: true },
        discsubtitle: { multiple: false },
        totaltracks: { multiple: false },
        totaldiscs: { multiple: false },
        compilation: { multiple: false },
        rating: { multiple: true },
        bpm: { multiple: false },
        mood: { multiple: false },
        media: { multiple: false },
        catalognumber: { multiple: true, unique: true },
        tvShow: { multiple: false },
        tvShowSort: { multiple: false },
        tvSeason: { multiple: false },
        tvEpisode: { multiple: false },
        tvEpisodeId: { multiple: false },
        tvNetwork: { multiple: false },
        podcast: { multiple: false },
        podcasturl: { multiple: false },
        releasestatus: { multiple: false },
        releasetype: { multiple: true },
        releasecountry: { multiple: false },
        script: { multiple: false },
        language: { multiple: false },
        copyright: { multiple: false },
        license: { multiple: false },
        encodedby: { multiple: false },
        encodersettings: { multiple: false },
        gapless: { multiple: false },
        barcode: { multiple: false },
        isrc: { multiple: true },
        asin: { multiple: false },
        musicbrainz_recordingid: { multiple: false },
        musicbrainz_trackid: { multiple: false },
        musicbrainz_albumid: { multiple: false },
        musicbrainz_artistid: { multiple: true },
        musicbrainz_albumartistid: { multiple: true },
        musicbrainz_releasegroupid: { multiple: false },
        musicbrainz_workid: { multiple: false },
        musicbrainz_trmid: { multiple: false },
        musicbrainz_discid: { multiple: false },
        acoustid_id: { multiple: false },
        acoustid_fingerprint: { multiple: false },
        musicip_puid: { multiple: false },
        musicip_fingerprint: { multiple: false },
        website: { multiple: false },
        "performer:instrument": { multiple: true, unique: true },
        averageLevel: { multiple: false },
        peakLevel: { multiple: false },
        notes: { multiple: true, unique: false },
        key: { multiple: false },
        originalalbum: { multiple: false },
        originalartist: { multiple: false },
        discogs_artist_id: { multiple: true, unique: true },
        discogs_release_id: { multiple: false },
        discogs_label_id: { multiple: false },
        discogs_master_release_id: { multiple: false },
        discogs_votes: { multiple: false },
        discogs_rating: { multiple: false },
        replaygain_track_peak: { multiple: false },
        replaygain_track_gain: { multiple: false },
        replaygain_album_peak: { multiple: false },
        replaygain_album_gain: { multiple: false },
        replaygain_track_minmax: { multiple: false },
        replaygain_album_minmax: { multiple: false },
        replaygain_undo: { multiple: false },
        description: { multiple: true },
        longDescription: { multiple: false },
        category: { multiple: true },
        hdVideo: { multiple: false },
        keywords: { multiple: true },
        movement: { multiple: false },
        movementIndex: { multiple: false },
        movementTotal: { multiple: false },
        podcastId: { multiple: false },
        showMovement: { multiple: false },
        stik: { multiple: false }
      };
      function isSingleton(alias) {
        return commonTags[alias] && !commonTags[alias].multiple;
      }
      function isUnique(alias) {
        return !commonTags[alias].multiple || commonTags[alias].unique || false;
      }
      class CommonTagMapper {
        static toIntOrNull(str) {
          const cleaned = Number.parseInt(str, 10);
          return Number.isNaN(cleaned) ? null : cleaned;
        }
        // TODO: a string of 1of1 would fail to be converted
        // converts 1/10 to no : 1, of : 10
        // or 1 to no : 1, of : 0
        static normalizeTrack(origVal) {
          const split = origVal.toString().split("/");
          return {
            no: Number.parseInt(split[0], 10) || null,
            of: Number.parseInt(split[1], 10) || null
          };
        }
        constructor(tagTypes, tagMap2) {
          this.tagTypes = tagTypes;
          this.tagMap = tagMap2;
        }
        /**
         * Process and set common tags
         * write common tags to
         * @param tag Native tag
         * @param warnings Register warnings
         * @return common name
         */
        mapGenericTag(tag2, warnings) {
          tag2 = { id: tag2.id, value: tag2.value };
          this.postMap(tag2, warnings);
          const id = this.getCommonName(tag2.id);
          return id ? { id, value: tag2.value } : null;
        }
        /**
         * Convert native tag key to common tag key
         * @param tag Native header tag
         * @return common tag name (alias)
         */
        getCommonName(tag2) {
          return this.tagMap[tag2];
        }
        /**
         * Handle post mapping exceptions / correction
         * @param tag Tag e.g. {"©alb", "Buena Vista Social Club")
         * @param warnings Used to register warnings
         */
        postMap(tag2, warnings) {
          return;
        }
      }
      CommonTagMapper.maxRatingScore = 1;
      const id3v1TagMap = {
        title: "title",
        artist: "artist",
        album: "album",
        year: "year",
        comment: "comment",
        track: "track",
        genre: "genre"
      };
      class ID3v1TagMapper extends CommonTagMapper {
        constructor() {
          super(["ID3v1"], id3v1TagMap);
        }
      }
      class CaseInsensitiveTagMap extends CommonTagMapper {
        constructor(tagTypes, tagMap2) {
          const upperCaseMap = {};
          for (const tag2 of Object.keys(tagMap2)) {
            upperCaseMap[tag2.toUpperCase()] = tagMap2[tag2];
          }
          super(tagTypes, upperCaseMap);
        }
        /**
         * @tag  Native header tag
         * @return common tag name (alias)
         */
        getCommonName(tag2) {
          return this.tagMap[tag2.toUpperCase()];
        }
      }
      const id3v24TagMap = {
        // id3v2.3
        TIT2: "title",
        TPE1: "artist",
        "TXXX:Artists": "artists",
        TPE2: "albumartist",
        TALB: "album",
        TDRV: "date",
        // [ 'date', 'year' ] ToDo: improve 'year' mapping
        /**
         * Original release year
         */
        TORY: "originalyear",
        TPOS: "disk",
        TCON: "genre",
        APIC: "picture",
        TCOM: "composer",
        USLT: "lyrics",
        TSOA: "albumsort",
        TSOT: "titlesort",
        TOAL: "originalalbum",
        TSOP: "artistsort",
        TSO2: "albumartistsort",
        TSOC: "composersort",
        TEXT: "lyricist",
        "TXXX:Writer": "writer",
        TPE3: "conductor",
        // 'IPLS:instrument': 'performer:instrument', // ToDo
        TPE4: "remixer",
        "IPLS:arranger": "arranger",
        "IPLS:engineer": "engineer",
        "IPLS:producer": "producer",
        "IPLS:DJ-mix": "djmixer",
        "IPLS:mix": "mixer",
        TPUB: "label",
        TIT1: "grouping",
        TIT3: "subtitle",
        TRCK: "track",
        TCMP: "compilation",
        POPM: "rating",
        TBPM: "bpm",
        TMED: "media",
        "TXXX:CATALOGNUMBER": "catalognumber",
        "TXXX:MusicBrainz Album Status": "releasestatus",
        "TXXX:MusicBrainz Album Type": "releasetype",
        /**
         * Release country as documented: https://picard.musicbrainz.org/docs/mappings/#cite_note-0
         */
        "TXXX:MusicBrainz Album Release Country": "releasecountry",
        /**
         * Release country as implemented // ToDo: report
         */
        "TXXX:RELEASECOUNTRY": "releasecountry",
        "TXXX:SCRIPT": "script",
        TLAN: "language",
        TCOP: "copyright",
        WCOP: "license",
        TENC: "encodedby",
        TSSE: "encodersettings",
        "TXXX:BARCODE": "barcode",
        "TXXX:ISRC": "isrc",
        TSRC: "isrc",
        "TXXX:ASIN": "asin",
        "TXXX:originalyear": "originalyear",
        "UFID:http://musicbrainz.org": "musicbrainz_recordingid",
        "TXXX:MusicBrainz Release Track Id": "musicbrainz_trackid",
        "TXXX:MusicBrainz Album Id": "musicbrainz_albumid",
        "TXXX:MusicBrainz Artist Id": "musicbrainz_artistid",
        "TXXX:MusicBrainz Album Artist Id": "musicbrainz_albumartistid",
        "TXXX:MusicBrainz Release Group Id": "musicbrainz_releasegroupid",
        "TXXX:MusicBrainz Work Id": "musicbrainz_workid",
        "TXXX:MusicBrainz TRM Id": "musicbrainz_trmid",
        "TXXX:MusicBrainz Disc Id": "musicbrainz_discid",
        "TXXX:ACOUSTID_ID": "acoustid_id",
        "TXXX:Acoustid Id": "acoustid_id",
        "TXXX:Acoustid Fingerprint": "acoustid_fingerprint",
        "TXXX:MusicIP PUID": "musicip_puid",
        "TXXX:MusicMagic Fingerprint": "musicip_fingerprint",
        WOAR: "website",
        // id3v2.4
        // ToDo: In same sequence as defined at http://id3.org/id3v2.4.0-frames
        TDRC: "date",
        // date YYYY-MM-DD
        TYER: "year",
        TDOR: "originaldate",
        // 'TMCL:instrument': 'performer:instrument',
        "TIPL:arranger": "arranger",
        "TIPL:engineer": "engineer",
        "TIPL:producer": "producer",
        "TIPL:DJ-mix": "djmixer",
        "TIPL:mix": "mixer",
        TMOO: "mood",
        // additional mappings:
        SYLT: "lyrics",
        TSST: "discsubtitle",
        TKEY: "key",
        COMM: "comment",
        TOPE: "originalartist",
        // Windows Media Player
        "PRIV:AverageLevel": "averageLevel",
        "PRIV:PeakLevel": "peakLevel",
        // Discogs
        "TXXX:DISCOGS_ARTIST_ID": "discogs_artist_id",
        "TXXX:DISCOGS_ARTISTS": "artists",
        "TXXX:DISCOGS_ARTIST_NAME": "artists",
        "TXXX:DISCOGS_ALBUM_ARTISTS": "albumartist",
        "TXXX:DISCOGS_CATALOG": "catalognumber",
        "TXXX:DISCOGS_COUNTRY": "releasecountry",
        "TXXX:DISCOGS_DATE": "originaldate",
        "TXXX:DISCOGS_LABEL": "label",
        "TXXX:DISCOGS_LABEL_ID": "discogs_label_id",
        "TXXX:DISCOGS_MASTER_RELEASE_ID": "discogs_master_release_id",
        "TXXX:DISCOGS_RATING": "discogs_rating",
        "TXXX:DISCOGS_RELEASED": "date",
        "TXXX:DISCOGS_RELEASE_ID": "discogs_release_id",
        "TXXX:DISCOGS_VOTES": "discogs_votes",
        "TXXX:CATALOGID": "catalognumber",
        "TXXX:STYLE": "genre",
        "TXXX:REPLAYGAIN_TRACK_PEAK": "replaygain_track_peak",
        "TXXX:REPLAYGAIN_TRACK_GAIN": "replaygain_track_gain",
        "TXXX:REPLAYGAIN_ALBUM_PEAK": "replaygain_album_peak",
        "TXXX:REPLAYGAIN_ALBUM_GAIN": "replaygain_album_gain",
        "TXXX:MP3GAIN_MINMAX": "replaygain_track_minmax",
        "TXXX:MP3GAIN_ALBUM_MINMAX": "replaygain_album_minmax",
        "TXXX:MP3GAIN_UNDO": "replaygain_undo",
        MVNM: "movement",
        MVIN: "movementIndex",
        PCST: "podcast",
        TCAT: "category",
        TDES: "description",
        TDRL: "releasedate",
        TGID: "podcastId",
        TKWD: "keywords",
        WFED: "podcasturl",
        GRP1: "grouping"
      };
      class ID3v24TagMapper extends CaseInsensitiveTagMap {
        static toRating(popm) {
          return {
            source: popm.email,
            rating: popm.rating > 0 ? (popm.rating - 1) / 254 * CommonTagMapper.maxRatingScore : void 0
          };
        }
        constructor() {
          super(["ID3v2.3", "ID3v2.4"], id3v24TagMap);
        }
        /**
         * Handle post mapping exceptions / correction
         * @param tag to post map
         * @param warnings Wil be used to register (collect) warnings
         */
        postMap(tag2, warnings) {
          switch (tag2.id) {
            case "UFID":
              {
                const idTag = tag2.value;
                if (idTag.owner_identifier === "http://musicbrainz.org") {
                  tag2.id += `:${idTag.owner_identifier}`;
                  tag2.value = decodeString(idTag.identifier, "latin1");
                }
              }
              break;
            case "PRIV":
              {
                const customTag = tag2.value;
                switch (customTag.owner_identifier) {
                  case "AverageLevel":
                  case "PeakValue":
                    tag2.id += `:${customTag.owner_identifier}`;
                    tag2.value = customTag.data.length === 4 ? UINT32_LE.get(customTag.data, 0) : null;
                    if (tag2.value === null) {
                      warnings.addWarning("Failed to parse PRIV:PeakValue");
                    }
                    break;
                  default:
                    warnings.addWarning(`Unknown PRIV owner-identifier: ${customTag.data}`);
                }
              }
              break;
            case "POPM":
              tag2.value = ID3v24TagMapper.toRating(tag2.value);
              break;
          }
        }
      }
      const asfTagMap = {
        Title: "title",
        Author: "artist",
        "WM/AlbumArtist": "albumartist",
        "WM/AlbumTitle": "album",
        "WM/Year": "date",
        // changed to 'year' to 'date' based on Picard mappings; ToDo: check me
        "WM/OriginalReleaseTime": "originaldate",
        "WM/OriginalReleaseYear": "originalyear",
        Description: "comment",
        "WM/TrackNumber": "track",
        "WM/PartOfSet": "disk",
        "WM/Genre": "genre",
        "WM/Composer": "composer",
        "WM/Lyrics": "lyrics",
        "WM/AlbumSortOrder": "albumsort",
        "WM/TitleSortOrder": "titlesort",
        "WM/ArtistSortOrder": "artistsort",
        "WM/AlbumArtistSortOrder": "albumartistsort",
        "WM/ComposerSortOrder": "composersort",
        "WM/Writer": "lyricist",
        "WM/Conductor": "conductor",
        "WM/ModifiedBy": "remixer",
        "WM/Engineer": "engineer",
        "WM/Producer": "producer",
        "WM/DJMixer": "djmixer",
        "WM/Mixer": "mixer",
        "WM/Publisher": "label",
        "WM/ContentGroupDescription": "grouping",
        "WM/SubTitle": "subtitle",
        "WM/SetSubTitle": "discsubtitle",
        // 'WM/PartOfSet': 'totaldiscs',
        "WM/IsCompilation": "compilation",
        "WM/SharedUserRating": "rating",
        "WM/BeatsPerMinute": "bpm",
        "WM/Mood": "mood",
        "WM/Media": "media",
        "WM/CatalogNo": "catalognumber",
        "MusicBrainz/Album Status": "releasestatus",
        "MusicBrainz/Album Type": "releasetype",
        "MusicBrainz/Album Release Country": "releasecountry",
        "WM/Script": "script",
        "WM/Language": "language",
        Copyright: "copyright",
        LICENSE: "license",
        "WM/EncodedBy": "encodedby",
        "WM/EncodingSettings": "encodersettings",
        "WM/Barcode": "barcode",
        "WM/ISRC": "isrc",
        "MusicBrainz/Track Id": "musicbrainz_recordingid",
        "MusicBrainz/Release Track Id": "musicbrainz_trackid",
        "MusicBrainz/Album Id": "musicbrainz_albumid",
        "MusicBrainz/Artist Id": "musicbrainz_artistid",
        "MusicBrainz/Album Artist Id": "musicbrainz_albumartistid",
        "MusicBrainz/Release Group Id": "musicbrainz_releasegroupid",
        "MusicBrainz/Work Id": "musicbrainz_workid",
        "MusicBrainz/TRM Id": "musicbrainz_trmid",
        "MusicBrainz/Disc Id": "musicbrainz_discid",
        "Acoustid/Id": "acoustid_id",
        "Acoustid/Fingerprint": "acoustid_fingerprint",
        "MusicIP/PUID": "musicip_puid",
        "WM/ARTISTS": "artists",
        "WM/InitialKey": "key",
        ASIN: "asin",
        "WM/Work": "work",
        "WM/AuthorURL": "website",
        "WM/Picture": "picture"
      };
      class AsfTagMapper extends CommonTagMapper {
        static toRating(rating) {
          return {
            rating: Number.parseFloat(rating + 1) / 5
          };
        }
        constructor() {
          super(["asf"], asfTagMap);
        }
        postMap(tag2) {
          switch (tag2.id) {
            case "WM/SharedUserRating": {
              const keys = tag2.id.split(":");
              tag2.value = AsfTagMapper.toRating(tag2.value);
              tag2.id = keys[0];
              break;
            }
          }
        }
      }
      const id3v22TagMap = {
        TT2: "title",
        TP1: "artist",
        TP2: "albumartist",
        TAL: "album",
        TYE: "year",
        COM: "comment",
        TRK: "track",
        TPA: "disk",
        TCO: "genre",
        PIC: "picture",
        TCM: "composer",
        TOR: "originaldate",
        TOT: "originalalbum",
        TXT: "lyricist",
        TP3: "conductor",
        TPB: "label",
        TT1: "grouping",
        TT3: "subtitle",
        TLA: "language",
        TCR: "copyright",
        WCP: "license",
        TEN: "encodedby",
        TSS: "encodersettings",
        WAR: "website",
        PCS: "podcast",
        TCP: "compilation",
        TDR: "date",
        TS2: "albumartistsort",
        TSA: "albumsort",
        TSC: "composersort",
        TSP: "artistsort",
        TST: "titlesort",
        WFD: "podcasturl",
        TBP: "bpm"
      };
      class ID3v22TagMapper extends CaseInsensitiveTagMap {
        constructor() {
          super(["ID3v2.2"], id3v22TagMap);
        }
      }
      const apev2TagMap = {
        Title: "title",
        Artist: "artist",
        Artists: "artists",
        "Album Artist": "albumartist",
        Album: "album",
        Year: "date",
        Originalyear: "originalyear",
        Originaldate: "originaldate",
        Releasedate: "releasedate",
        Comment: "comment",
        Track: "track",
        Disc: "disk",
        DISCNUMBER: "disk",
        // ToDo: backwards compatibility', valid tag?
        Genre: "genre",
        "Cover Art (Front)": "picture",
        "Cover Art (Back)": "picture",
        Composer: "composer",
        Lyrics: "lyrics",
        ALBUMSORT: "albumsort",
        TITLESORT: "titlesort",
        WORK: "work",
        ARTISTSORT: "artistsort",
        ALBUMARTISTSORT: "albumartistsort",
        COMPOSERSORT: "composersort",
        Lyricist: "lyricist",
        Writer: "writer",
        Conductor: "conductor",
        // 'Performer=artist (instrument)': 'performer:instrument',
        MixArtist: "remixer",
        Arranger: "arranger",
        Engineer: "engineer",
        Producer: "producer",
        DJMixer: "djmixer",
        Mixer: "mixer",
        Label: "label",
        Grouping: "grouping",
        Subtitle: "subtitle",
        DiscSubtitle: "discsubtitle",
        Compilation: "compilation",
        BPM: "bpm",
        Mood: "mood",
        Media: "media",
        CatalogNumber: "catalognumber",
        MUSICBRAINZ_ALBUMSTATUS: "releasestatus",
        MUSICBRAINZ_ALBUMTYPE: "releasetype",
        RELEASECOUNTRY: "releasecountry",
        Script: "script",
        Language: "language",
        Copyright: "copyright",
        LICENSE: "license",
        EncodedBy: "encodedby",
        EncoderSettings: "encodersettings",
        Barcode: "barcode",
        ISRC: "isrc",
        ASIN: "asin",
        musicbrainz_trackid: "musicbrainz_recordingid",
        musicbrainz_releasetrackid: "musicbrainz_trackid",
        MUSICBRAINZ_ALBUMID: "musicbrainz_albumid",
        MUSICBRAINZ_ARTISTID: "musicbrainz_artistid",
        MUSICBRAINZ_ALBUMARTISTID: "musicbrainz_albumartistid",
        MUSICBRAINZ_RELEASEGROUPID: "musicbrainz_releasegroupid",
        MUSICBRAINZ_WORKID: "musicbrainz_workid",
        MUSICBRAINZ_TRMID: "musicbrainz_trmid",
        MUSICBRAINZ_DISCID: "musicbrainz_discid",
        Acoustid_Id: "acoustid_id",
        ACOUSTID_FINGERPRINT: "acoustid_fingerprint",
        MUSICIP_PUID: "musicip_puid",
        Weblink: "website",
        REPLAYGAIN_TRACK_GAIN: "replaygain_track_gain",
        REPLAYGAIN_TRACK_PEAK: "replaygain_track_peak",
        MP3GAIN_MINMAX: "replaygain_track_minmax",
        MP3GAIN_UNDO: "replaygain_undo"
      };
      class APEv2TagMapper extends CaseInsensitiveTagMap {
        constructor() {
          super(["APEv2"], apev2TagMap);
        }
      }
      const mp4TagMap = {
        "©nam": "title",
        "©ART": "artist",
        aART: "albumartist",
        /**
         * ToDo: Album artist seems to be stored here while Picard documentation says: aART
         */
        "----:com.apple.iTunes:Band": "albumartist",
        "©alb": "album",
        "©day": "date",
        "©cmt": "comment",
        "©com": "comment",
        trkn: "track",
        disk: "disk",
        "©gen": "genre",
        covr: "picture",
        "©wrt": "composer",
        "©lyr": "lyrics",
        soal: "albumsort",
        sonm: "titlesort",
        soar: "artistsort",
        soaa: "albumartistsort",
        soco: "composersort",
        "----:com.apple.iTunes:LYRICIST": "lyricist",
        "----:com.apple.iTunes:CONDUCTOR": "conductor",
        "----:com.apple.iTunes:REMIXER": "remixer",
        "----:com.apple.iTunes:ENGINEER": "engineer",
        "----:com.apple.iTunes:PRODUCER": "producer",
        "----:com.apple.iTunes:DJMIXER": "djmixer",
        "----:com.apple.iTunes:MIXER": "mixer",
        "----:com.apple.iTunes:LABEL": "label",
        "©grp": "grouping",
        "----:com.apple.iTunes:SUBTITLE": "subtitle",
        "----:com.apple.iTunes:DISCSUBTITLE": "discsubtitle",
        cpil: "compilation",
        tmpo: "bpm",
        "----:com.apple.iTunes:MOOD": "mood",
        "----:com.apple.iTunes:MEDIA": "media",
        "----:com.apple.iTunes:CATALOGNUMBER": "catalognumber",
        tvsh: "tvShow",
        tvsn: "tvSeason",
        tves: "tvEpisode",
        sosn: "tvShowSort",
        tven: "tvEpisodeId",
        tvnn: "tvNetwork",
        pcst: "podcast",
        purl: "podcasturl",
        "----:com.apple.iTunes:MusicBrainz Album Status": "releasestatus",
        "----:com.apple.iTunes:MusicBrainz Album Type": "releasetype",
        "----:com.apple.iTunes:MusicBrainz Album Release Country": "releasecountry",
        "----:com.apple.iTunes:SCRIPT": "script",
        "----:com.apple.iTunes:LANGUAGE": "language",
        cprt: "copyright",
        "©cpy": "copyright",
        "----:com.apple.iTunes:LICENSE": "license",
        "©too": "encodedby",
        pgap: "gapless",
        "----:com.apple.iTunes:BARCODE": "barcode",
        "----:com.apple.iTunes:ISRC": "isrc",
        "----:com.apple.iTunes:ASIN": "asin",
        "----:com.apple.iTunes:NOTES": "comment",
        "----:com.apple.iTunes:MusicBrainz Track Id": "musicbrainz_recordingid",
        "----:com.apple.iTunes:MusicBrainz Release Track Id": "musicbrainz_trackid",
        "----:com.apple.iTunes:MusicBrainz Album Id": "musicbrainz_albumid",
        "----:com.apple.iTunes:MusicBrainz Artist Id": "musicbrainz_artistid",
        "----:com.apple.iTunes:MusicBrainz Album Artist Id": "musicbrainz_albumartistid",
        "----:com.apple.iTunes:MusicBrainz Release Group Id": "musicbrainz_releasegroupid",
        "----:com.apple.iTunes:MusicBrainz Work Id": "musicbrainz_workid",
        "----:com.apple.iTunes:MusicBrainz TRM Id": "musicbrainz_trmid",
        "----:com.apple.iTunes:MusicBrainz Disc Id": "musicbrainz_discid",
        "----:com.apple.iTunes:Acoustid Id": "acoustid_id",
        "----:com.apple.iTunes:Acoustid Fingerprint": "acoustid_fingerprint",
        "----:com.apple.iTunes:MusicIP PUID": "musicip_puid",
        "----:com.apple.iTunes:fingerprint": "musicip_fingerprint",
        "----:com.apple.iTunes:replaygain_track_gain": "replaygain_track_gain",
        "----:com.apple.iTunes:replaygain_track_peak": "replaygain_track_peak",
        "----:com.apple.iTunes:replaygain_album_gain": "replaygain_album_gain",
        "----:com.apple.iTunes:replaygain_album_peak": "replaygain_album_peak",
        "----:com.apple.iTunes:replaygain_track_minmax": "replaygain_track_minmax",
        "----:com.apple.iTunes:replaygain_album_minmax": "replaygain_album_minmax",
        "----:com.apple.iTunes:replaygain_undo": "replaygain_undo",
        // Additional mappings:
        gnre: "genre",
        // ToDo: check mapping
        "----:com.apple.iTunes:ALBUMARTISTSORT": "albumartistsort",
        "----:com.apple.iTunes:ARTISTS": "artists",
        "----:com.apple.iTunes:ORIGINALDATE": "originaldate",
        "----:com.apple.iTunes:ORIGINALYEAR": "originalyear",
        "----:com.apple.iTunes:RELEASEDATE": "releasedate",
        // '----:com.apple.iTunes:PERFORMER': 'performer'
        desc: "description",
        ldes: "longDescription",
        "©mvn": "movement",
        "©mvi": "movementIndex",
        "©mvc": "movementTotal",
        "©wrk": "work",
        catg: "category",
        egid: "podcastId",
        hdvd: "hdVideo",
        keyw: "keywords",
        shwm: "showMovement",
        stik: "stik",
        rate: "rating"
      };
      const tagType = "iTunes";
      class MP4TagMapper extends CaseInsensitiveTagMap {
        constructor() {
          super([tagType], mp4TagMap);
        }
        postMap(tag2, warnings) {
          switch (tag2.id) {
            case "rate":
              tag2.value = {
                source: void 0,
                rating: Number.parseFloat(tag2.value) / 100
              };
              break;
          }
        }
      }
      const vorbisTagMap = {
        TITLE: "title",
        ARTIST: "artist",
        ARTISTS: "artists",
        ALBUMARTIST: "albumartist",
        "ALBUM ARTIST": "albumartist",
        ALBUM: "album",
        DATE: "date",
        ORIGINALDATE: "originaldate",
        ORIGINALYEAR: "originalyear",
        RELEASEDATE: "releasedate",
        COMMENT: "comment",
        TRACKNUMBER: "track",
        DISCNUMBER: "disk",
        GENRE: "genre",
        METADATA_BLOCK_PICTURE: "picture",
        COMPOSER: "composer",
        LYRICS: "lyrics",
        ALBUMSORT: "albumsort",
        TITLESORT: "titlesort",
        WORK: "work",
        ARTISTSORT: "artistsort",
        ALBUMARTISTSORT: "albumartistsort",
        COMPOSERSORT: "composersort",
        LYRICIST: "lyricist",
        WRITER: "writer",
        CONDUCTOR: "conductor",
        // 'PERFORMER=artist (instrument)': 'performer:instrument', // ToDo
        REMIXER: "remixer",
        ARRANGER: "arranger",
        ENGINEER: "engineer",
        PRODUCER: "producer",
        DJMIXER: "djmixer",
        MIXER: "mixer",
        LABEL: "label",
        GROUPING: "grouping",
        SUBTITLE: "subtitle",
        DISCSUBTITLE: "discsubtitle",
        TRACKTOTAL: "totaltracks",
        DISCTOTAL: "totaldiscs",
        COMPILATION: "compilation",
        RATING: "rating",
        BPM: "bpm",
        KEY: "key",
        MOOD: "mood",
        MEDIA: "media",
        CATALOGNUMBER: "catalognumber",
        RELEASESTATUS: "releasestatus",
        RELEASETYPE: "releasetype",
        RELEASECOUNTRY: "releasecountry",
        SCRIPT: "script",
        LANGUAGE: "language",
        COPYRIGHT: "copyright",
        LICENSE: "license",
        ENCODEDBY: "encodedby",
        ENCODERSETTINGS: "encodersettings",
        BARCODE: "barcode",
        ISRC: "isrc",
        ASIN: "asin",
        MUSICBRAINZ_TRACKID: "musicbrainz_recordingid",
        MUSICBRAINZ_RELEASETRACKID: "musicbrainz_trackid",
        MUSICBRAINZ_ALBUMID: "musicbrainz_albumid",
        MUSICBRAINZ_ARTISTID: "musicbrainz_artistid",
        MUSICBRAINZ_ALBUMARTISTID: "musicbrainz_albumartistid",
        MUSICBRAINZ_RELEASEGROUPID: "musicbrainz_releasegroupid",
        MUSICBRAINZ_WORKID: "musicbrainz_workid",
        MUSICBRAINZ_TRMID: "musicbrainz_trmid",
        MUSICBRAINZ_DISCID: "musicbrainz_discid",
        ACOUSTID_ID: "acoustid_id",
        ACOUSTID_ID_FINGERPRINT: "acoustid_fingerprint",
        MUSICIP_PUID: "musicip_puid",
        // 'FINGERPRINT=MusicMagic Fingerprint {fingerprint}': 'musicip_fingerprint', // ToDo
        WEBSITE: "website",
        NOTES: "notes",
        TOTALTRACKS: "totaltracks",
        TOTALDISCS: "totaldiscs",
        // Discogs
        DISCOGS_ARTIST_ID: "discogs_artist_id",
        DISCOGS_ARTISTS: "artists",
        DISCOGS_ARTIST_NAME: "artists",
        DISCOGS_ALBUM_ARTISTS: "albumartist",
        DISCOGS_CATALOG: "catalognumber",
        DISCOGS_COUNTRY: "releasecountry",
        DISCOGS_DATE: "originaldate",
        DISCOGS_LABEL: "label",
        DISCOGS_LABEL_ID: "discogs_label_id",
        DISCOGS_MASTER_RELEASE_ID: "discogs_master_release_id",
        DISCOGS_RATING: "discogs_rating",
        DISCOGS_RELEASED: "date",
        DISCOGS_RELEASE_ID: "discogs_release_id",
        DISCOGS_VOTES: "discogs_votes",
        CATALOGID: "catalognumber",
        STYLE: "genre",
        //
        REPLAYGAIN_TRACK_GAIN: "replaygain_track_gain",
        REPLAYGAIN_TRACK_PEAK: "replaygain_track_peak",
        REPLAYGAIN_ALBUM_GAIN: "replaygain_album_gain",
        REPLAYGAIN_ALBUM_PEAK: "replaygain_album_peak",
        // To Sure if these (REPLAYGAIN_MINMAX, REPLAYGAIN_ALBUM_MINMAX & REPLAYGAIN_UNDO) are used for Vorbis:
        REPLAYGAIN_MINMAX: "replaygain_track_minmax",
        REPLAYGAIN_ALBUM_MINMAX: "replaygain_album_minmax",
        REPLAYGAIN_UNDO: "replaygain_undo"
      };
      class VorbisTagMapper extends CommonTagMapper {
        static toRating(email, rating, maxScore) {
          return {
            source: email ? email.toLowerCase() : void 0,
            rating: Number.parseFloat(rating) / maxScore * CommonTagMapper.maxRatingScore
          };
        }
        constructor() {
          super(["vorbis"], vorbisTagMap);
        }
        postMap(tag2) {
          if (tag2.id === "RATING") {
            tag2.value = VorbisTagMapper.toRating(void 0, tag2.value, 100);
          } else if (tag2.id.indexOf("RATING:") === 0) {
            const keys = tag2.id.split(":");
            tag2.value = VorbisTagMapper.toRating(keys[1], tag2.value, 1);
            tag2.id = keys[0];
          }
        }
      }
      const riffInfoTagMap = {
        IART: "artist",
        // Artist
        ICRD: "date",
        // DateCreated
        INAM: "title",
        // Title
        TITL: "title",
        IPRD: "album",
        // Product
        ITRK: "track",
        IPRT: "track",
        // Additional tag for track index
        COMM: "comment",
        // Comments
        ICMT: "comment",
        // Country
        ICNT: "releasecountry",
        GNRE: "genre",
        // Genre
        IWRI: "writer",
        // WrittenBy
        RATE: "rating",
        YEAR: "year",
        ISFT: "encodedby",
        // Software
        CODE: "encodedby",
        // EncodedBy
        TURL: "website",
        // URL,
        IGNR: "genre",
        // Genre
        IENG: "engineer",
        // Engineer
        ITCH: "technician",
        // Technician
        IMED: "media",
        // Original Media
        IRPD: "album"
        // Product, where the file was intended for
      };
      class RiffInfoTagMapper extends CommonTagMapper {
        constructor() {
          super(["exif"], riffInfoTagMap);
        }
      }
      const ebmlTagMap = {
        "segment:title": "title",
        "album:ARTIST": "albumartist",
        "album:ARTISTSORT": "albumartistsort",
        "album:TITLE": "album",
        "album:DATE_RECORDED": "originaldate",
        "album:DATE_RELEASED": "releasedate",
        "album:PART_NUMBER": "disk",
        "album:TOTAL_PARTS": "totaltracks",
        "track:ARTIST": "artist",
        "track:ARTISTSORT": "artistsort",
        "track:TITLE": "title",
        "track:PART_NUMBER": "track",
        "track:MUSICBRAINZ_TRACKID": "musicbrainz_recordingid",
        "track:MUSICBRAINZ_ALBUMID": "musicbrainz_albumid",
        "track:MUSICBRAINZ_ARTISTID": "musicbrainz_artistid",
        "track:PUBLISHER": "label",
        "track:GENRE": "genre",
        "track:ENCODER": "encodedby",
        "track:ENCODER_OPTIONS": "encodersettings",
        "edition:TOTAL_PARTS": "totaldiscs",
        picture: "picture"
      };
      class MatroskaTagMapper extends CaseInsensitiveTagMap {
        constructor() {
          super(["matroska"], ebmlTagMap);
        }
      }
      const tagMap = {
        NAME: "title",
        AUTH: "artist",
        "(c) ": "copyright",
        ANNO: "comment"
      };
      class AiffTagMapper extends CommonTagMapper {
        constructor() {
          super(["AIFF"], tagMap);
        }
      }
      class CombinedTagMapper {
        constructor() {
          this.tagMappers = {};
          [
            new ID3v1TagMapper(),
            new ID3v22TagMapper(),
            new ID3v24TagMapper(),
            new MP4TagMapper(),
            new MP4TagMapper(),
            new VorbisTagMapper(),
            new APEv2TagMapper(),
            new AsfTagMapper(),
            new RiffInfoTagMapper(),
            new MatroskaTagMapper(),
            new AiffTagMapper()
          ].forEach((mapper) => {
            this.registerTagMapper(mapper);
          });
        }
        /**
         * Convert native to generic (common) tags
         * @param tagType Originating tag format
         * @param tag     Native tag to map to a generic tag id
         * @param warnings
         * @return Generic tag result (output of this function)
         */
        mapTag(tagType2, tag2, warnings) {
          const tagMapper = this.tagMappers[tagType2];
          if (tagMapper) {
            return this.tagMappers[tagType2].mapGenericTag(tag2, warnings);
          }
          throw new InternalParserError(`No generic tag mapper defined for tag-format: ${tagType2}`);
        }
        registerTagMapper(genericTagMapper) {
          for (const tagType2 of genericTagMapper.tagTypes) {
            this.tagMappers[tagType2] = genericTagMapper;
          }
        }
      }
      function parseLrc(lrcString) {
        const lines = lrcString.split("\n");
        const syncText = [];
        const timestampRegex = /\[(\d{2}):(\d{2})\.(\d{2})\]/;
        for (const line of lines) {
          const match = line.match(timestampRegex);
          if (match) {
            const minutes = Number.parseInt(match[1], 10);
            const seconds = Number.parseInt(match[2], 10);
            const hundredths = Number.parseInt(match[3], 10);
            const timestamp = (minutes * 60 + seconds) * 1e3 + hundredths * 10;
            const text2 = line.replace(timestampRegex, "").trim();
            syncText.push({ timestamp, text: text2 });
          }
        }
        return {
          contentType: LyricsContentType.lyrics,
          timeStampFormat: TimestampFormat.milliseconds,
          syncText
        };
      }
      const debug$3 = initDebug("music-metadata:collector");
      const TagPriority = ["matroska", "APEv2", "vorbis", "ID3v2.4", "ID3v2.3", "ID3v2.2", "exif", "asf", "iTunes", "AIFF", "ID3v1"];
      class MetadataCollector {
        constructor(opts) {
          this.opts = opts;
          this.format = {
            tagTypes: [],
            trackInfo: []
          };
          this.native = {};
          this.common = {
            track: { no: null, of: null },
            disk: { no: null, of: null },
            movementIndex: { no: null, of: null }
          };
          this.quality = {
            warnings: []
          };
          this.commonOrigin = {};
          this.originPriority = {};
          this.tagMapper = new CombinedTagMapper();
          let priority = 1;
          for (const tagType2 of TagPriority) {
            this.originPriority[tagType2] = priority++;
          }
          this.originPriority.artificial = 500;
          this.originPriority.id3v1 = 600;
        }
        /**
         * @returns {boolean} true if one or more tags have been found
         */
        hasAny() {
          return Object.keys(this.native).length > 0;
        }
        addStreamInfo(streamInfo) {
          debug$3(`streamInfo: type=${streamInfo.type ? TrackType[streamInfo.type] : "?"}, codec=${streamInfo.codecName}`);
          this.format.trackInfo.push(streamInfo);
        }
        setFormat(key, value2) {
          var _a;
          debug$3(`format: ${key} = ${value2}`);
          this.format[key] = value2;
          if ((_a = this.opts) == null ? void 0 : _a.observer) {
            this.opts.observer({ metadata: this, tag: { type: "format", id: key, value: value2 } });
          }
        }
        async addTag(tagType2, tagId, value2) {
          debug$3(`tag ${tagType2}.${tagId} = ${value2}`);
          if (!this.native[tagType2]) {
            this.format.tagTypes.push(tagType2);
            this.native[tagType2] = [];
          }
          this.native[tagType2].push({ id: tagId, value: value2 });
          await this.toCommon(tagType2, tagId, value2);
        }
        addWarning(warning2) {
          this.quality.warnings.push({ message: warning2 });
        }
        async postMap(tagType2, tag2) {
          switch (tag2.id) {
            case "artist":
              if (this.commonOrigin.artist === this.originPriority[tagType2]) {
                return this.postMap("artificial", { id: "artists", value: tag2.value });
              }
              if (!this.common.artists) {
                this.setGenericTag("artificial", { id: "artists", value: tag2.value });
              }
              break;
            case "artists":
              if (!this.common.artist || this.commonOrigin.artist === this.originPriority.artificial) {
                if (!this.common.artists || this.common.artists.indexOf(tag2.value) === -1) {
                  const artists = (this.common.artists || []).concat([tag2.value]);
                  const value2 = joinArtists(artists);
                  const artistTag = { id: "artist", value: value2 };
                  this.setGenericTag("artificial", artistTag);
                }
              }
              break;
            case "picture":
              return this.postFixPicture(tag2.value).then((picture) => {
                if (picture !== null) {
                  tag2.value = picture;
                  this.setGenericTag(tagType2, tag2);
                }
              });
            case "totaltracks":
              this.common.track.of = CommonTagMapper.toIntOrNull(tag2.value);
              return;
            case "totaldiscs":
              this.common.disk.of = CommonTagMapper.toIntOrNull(tag2.value);
              return;
            case "movementTotal":
              this.common.movementIndex.of = CommonTagMapper.toIntOrNull(tag2.value);
              return;
            case "track":
            case "disk":
            case "movementIndex": {
              const of = this.common[tag2.id].of;
              this.common[tag2.id] = CommonTagMapper.normalizeTrack(tag2.value);
              this.common[tag2.id].of = of != null ? of : this.common[tag2.id].of;
              return;
            }
            case "bpm":
            case "year":
            case "originalyear":
              tag2.value = Number.parseInt(tag2.value, 10);
              break;
            case "date": {
              const year = Number.parseInt(tag2.value.substr(0, 4), 10);
              if (!Number.isNaN(year)) {
                this.common.year = year;
              }
              break;
            }
            case "discogs_label_id":
            case "discogs_release_id":
            case "discogs_master_release_id":
            case "discogs_artist_id":
            case "discogs_votes":
              tag2.value = typeof tag2.value === "string" ? Number.parseInt(tag2.value, 10) : tag2.value;
              break;
            case "replaygain_track_gain":
            case "replaygain_track_peak":
            case "replaygain_album_gain":
            case "replaygain_album_peak":
              tag2.value = toRatio(tag2.value);
              break;
            case "replaygain_track_minmax":
              tag2.value = tag2.value.split(",").map((v) => Number.parseInt(v, 10));
              break;
            case "replaygain_undo": {
              const minMix = tag2.value.split(",").map((v) => Number.parseInt(v, 10));
              tag2.value = {
                leftChannel: minMix[0],
                rightChannel: minMix[1]
              };
              break;
            }
            case "gapless":
            case "compilation":
            case "podcast":
            case "showMovement":
              tag2.value = tag2.value === "1" || tag2.value === 1;
              break;
            case "isrc": {
              const commonTag = this.common[tag2.id];
              if (commonTag && commonTag.indexOf(tag2.value) !== -1)
                return;
              break;
            }
            case "comment":
              if (typeof tag2.value === "string") {
                tag2.value = { text: tag2.value };
              }
              if (tag2.value.descriptor === "iTunPGAP") {
                this.setGenericTag(tagType2, { id: "gapless", value: tag2.value.text === "1" });
              }
              break;
            case "lyrics":
              if (typeof tag2.value === "string") {
                tag2.value = parseLrc(tag2.value);
              }
              break;
          }
          if (tag2.value !== null) {
            this.setGenericTag(tagType2, tag2);
          }
        }
        /**
         * Convert native tags to common tags
         * @returns {IAudioMetadata} Native + common tags
         */
        toCommonMetadata() {
          return {
            format: this.format,
            native: this.native,
            quality: this.quality,
            common: this.common
          };
        }
        /**
         * Fix some common issues with picture object
         * @param picture Picture
         */
        async postFixPicture(picture) {
          if (picture.data && picture.data.length > 0) {
            if (!picture.format) {
              const fileType = await fileTypeFromBuffer(Uint8Array.from(picture.data));
              if (fileType) {
                picture.format = fileType.mime;
              } else {
                return null;
              }
            }
            picture.format = picture.format.toLocaleLowerCase();
            switch (picture.format) {
              case "image/jpg":
                picture.format = "image/jpeg";
            }
            return picture;
          }
          this.addWarning("Empty picture tag found");
          return null;
        }
        /**
         * Convert native tag to common tags
         */
        async toCommon(tagType2, tagId, value2) {
          const tag2 = { id: tagId, value: value2 };
          const genericTag = this.tagMapper.mapTag(tagType2, tag2, this);
          if (genericTag) {
            await this.postMap(tagType2, genericTag);
          }
        }
        /**
         * Set generic tag
         */
        setGenericTag(tagType2, tag2) {
          var _a;
          debug$3(`common.${tag2.id} = ${tag2.value}`);
          const prio0 = this.commonOrigin[tag2.id] || 1e3;
          const prio1 = this.originPriority[tagType2];
          if (isSingleton(tag2.id)) {
            if (prio1 <= prio0) {
              this.common[tag2.id] = tag2.value;
              this.commonOrigin[tag2.id] = prio1;
            } else {
              return debug$3(`Ignore native tag (singleton): ${tagType2}.${tag2.id} = ${tag2.value}`);
            }
          } else {
            if (prio1 === prio0) {
              if (!isUnique(tag2.id) || this.common[tag2.id].indexOf(tag2.value) === -1) {
                this.common[tag2.id].push(tag2.value);
              } else {
                debug$3(`Ignore duplicate value: ${tagType2}.${tag2.id} = ${tag2.value}`);
              }
            } else if (prio1 < prio0) {
              this.common[tag2.id] = [tag2.value];
              this.commonOrigin[tag2.id] = prio1;
            } else {
              return debug$3(`Ignore native tag (list): ${tagType2}.${tag2.id} = ${tag2.value}`);
            }
          }
          if ((_a = this.opts) == null ? void 0 : _a.observer) {
            this.opts.observer({ metadata: this, tag: { type: "common", id: tag2.id, value: tag2.value } });
          }
        }
      }
      function joinArtists(artists) {
        if (artists.length > 2) {
          return `${artists.slice(0, artists.length - 1).join(", ")} & ${artists[artists.length - 1]}`;
        }
        return artists.join(" & ");
      }
      const scriptRel = function detectScriptRel() {
        const relList = typeof document !== "undefined" && document.createElement("link").relList;
        return relList && relList.supports && relList.supports("modulepreload") ? "modulepreload" : "preload";
      }();
      const assetsURL = function(dep) {
        return "/" + dep;
      };
      const seen = {};
      const __vitePreload = function preload(baseModule, deps, importerUrl) {
        let promise = Promise.resolve();
        if (deps && deps.length > 0) {
          document.getElementsByTagName("link");
          const cspNonceMeta = document.querySelector(
            "meta[property=csp-nonce]"
          );
          const cspNonce = (cspNonceMeta == null ? void 0 : cspNonceMeta.nonce) || (cspNonceMeta == null ? void 0 : cspNonceMeta.getAttribute("nonce"));
          promise = Promise.allSettled(
            deps.map((dep) => {
              dep = assetsURL(dep);
              if (dep in seen) return;
              seen[dep] = true;
              const isCss = dep.endsWith(".css");
              const cssSelector = isCss ? '[rel="stylesheet"]' : "";
              if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
                return;
              }
              const link = document.createElement("link");
              link.rel = isCss ? "stylesheet" : scriptRel;
              if (!isCss) {
                link.as = "script";
              }
              link.crossOrigin = "";
              link.href = dep;
              if (cspNonce) {
                link.setAttribute("nonce", cspNonce);
              }
              document.head.appendChild(link);
              if (isCss) {
                return new Promise((res, rej) => {
                  link.addEventListener("load", res);
                  link.addEventListener(
                    "error",
                    () => rej(new Error(`Unable to preload CSS for ${dep}`))
                  );
                });
              }
            })
          );
        }
        function handlePreloadError(err) {
          const e = new Event("vite:preloadError", {
            cancelable: true
          });
          e.payload = err;
          window.dispatchEvent(e);
          if (!e.defaultPrevented) {
            throw err;
          }
        }
        return promise.then((res) => {
          for (const item of res || []) {
            if (item.status !== "rejected") continue;
            handlePreloadError(item.reason);
          }
          return baseModule().catch(handlePreloadError);
        });
      };
      const mpegParserLoader = {
        parserType: "mpeg",
        extensions: [".mp2", ".mp3", ".m2a", ".aac", "aacp"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { MpegParser } = await module.import('./MpegParser-t3JjS_bv-DP4MVn8J.js');
            return { MpegParser };
          }, void 0 )).MpegParser(metadata, tokenizer, options);
        }
      };
      const apeParserLoader = {
        parserType: "apev2",
        extensions: [".ape"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { APEv2Parser: APEv2Parser2 } = await Promise.resolve().then(() => APEv2Parser$1);
            return { APEv2Parser: APEv2Parser2 };
          }, void 0 )).APEv2Parser(metadata, tokenizer, options);
        }
      };
      const asfParserLoader = {
        parserType: "asf",
        extensions: [".asf"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { AsfParser } = await module.import('./AsfParser-6pj_dtO9-DydKPSph.js');
            return { AsfParser };
          }, void 0 )).AsfParser(metadata, tokenizer, options);
        }
      };
      const dsdiffParserLoader = {
        parserType: "dsdiff",
        extensions: [".dff"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { DsdiffParser } = await module.import('./DsdiffParser-DlPzwyIy-BSxVmTfk.js');
            return { DsdiffParser };
          }, void 0 )).DsdiffParser(metadata, tokenizer, options);
        }
      };
      const aiffParserLoader = {
        parserType: "aiff",
        extensions: [".aif", "aiff", "aifc"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { AIFFParser } = await module.import('./AiffParser-Bl4qv0ID-Bs_4-QGD.js');
            return { AIFFParser };
          }, void 0 )).AIFFParser(metadata, tokenizer, options);
        }
      };
      const dsfParserLoader = {
        parserType: "dsf",
        extensions: [".dsf"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { DsfParser } = await module.import('./DsfParser-D_jwx0gH-BdUENliv.js');
            return { DsfParser };
          }, void 0 )).DsfParser(metadata, tokenizer, options);
        }
      };
      const flacParserLoader = {
        parserType: "flac",
        extensions: [".flac"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { FlacParser } = await module.import('./FlacParser-CxiwFQBW-BzeYKlyb.js');
            return { FlacParser };
          }, void 0 )).FlacParser(metadata, tokenizer, options);
        }
      };
      const matroskaParserLoader = {
        parserType: "matroska",
        extensions: [".mka", ".mkv", ".mk3d", ".mks", "webm"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { MatroskaParser } = await module.import('./MatroskaParser-DlYom4Kd-CpEy0LtJ.js');
            return { MatroskaParser };
          }, void 0 )).MatroskaParser(metadata, tokenizer, options);
        }
      };
      const mp4ParserLoader = {
        parserType: "mp4",
        extensions: [".mp4", ".m4a", ".m4b", ".m4pa", "m4v", "m4r", "3gp"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { MP4Parser } = await module.import('./MP4Parser-CJGrwS9Y-yroBH10s.js');
            return { MP4Parser };
          }, void 0 )).MP4Parser(metadata, tokenizer, options);
        }
      };
      const musepackParserLoader = {
        parserType: "musepack",
        extensions: [".mpc"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { MusepackParser } = await module.import('./MusepackParser-ImJ4EqDU-CBDf08G9.js');
            return { MusepackParser };
          }, void 0 )).MusepackParser(metadata, tokenizer, options);
        }
      };
      const oggParserLoader = {
        parserType: "ogg",
        extensions: [".ogg", ".ogv", ".oga", ".ogm", ".ogx", ".opus", ".spx"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { OggParser } = await module.import('./OggParser-BBZnDK-h-D6aAHGsc.js');
            return { OggParser };
          }, void 0 )).OggParser(metadata, tokenizer, options);
        }
      };
      const wavpackParserLoader = {
        parserType: "wavpack",
        extensions: [".wv", ".wvp"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { WavPackParser } = await module.import('./WavPackParser-CP3cSPHA-DUluwt_e.js');
            return { WavPackParser };
          }, void 0 )).WavPackParser(metadata, tokenizer, options);
        }
      };
      const riffParserLoader = {
        parserType: "riff",
        extensions: [".wav", "wave", ".bwf"],
        async load(metadata, tokenizer, options) {
          return new (await __vitePreload(async () => {
            const { WaveParser } = await module.import('./WaveParser-BOR6tCgw-CFnjS9DE.js');
            return { WaveParser };
          }, void 0 )).WaveParser(metadata, tokenizer, options);
        }
      };
      const debug$2 = initDebug("music-metadata:parser:factory");
      function parseHttpContentType(contentType$1) {
        const type = contentType.parse(contentType$1);
        const mime = parse_1(type.type);
        return {
          type: mime.type,
          subtype: mime.subtype,
          suffix: mime.suffix,
          parameters: type.parameters
        };
      }
      class ParserFactory {
        constructor() {
          this.parsers = [];
          [
            flacParserLoader,
            mpegParserLoader,
            apeParserLoader,
            mp4ParserLoader,
            matroskaParserLoader,
            riffParserLoader,
            oggParserLoader,
            asfParserLoader,
            aiffParserLoader,
            wavpackParserLoader,
            musepackParserLoader,
            dsfParserLoader,
            dsdiffParserLoader
          ].forEach((parser) => this.registerParser(parser));
        }
        registerParser(parser) {
          this.parsers.push(parser);
        }
        async parse(tokenizer, parserLoader, opts) {
          if (tokenizer.supportsRandomAccess()) {
            debug$2("tokenizer supports random-access, scanning for appending headers");
            await scanAppendingHeaders(tokenizer, opts);
          } else {
            debug$2("tokenizer does not support random-access, cannot scan for appending headers");
          }
          if (!parserLoader) {
            const buf = new Uint8Array(4100);
            if (tokenizer.fileInfo.mimeType) {
              parserLoader = this.findLoaderForType(getParserIdForMimeType(tokenizer.fileInfo.mimeType));
            }
            if (!parserLoader && tokenizer.fileInfo.path) {
              parserLoader = this.findLoaderForExtension(tokenizer.fileInfo.path);
            }
            if (!parserLoader) {
              debug$2("Guess parser on content...");
              await tokenizer.peekBuffer(buf, { mayBeLess: true });
              const guessedType = await fileTypeFromBuffer(buf);
              if (!guessedType || !guessedType.mime) {
                throw new CouldNotDetermineFileTypeError("Failed to determine audio format");
              }
              debug$2(`Guessed file type is mime=${guessedType.mime}, extension=${guessedType.ext}`);
              parserLoader = this.findLoaderForType(getParserIdForMimeType(guessedType.mime));
              if (!parserLoader) {
                throw new UnsupportedFileTypeError(`Guessed MIME-type not supported: ${guessedType.mime}`);
              }
            }
          }
          debug$2(`Loading ${parserLoader.parserType} parser...`);
          const metadata = new MetadataCollector(opts);
          const parser = await parserLoader.load(metadata, tokenizer, opts ?? {});
          debug$2(`Parser ${parserLoader.parserType} loaded`);
          await parser.parse();
          return metadata.toCommonMetadata();
        }
        /**
         * @param filePath - Path, filename or extension to audio file
         * @return Parser submodule name
         */
        findLoaderForExtension(filePath) {
          if (!filePath)
            return;
          const extension = getExtension(filePath).toLocaleLowerCase() || filePath;
          return this.parsers.find((parser) => parser.extensions.indexOf(extension) !== -1);
        }
        findLoaderForType(moduleName) {
          return moduleName ? this.parsers.find((parser) => parser.parserType === moduleName) : void 0;
        }
      }
      function getExtension(fname) {
        const i = fname.lastIndexOf(".");
        return i === -1 ? "" : fname.slice(i);
      }
      function getParserIdForMimeType(httpContentType) {
        let mime;
        if (!httpContentType)
          return;
        try {
          mime = parseHttpContentType(httpContentType);
        } catch (err) {
          debug$2(`Invalid HTTP Content-Type header value: ${httpContentType}`);
          return;
        }
        const subType = mime.subtype.indexOf("x-") === 0 ? mime.subtype.substring(2) : mime.subtype;
        switch (mime.type) {
          case "audio":
            switch (subType) {
              case "mp3":
              case "mpeg":
                return "mpeg";
              case "aac":
              case "aacp":
                return "mpeg";
              case "flac":
                return "flac";
              case "ape":
              case "monkeys-audio":
                return "apev2";
              case "mp4":
              case "m4a":
                return "mp4";
              case "ogg":
              case "opus":
              case "speex":
                return "ogg";
              case "ms-wma":
              case "ms-wmv":
              case "ms-asf":
                return "asf";
              case "aiff":
              case "aif":
              case "aifc":
                return "aiff";
              case "vnd.wave":
              case "wav":
              case "wave":
                return "riff";
              case "wavpack":
                return "wavpack";
              case "musepack":
                return "musepack";
              case "matroska":
              case "webm":
                return "matroska";
              case "dsf":
                return "dsf";
              case "amr":
                return "amr";
            }
            break;
          case "video":
            switch (subType) {
              case "ms-asf":
              case "ms-wmv":
                return "asf";
              case "m4v":
              case "mp4":
                return "mp4";
              case "ogg":
                return "ogg";
              case "matroska":
              case "webm":
                return "matroska";
            }
            break;
          case "application":
            switch (subType) {
              case "vnd.ms-asf":
                return "asf";
              case "ogg":
                return "ogg";
            }
            break;
        }
      }
      class BasicParser {
        /**
         * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).
         * @param {INativeMetadataCollector} metadata Output
         * @param {ITokenizer} tokenizer Input
         * @param {IOptions} options Parsing options
         */
        constructor(metadata, tokenizer, options) {
          this.metadata = metadata;
          this.tokenizer = tokenizer;
          this.options = options;
        }
      } exports("B", BasicParser);
      const validFourCC = /^[\x21-\x7e©][\x20-\x7e\x00()]{3}/;
      const FourCcToken = exports("F", {
        len: 4,
        get: (buf, off) => {
          const id = uint8ArrayToString(buf.slice(off, off + FourCcToken.len), "latin1");
          if (!id.match(validFourCC)) {
            throw new FieldDecodingError(`FourCC contains invalid characters: ${a2hex(id)} "${id}"`);
          }
          return id;
        },
        put: (buffer, offset, id) => {
          const str = stringToUint8Array(id);
          if (str.length !== 4)
            throw new InternalParserError("Invalid length");
          buffer.set(str, offset);
          return offset + 4;
        }
      });
      var DataType;
      (function(DataType2) {
        DataType2[DataType2["text_utf8"] = 0] = "text_utf8";
        DataType2[DataType2["binary"] = 1] = "binary";
        DataType2[DataType2["external_info"] = 2] = "external_info";
        DataType2[DataType2["reserved"] = 3] = "reserved";
      })(DataType || (DataType = {}));
      const DescriptorParser = {
        len: 52,
        get: (buf, off) => {
          return {
            // should equal 'MAC '
            ID: FourCcToken.get(buf, off),
            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)
            version: UINT32_LE.get(buf, off + 4) / 1e3,
            // the number of descriptor bytes (allows later expansion of this header)
            descriptorBytes: UINT32_LE.get(buf, off + 8),
            // the number of header APE_HEADER bytes
            headerBytes: UINT32_LE.get(buf, off + 12),
            // the number of header APE_HEADER bytes
            seekTableBytes: UINT32_LE.get(buf, off + 16),
            // the number of header data bytes (from original file)
            headerDataBytes: UINT32_LE.get(buf, off + 20),
            // the number of bytes of APE frame data
            apeFrameDataBytes: UINT32_LE.get(buf, off + 24),
            // the high order number of APE frame data bytes
            apeFrameDataBytesHigh: UINT32_LE.get(buf, off + 28),
            // the terminating data of the file (not including tag data)
            terminatingDataBytes: UINT32_LE.get(buf, off + 32),
            // the MD5 hash of the file (see notes for usage... it's a little tricky)
            fileMD5: new Uint8ArrayType(16).get(buf, off + 36)
          };
        }
      };
      const Header = {
        len: 24,
        get: (buf, off) => {
          return {
            // the compression level (see defines I.E. COMPRESSION_LEVEL_FAST)
            compressionLevel: UINT16_LE.get(buf, off),
            // any format flags (for future use)
            formatFlags: UINT16_LE.get(buf, off + 2),
            // the number of audio blocks in one frame
            blocksPerFrame: UINT32_LE.get(buf, off + 4),
            // the number of audio blocks in the final frame
            finalFrameBlocks: UINT32_LE.get(buf, off + 8),
            // the total number of frames
            totalFrames: UINT32_LE.get(buf, off + 12),
            // the bits per sample (typically 16)
            bitsPerSample: UINT16_LE.get(buf, off + 16),
            // the number of channels (1 or 2)
            channel: UINT16_LE.get(buf, off + 18),
            // the sample rate (typically 44100)
            sampleRate: UINT32_LE.get(buf, off + 20)
          };
        }
      };
      const TagFooter = {
        len: 32,
        get: (buf, off) => {
          return {
            // should equal 'APETAGEX'
            ID: new StringType(8, "ascii").get(buf, off),
            // equals CURRENT_APE_TAG_VERSION
            version: UINT32_LE.get(buf, off + 8),
            // the complete size of the tag, including this footer (excludes header)
            size: UINT32_LE.get(buf, off + 12),
            // the number of fields in the tag
            fields: UINT32_LE.get(buf, off + 16),
            // reserved for later use (must be zero),
            flags: parseTagFlags(UINT32_LE.get(buf, off + 20))
          };
        }
      };
      const TagItemHeader = {
        len: 8,
        get: (buf, off) => {
          return {
            // Length of assigned value in bytes
            size: UINT32_LE.get(buf, off),
            // reserved for later use (must be zero),
            flags: parseTagFlags(UINT32_LE.get(buf, off + 4))
          };
        }
      };
      function parseTagFlags(flags) {
        return {
          containsHeader: isBitSet(flags, 31),
          containsFooter: isBitSet(flags, 30),
          isHeader: isBitSet(flags, 29),
          readOnly: isBitSet(flags, 0),
          dataType: (flags & 6) >> 1
        };
      }
      function isBitSet(num, bit) {
        return (num & 1 << bit) !== 0;
      }
      const debug$1 = initDebug("music-metadata:parser:APEv2");
      const tagFormat = "APEv2";
      const preamble = "APETAGEX";
      class ApeContentError extends makeUnexpectedFileContentError("APEv2") {
      }
      class APEv2Parser extends BasicParser {
        constructor() {
          super(...arguments);
          this.ape = {};
        }
        static tryParseApeHeader(metadata, tokenizer, options) {
          const apeParser = new APEv2Parser(metadata, tokenizer, options);
          return apeParser.tryParseApeHeader();
        }
        /**
         * Calculate the media file duration
         * @param ah ApeHeader
         * @return {number} duration in seconds
         */
        static calculateDuration(ah) {
          let duration = ah.totalFrames > 1 ? ah.blocksPerFrame * (ah.totalFrames - 1) : 0;
          duration += ah.finalFrameBlocks;
          return duration / ah.sampleRate;
        }
        /**
         * Calculates the APEv1 / APEv2 first field offset
         * @param tokenizer
         * @param offset
         */
        static async findApeFooterOffset(tokenizer, offset) {
          const apeBuf = new Uint8Array(TagFooter.len);
          const position = tokenizer.position;
          await tokenizer.readBuffer(apeBuf, { position: offset - TagFooter.len });
          tokenizer.setPosition(position);
          const tagFooter = TagFooter.get(apeBuf, 0);
          if (tagFooter.ID === "APETAGEX") {
            if (tagFooter.flags.isHeader) {
              debug$1(`APE Header found at offset=${offset - TagFooter.len}`);
            } else {
              debug$1(`APE Footer found at offset=${offset - TagFooter.len}`);
              offset -= tagFooter.size;
            }
            return { footer: tagFooter, offset };
          }
        }
        static parseTagFooter(metadata, buffer, options) {
          const footer2 = TagFooter.get(buffer, buffer.length - TagFooter.len);
          if (footer2.ID !== preamble)
            throw new ApeContentError("Unexpected APEv2 Footer ID preamble value");
          fromBuffer$1(buffer);
          const apeParser = new APEv2Parser(metadata, fromBuffer$1(buffer), options);
          return apeParser.parseTags(footer2);
        }
        /**
         * Parse APEv1 / APEv2 header if header signature found
         */
        async tryParseApeHeader() {
          if (this.tokenizer.fileInfo.size && this.tokenizer.fileInfo.size - this.tokenizer.position < TagFooter.len) {
            debug$1("No APEv2 header found, end-of-file reached");
            return;
          }
          const footer2 = await this.tokenizer.peekToken(TagFooter);
          if (footer2.ID === preamble) {
            await this.tokenizer.ignore(TagFooter.len);
            return this.parseTags(footer2);
          }
          debug$1(`APEv2 header not found at offset=${this.tokenizer.position}`);
          if (this.tokenizer.fileInfo.size) {
            const remaining = this.tokenizer.fileInfo.size - this.tokenizer.position;
            const buffer = new Uint8Array(remaining);
            await this.tokenizer.readBuffer(buffer);
            return APEv2Parser.parseTagFooter(this.metadata, buffer, this.options);
          }
        }
        async parse() {
          const descriptor = await this.tokenizer.readToken(DescriptorParser);
          if (descriptor.ID !== "MAC ")
            throw new ApeContentError("Unexpected descriptor ID");
          this.ape.descriptor = descriptor;
          const lenExp = descriptor.descriptorBytes - DescriptorParser.len;
          const header = await (lenExp > 0 ? this.parseDescriptorExpansion(lenExp) : this.parseHeader());
          await this.tokenizer.ignore(header.forwardBytes);
          return this.tryParseApeHeader();
        }
        async parseTags(footer2) {
          const keyBuffer = new Uint8Array(256);
          let bytesRemaining = footer2.size - TagFooter.len;
          debug$1(`Parse APE tags at offset=${this.tokenizer.position}, size=${bytesRemaining}`);
          for (let i = 0; i < footer2.fields; i++) {
            if (bytesRemaining < TagItemHeader.len) {
              this.metadata.addWarning(`APEv2 Tag-header: ${footer2.fields - i} items remaining, but no more tag data to read.`);
              break;
            }
            const tagItemHeader = await this.tokenizer.readToken(TagItemHeader);
            bytesRemaining -= TagItemHeader.len + tagItemHeader.size;
            await this.tokenizer.peekBuffer(keyBuffer, { length: Math.min(keyBuffer.length, bytesRemaining) });
            let zero = findZero(keyBuffer, 0, keyBuffer.length);
            const key = await this.tokenizer.readToken(new StringType(zero, "ascii"));
            await this.tokenizer.ignore(1);
            bytesRemaining -= key.length + 1;
            switch (tagItemHeader.flags.dataType) {
              case DataType.text_utf8: {
                const value2 = await this.tokenizer.readToken(new StringType(tagItemHeader.size, "utf8"));
                const values = value2.split(/\x00/g);
                await Promise.all(values.map((val) => this.metadata.addTag(tagFormat, key, val)));
                break;
              }
              case DataType.binary:
                if (this.options.skipCovers) {
                  await this.tokenizer.ignore(tagItemHeader.size);
                } else {
                  const picData = new Uint8Array(tagItemHeader.size);
                  await this.tokenizer.readBuffer(picData);
                  zero = findZero(picData, 0, picData.length);
                  const description = uint8ArrayToString(picData.slice(0, zero));
                  const data = picData.slice(zero + 1);
                  await this.metadata.addTag(tagFormat, key, {
                    description,
                    data
                  });
                }
                break;
              case DataType.external_info:
                debug$1(`Ignore external info ${key}`);
                await this.tokenizer.ignore(tagItemHeader.size);
                break;
              case DataType.reserved:
                debug$1(`Ignore external info ${key}`);
                this.metadata.addWarning(`APEv2 header declares a reserved datatype for "${key}"`);
                await this.tokenizer.ignore(tagItemHeader.size);
                break;
            }
          }
        }
        async parseDescriptorExpansion(lenExp) {
          await this.tokenizer.ignore(lenExp);
          return this.parseHeader();
        }
        async parseHeader() {
          const header = await this.tokenizer.readToken(Header);
          this.metadata.setFormat("lossless", true);
          this.metadata.setFormat("container", "Monkey's Audio");
          this.metadata.setFormat("bitsPerSample", header.bitsPerSample);
          this.metadata.setFormat("sampleRate", header.sampleRate);
          this.metadata.setFormat("numberOfChannels", header.channel);
          this.metadata.setFormat("duration", APEv2Parser.calculateDuration(header));
          if (!this.ape.descriptor) {
            throw new ApeContentError("Missing APE descriptor");
          }
          return {
            forwardBytes: this.ape.descriptor.seekTableBytes + this.ape.descriptor.headerDataBytes + this.ape.descriptor.apeFrameDataBytes + this.ape.descriptor.terminatingDataBytes
          };
        }
      } exports("J", APEv2Parser);
      const APEv2Parser$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
        __proto__: null,
        APEv2Parser,
        ApeContentError
      }, Symbol.toStringTag, { value: "Module" }));
      const debug = initDebug("music-metadata:parser:ID3v1");
      const Genres = exports("H", [
        "Blues",
        "Classic Rock",
        "Country",
        "Dance",
        "Disco",
        "Funk",
        "Grunge",
        "Hip-Hop",
        "Jazz",
        "Metal",
        "New Age",
        "Oldies",
        "Other",
        "Pop",
        "R&B",
        "Rap",
        "Reggae",
        "Rock",
        "Techno",
        "Industrial",
        "Alternative",
        "Ska",
        "Death Metal",
        "Pranks",
        "Soundtrack",
        "Euro-Techno",
        "Ambient",
        "Trip-Hop",
        "Vocal",
        "Jazz+Funk",
        "Fusion",
        "Trance",
        "Classical",
        "Instrumental",
        "Acid",
        "House",
        "Game",
        "Sound Clip",
        "Gospel",
        "Noise",
        "Alt. Rock",
        "Bass",
        "Soul",
        "Punk",
        "Space",
        "Meditative",
        "Instrumental Pop",
        "Instrumental Rock",
        "Ethnic",
        "Gothic",
        "Darkwave",
        "Techno-Industrial",
        "Electronic",
        "Pop-Folk",
        "Eurodance",
        "Dream",
        "Southern Rock",
        "Comedy",
        "Cult",
        "Gangsta Rap",
        "Top 40",
        "Christian Rap",
        "Pop/Funk",
        "Jungle",
        "Native American",
        "Cabaret",
        "New Wave",
        "Psychedelic",
        "Rave",
        "Showtunes",
        "Trailer",
        "Lo-Fi",
        "Tribal",
        "Acid Punk",
        "Acid Jazz",
        "Polka",
        "Retro",
        "Musical",
        "Rock & Roll",
        "Hard Rock",
        "Folk",
        "Folk/Rock",
        "National Folk",
        "Swing",
        "Fast-Fusion",
        "Bebob",
        "Latin",
        "Revival",
        "Celtic",
        "Bluegrass",
        "Avantgarde",
        "Gothic Rock",
        "Progressive Rock",
        "Psychedelic Rock",
        "Symphonic Rock",
        "Slow Rock",
        "Big Band",
        "Chorus",
        "Easy Listening",
        "Acoustic",
        "Humour",
        "Speech",
        "Chanson",
        "Opera",
        "Chamber Music",
        "Sonata",
        "Symphony",
        "Booty Bass",
        "Primus",
        "Porn Groove",
        "Satire",
        "Slow Jam",
        "Club",
        "Tango",
        "Samba",
        "Folklore",
        "Ballad",
        "Power Ballad",
        "Rhythmic Soul",
        "Freestyle",
        "Duet",
        "Punk Rock",
        "Drum Solo",
        "A Cappella",
        "Euro-House",
        "Dance Hall",
        "Goa",
        "Drum & Bass",
        "Club-House",
        "Hardcore",
        "Terror",
        "Indie",
        "BritPop",
        "Negerpunk",
        "Polsk Punk",
        "Beat",
        "Christian Gangsta Rap",
        "Heavy Metal",
        "Black Metal",
        "Crossover",
        "Contemporary Christian",
        "Christian Rock",
        "Merengue",
        "Salsa",
        "Thrash Metal",
        "Anime",
        "JPop",
        "Synthpop",
        "Abstract",
        "Art Rock",
        "Baroque",
        "Bhangra",
        "Big Beat",
        "Breakbeat",
        "Chillout",
        "Downtempo",
        "Dub",
        "EBM",
        "Eclectic",
        "Electro",
        "Electroclash",
        "Emo",
        "Experimental",
        "Garage",
        "Global",
        "IDM",
        "Illbient",
        "Industro-Goth",
        "Jam Band",
        "Krautrock",
        "Leftfield",
        "Lounge",
        "Math Rock",
        "New Romantic",
        "Nu-Breakz",
        "Post-Punk",
        "Post-Rock",
        "Psytrance",
        "Shoegaze",
        "Space Rock",
        "Trop Rock",
        "World Music",
        "Neoclassical",
        "Audiobook",
        "Audio Theatre",
        "Neue Deutsche Welle",
        "Podcast",
        "Indie Rock",
        "G-Funk",
        "Dubstep",
        "Garage Rock",
        "Psybient"
      ]);
      const Iid3v1Token = {
        len: 128,
        /**
         * @param buf Buffer possibly holding the 128 bytes ID3v1.1 metadata header
         * @param off Offset in buffer in bytes
         * @returns ID3v1.1 header if first 3 bytes equals 'TAG', otherwise null is returned
         */
        get: (buf, off) => {
          const header = new Id3v1StringType(3).get(buf, off);
          return header === "TAG" ? {
            header,
            title: new Id3v1StringType(30).get(buf, off + 3),
            artist: new Id3v1StringType(30).get(buf, off + 33),
            album: new Id3v1StringType(30).get(buf, off + 63),
            year: new Id3v1StringType(4).get(buf, off + 93),
            comment: new Id3v1StringType(28).get(buf, off + 97),
            // ID3v1.1 separator for track
            zeroByte: UINT8.get(buf, off + 127),
            // track: ID3v1.1 field added by Michael Mutschler
            track: UINT8.get(buf, off + 126),
            genre: UINT8.get(buf, off + 127)
          } : null;
        }
      };
      class Id3v1StringType {
        constructor(len) {
          this.len = len;
          this.stringType = new StringType(len, "latin1");
        }
        get(buf, off) {
          let value2 = this.stringType.get(buf, off);
          value2 = trimRightNull(value2);
          value2 = value2.trim();
          return value2.length > 0 ? value2 : void 0;
        }
      }
      class ID3v1Parser extends BasicParser {
        constructor(metadata, tokenizer, options) {
          super(metadata, tokenizer, options);
          this.apeHeader = options.apeHeader;
        }
        static getGenre(genreIndex) {
          if (genreIndex < Genres.length) {
            return Genres[genreIndex];
          }
          return void 0;
        }
        async parse() {
          if (!this.tokenizer.fileInfo.size) {
            debug("Skip checking for ID3v1 because the file-size is unknown");
            return;
          }
          if (this.apeHeader) {
            this.tokenizer.ignore(this.apeHeader.offset - this.tokenizer.position);
            const apeParser = new APEv2Parser(this.metadata, this.tokenizer, this.options);
            await apeParser.parseTags(this.apeHeader.footer);
          }
          const offset = this.tokenizer.fileInfo.size - Iid3v1Token.len;
          if (this.tokenizer.position > offset) {
            debug("Already consumed the last 128 bytes");
            return;
          }
          const header = await this.tokenizer.readToken(Iid3v1Token, offset);
          if (header) {
            debug("ID3v1 header found at: pos=%s", this.tokenizer.fileInfo.size - Iid3v1Token.len);
            const props = ["title", "artist", "album", "comment", "track", "year"];
            for (const id of props) {
              if (header[id] && header[id] !== "")
                await this.addTag(id, header[id]);
            }
            const genre = ID3v1Parser.getGenre(header.genre);
            if (genre)
              await this.addTag("genre", genre);
          } else {
            debug("ID3v1 header not found at: pos=%s", this.tokenizer.fileInfo.size - Iid3v1Token.len);
          }
        }
        async addTag(id, value2) {
          await this.metadata.addTag("ID3v1", id, value2);
        }
      } exports("L", ID3v1Parser);
      async function hasID3v1Header(tokenizer) {
        if (tokenizer.fileInfo.size >= 128) {
          const tag2 = new Uint8Array(3);
          const position = tokenizer.position;
          await tokenizer.readBuffer(tag2, { position: tokenizer.fileInfo.size - 128 });
          tokenizer.setPosition(position);
          return new TextDecoder("latin1").decode(tag2) === "TAG";
        }
        return false;
      }
      const endTag2 = "LYRICS200";
      async function getLyricsHeaderLength(tokenizer) {
        const fileSize = tokenizer.fileInfo.size;
        if (fileSize >= 143) {
          const buf = new Uint8Array(15);
          const position = tokenizer.position;
          await tokenizer.readBuffer(buf, { position: fileSize - 143 });
          tokenizer.setPosition(position);
          const txt = new TextDecoder("latin1").decode(buf);
          const tag2 = txt.slice(6);
          if (tag2 === endTag2) {
            return Number.parseInt(txt.slice(0, 6), 10) + 15;
          }
        }
        return 0;
      }
      async function parseBlob(blob, options = {}) {
        const fileInfo = { mimeType: blob.type, size: blob.size };
        if (blob instanceof File) {
          fileInfo.path = blob.name;
        }
        return parseWebStream(blob.stream(), fileInfo, options);
      }
      async function parseWebStream(webStream, fileInfo, options = {}) {
        const tokenizer = fromWebStream$1(webStream, { fileInfo: typeof fileInfo === "string" ? { mimeType: fileInfo } : fileInfo });
        try {
          return await parseFromTokenizer(tokenizer, options);
        } finally {
          await tokenizer.close();
        }
      }
      function parseFromTokenizer(tokenizer, options) {
        const parserFactory = new ParserFactory();
        return parserFactory.parse(tokenizer, void 0, options);
      }
      async function scanAppendingHeaders(tokenizer, options = {}) {
        let apeOffset = tokenizer.fileInfo.size;
        if (await hasID3v1Header(tokenizer)) {
          apeOffset -= 128;
          const lyricsLen = await getLyricsHeaderLength(tokenizer);
          apeOffset -= lyricsLen;
        }
        options.apeHeader = await APEv2Parser.findApeFooterOffset(tokenizer, apeOffset);
      }
      const getQrKey = () => weapiRequest("/api/login/qrcode/unikey", {
        data: {
          noCheckToken: 1,
          type: 1
        }
      });
      const getQrCode = (key) => {
        const loginUrl = `https://music.163.com/login?codekey=${key}`;
        return generateQRCode(loginUrl);
      };
      const getQrStatus = (key) => weapiFetch("/api/login/qrcode/client/login", {
        data: {
          key,
          type: 1
        },
        originResponse: true
      });
      const getArtists = () => fetch(`${BASE_CDN_URL}top.json`).then((res) => res.json());
      const getArtists2 = () => fetch(`${BASE_CDN_URL}summary.json`).then((res) => res.json());
      const getCDNConfig = (artistId) => fetch(`${BASE_CDN_URL}${artistId}.json`).then((res) => res.json());
      const getSongInfoList = async (songIds) => {
        const chunkArr = chunkArray(songIds, 1e3);
        const proArr = chunkArr.map(async (chunk) => {
          return weapiRequest("/api/v3/song/detail", {
            data: {
              c: JSON.stringify(chunk.map((item) => ({ id: item })))
            }
          });
        });
        const allInfo = await Promise.all(proArr);
        return allInfo.flat();
      };
      const matchCloudSong = async (cloudSongId, id) => {
        if (cloudSongId != id && id > 0) {
          const res = await weapiRequest("/api/cloud/user/song/match", {
            data: {
              songId: cloudSongId,
              adjustSongId: id
            }
          });
          if (res.code != 200 || res.data.length < 1) {
            msgError(`歌曲： ${song.name} 匹配失败`);
            throw new Error(res.message || res.msg || "歌曲匹配失败");
          }
          return res;
        }
        return;
      };
      const uploadSong = async (song2) => {
        try {
          let res = await weapiRequest("/api/cloud/upload/check/v2", {
            data: {
              uploadType: 0,
              songs: JSON.stringify([
                {
                  md5: song2.md5,
                  songId: song2.id,
                  bitrate: song2.bitrate,
                  fileSize: song2.size
                }
              ])
            }
          });
          if (res.code != 200 || res.data.length < 1) {
            msgError(`资源检查失败,请检查歌曲：${song2.name}是否已存在！`);
            throw new Error(res.message || res.msg || "资源检查失败");
          }
          const cloudId = res.data[0].songId;
          if (res.data[0].upload == 1) {
            const importRes = await weapiRequest("/api/cloud/user/song/import", {
              data: {
                uploadType: 0,
                songs: JSON.stringify([
                  {
                    songId: cloudId,
                    bitrate: song2.bitrate,
                    song: song2.filename,
                    artist: song2.artists,
                    album: song2.album,
                    fileName: song2.filename
                  }
                ])
              }
            });
            if (importRes.code != 200 || importRes.data.successSongs.length < 1) {
              msgError(`歌曲： ${song2.name} 上传失败`);
              throw new Error(importRes.message || importRes.msg || "歌曲上传失败");
            }
            const cloudSongId = importRes.data.successSongs[0].song.songId;
            await matchCloudSong(cloudSongId, song2.id);
            return {
              code: 200,
              msg: "歌曲上传成功",
              data: { song: song2 }
            };
          } else {
            const tokenRes = await weapiRequest("/api/nos/token/alloc", {
              data: {
                filename: song2.filename,
                length: song2.size,
                ext: song2.ext,
                md5: song2.md5,
                type: "audio",
                bucket: "jd-musicrep-privatecloud-audio-public",
                local: false,
                nos_product: 3
              }
            });
            if (tokenRes.code != 200) {
              msgError("获取上传token失败");
              throw new Error(tokenRes.message || tokenRes.msg || "获取上传token失败");
            }
            song2.resourceId = tokenRes.result.resourceId;
            const uploadRes = await weapiRequest("/api/upload/cloud/info/v2", {
              data: {
                token: tokenRes.result.token,
                objectKey: tokenRes.result.objectKey,
                resourceId: tokenRes.result.resourceId,
                // ...tokenRes.result,
                expireTime: Date.now() + 6e4,
                fileSize: song2.size,
                md5: song2.md5,
                songid: cloudId,
                filename: song2.filename,
                song: song2.name,
                album: song2.album,
                artist: song2.artists,
                bitrate: String(song2.bitrate || 128),
                resourceId: song2.resourceId
              }
            });
            if (uploadRes.code != 200) {
              msgError(`歌曲： ${song2.name} 上传失败`);
            }
            const pubRes = await weapiRequest("/api/cloud/pub/v2", {
              data: {
                songid: uploadRes.songId
              }
            });
            if (![200, 201].includes(pubRes.code)) {
              msgError(`歌曲： ${song2.name} 发布失败`);
              throw new Error(pubRes.message || pubRes.msg || "歌曲发布失败");
            }
            const cloudSongId = pubRes.privateCloud.songId;
            await matchCloudSong(cloudSongId, song2.id);
            return {
              code: 200,
              msg: "歌曲上传成功",
              data: { song: song2 }
            };
          }
        } catch (error) {
          console.log("error", error);
          throw error;
        }
      };
      const getCloudData = (limit = 200, offset = 0) => weapiRequest("/api/v1/cloud/get", {
        data: {
          limit,
          offset
        }
      });
      const deleteCloudSong = (songIds) => weapiRequest("/api/cloud/del", {
        data: {
          songIds
        }
      });
      const getPlaylistList = (uid = getGUser().userId, limit = 1001, offset = 0) => weapiRequest("/api/user/playlist", {
        data: {
          limit,
          offset,
          uid
        }
      });
      const createPlaylist = (name2) => weapiRequest("/api/playlist/create", {
        data: {
          name: name2
        }
      });
      const deletePlaylist = (pid) => weapiRequest("/api/playlist/delete", {
        data: {
          pid
        }
      });
      const addSongToPlaylist = (pid, trackIds) => weapiRequest("/api/playlist/manipulate/tracks", {
        data: {
          pid,
          // 歌单id
          trackIds,
          // 歌曲 id 数组
          op: "add"
          // 操作类型
        }
      });
      const getAlbumSongList = (id) => weapiRequest(`/api/v1/album/${id}`, {
        data: {}
      });
      const getSongUrl = (ids, encodeType = "flac", level = QUALITY_LEVELS.无损) => weapiRequest("/api/song/enhance/player/url/v1", {
        data: { ids, level, encodeType }
      });
      const getArtistTopSongList = (id) => weapiRequest("/api/artist/top/song", {
        data: {
          id,
          limit: 1e3,
          offset: 0
        }
      });
      const getArtistAllSongList = (id) => weapiRequest("/api/v1/artist/songs", {
        data: {
          id,
          private_cloud: "true",
          work_type: 1,
          order: "hot",
          //hot,time
          limit: 1e4,
          offset: 0
        }
      });
      const getArtistAlbumList = async (id, limit = 1e3, offset = 0) => {
        const res = await fetch(`/artist/album?id=${id}&limit=${limit}&offset=${offset}`);
        console.log("res", res);
        const html = await res.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, "text/html");
        const albumList = Array.from(doc.querySelectorAll("#m-song-module li"));
        return albumList.map((item) => {
          const cover = item.querySelector("img").getAttribute("src");
          const id2 = item.querySelector('a[title="播放"]').getAttribute("data-res-id");
          const name2 = item.querySelector("p.dec a.tit").textContent;
          const time = item.querySelector("span.s-fc3").textContent;
          return { cover, id: id2, name: name2, time };
        });
      };
      const uploadLocalSong = async (file) => {
        try {
          const ext = file.name.split(".").pop();
          const fileMd5 = await getFileMD5(file);
          const bitrate = 999e3;
          const filename = file.name.replace("." + ext, "").replace(/\s/g, "").replace(/\./g, "_");
          const checkRes = await weapiRequest("/api/cloud/upload/check", {
            data: {
              ext: "",
              bitrate: String(bitrate),
              md5: fileMd5,
              length: file.size,
              songId: "0",
              version: 1
            }
          });
          console.log("checkRes", checkRes);
          if (checkRes.code != 200) {
            msgError("文件检查失败");
          }
          const { needUpload, songId: songId2 } = checkRes;
          const tokenRes = await weapiRequest("/api/nos/token/alloc", {
            data: {
              bucket: "",
              ext,
              filename,
              local: false,
              nos_product: 3,
              type: "audio",
              md5: fileMd5
            }
          });
          console.log("tokenRes", tokenRes);
          if (tokenRes.code != 200) {
            msgError("获取上传token失败");
          }
          const { bucket, docId, objectKey, outerUrl, resourceId, token } = tokenRes.result;
          const metadata = await parseBlob(file);
          console.log("metadata", metadata);
          const { album, artist: artist2, artists, title: title2 } = metadata.common || {};
          const uploadInfoRes = await weapiRequest("/api/upload/cloud/info/v2", {
            data: {
              md5: fileMd5,
              songid: songId2,
              filename,
              song: title2 || filename,
              album: album || "未知专辑",
              artist: artist2 || artists.join(",") || "未知歌手",
              bitrate: String(bitrate),
              resourceId
            }
          });
          console.log("uploadInfoRes", uploadInfoRes);
          if (uploadInfoRes.code != 200) {
            msgError("获取上传信息失败");
          }
          const pubRes = await weapiRequest("/api/cloud/pub/v2", {
            data: {
              songid: uploadInfoRes.songId
            }
          });
          console.log("pubRes", pubRes);
          if (![200, 201].includes(pubRes.code)) {
            msgError(`歌曲： ${song.name} 发布失败`);
          }
          const { songName: songName2, bitrate: realBitrate, fileSize } = pubRes.privateCloud;
          return {
            id: uploadInfoRes.songId,
            size: fileSize,
            md5: fileMd5,
            name: songName2,
            ext
          };
        } catch (error) {
          console.log("error", error);
        }
      };
      const select = "_select_10bds_21";
      const tag = "_tag_10bds_34";
      const divider$2 = "_divider_10bds_69";
      const label$1 = "_label_10bds_86";
      const value$1 = "_value_10bds_91";
      const size$1 = "_size_10bds_66";
      const percentage = "_percentage_10bds_112";
      const name = "_name_10bds_137";
      const artist = "_artist_10bds_141";
      const uploadProgressModal = "_uploadProgressModal_10bds_147";
      const progressContent = "_progressContent_10bds_150";
      const progressInfo = "_progressInfo_10bds_156";
      const detail = "_detail_10bds_166";
      const statsContainer = "_statsContainer_10bds_171";
      const statsItem = "_statsItem_10bds_179";
      const failedList = "_failedList_10bds_192";
      const failedTitle = "_failedTitle_10bds_195";
      const failedItem = "_failedItem_10bds_201";
      const songName$1 = "_songName_10bds_207";
      const errorMsg = "_errorMsg_10bds_212";
      const uploadModal = "_uploadModal_10bds_217";
      const progressSection = "_progressSection_10bds_221";
      const count$1 = "_count_10bds_240";
      const statsTag = "_statsTag_10bds_255";
      const songList = "_songList_10bds_260";
      const songItem$1 = "_songItem_10bds_276";
      const songInfo$1 = "_songInfo_10bds_291";
      const artistName = "_artistName_10bds_305";
      const styles$5 = {
        "quick-upload-tabs": "_quick-upload-tabs_10bds_1",
        select,
        "option-label": "_option-label_10bds_24",
        "singer-name": "_singer-name_10bds_31",
        "tag-group": "_tag-group_10bds_34",
        tag,
        "singer-choose": "_singer-choose_10bds_38",
        "singer-choose-form": "_singer-choose-form_10bds_38",
        "btn-group": "_btn-group_10bds_44",
        "upload-list": "_upload-list_10bds_49",
        "upload-footer": "_upload-footer_10bds_53",
        "upload-stats": "_upload-stats_10bds_61",
        "size-text": "_size-text_10bds_66",
        divider: divider$2,
        "upload-confirm": "_upload-confirm_10bds_74",
        "confirm-item": "_confirm-item_10bds_78",
        label: label$1,
        value: value$1,
        size: size$1,
        "upload-progress": "_upload-progress_10bds_101",
        "progress-header": "_progress-header_10bds_101",
        "progress-info": "_progress-info_10bds_108",
        percentage,
        "progress-list": "_progress-list_10bds_117",
        "progress-item": "_progress-item_10bds_122",
        "song-info": "_song-info_10bds_132",
        name,
        artist,
        uploadProgressModal,
        progressContent,
        progressInfo,
        detail,
        statsContainer,
        statsItem,
        failedList,
        failedTitle,
        failedItem,
        songName: songName$1,
        errorMsg,
        uploadModal,
        progressSection,
        count: count$1,
        statsTag,
        songList,
        songItem: songItem$1,
        songInfo: songInfo$1,
        artistName
      };
      function SingerChoose({ singerList, onChoose, loading }) {
        const renderSingerList = useMemo(() => {
          return singerList.map((item) => {
            const { id, name: name2, count: count2, size: size2, sizeDesc } = item;
            return {
              ...item,
              label: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5["option-label"], children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$5["singer-name"], children: name2 }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5["tag-group"], children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Tag, { color: "blue", className: styles$5["tag"], children: [
                    count2,
                    "首"
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { color: "green", className: styles$5["tag"], children: sizeDesc })
                ] })
              ] }),
              value: id
            };
          });
        }, [singerList]);
        const [formRef] = Form.useForm();
        const handleChoose = (values) => {
          const { singer } = values;
          onChoose([...singer]);
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$5["singer-choose"], children: loading ? /* @__PURE__ */ jsxRuntimeExports.jsx(Spin, { tip: "正在加载中" }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Form,
          {
            form: formRef,
            onFinish: handleChoose,
            className: styles$5["singer-choose-form"],
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { name: "singer", label: "歌手", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Select,
                {
                  mode: "multiple",
                  placeholder: "请选择歌手",
                  allowClear: true,
                  className: styles$5["select"],
                  filterOption: (input, option) => {
                    var _a;
                    return ((_a = option.name) == null ? void 0 : _a.toLowerCase().indexOf(input.toLowerCase())) >= 0;
                  },
                  options: renderSingerList,
                  getPopupContainer: (trigger) => trigger.parentNode
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { style: { marginBottom: 0 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$5["btn-group"], children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { type: "primary", htmlType: "submit", children: "选择" }) }) })
            ]
          }
        ) });
      }
      const SearchForm$1 = ({ onSearch, songList: songList2 }) => {
        const [form] = Form.useForm();
        const getUniqueOptions = (key) => {
          const uniqueList = uniqueArrayByKey(songList2, key);
          return uniqueList.map((item) => ({
            label: item[key],
            value: item[key]
          }));
        };
        const handleSearch = () => {
          const values = form.getFieldsValue();
          onSearch(values);
        };
        const handleReset = () => {
          form.resetFields();
          onSearch({});
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Form, { form, style: { marginBottom: 16 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Space, { wrap: true, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { name: "name", style: { marginBottom: 0, minWidth: 200 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Select,
            {
              mode: "multiple",
              allowClear: true,
              showSearch: true,
              placeholder: "歌名",
              maxTagCount: "responsive",
              options: getUniqueOptions("name"),
              filterOption: (input, option) => ((option == null ? void 0 : option.label) ?? "").toLowerCase().includes(input.toLowerCase())
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { name: "artists", style: { marginBottom: 0, minWidth: 200 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Select,
            {
              mode: "multiple",
              allowClear: true,
              showSearch: true,
              placeholder: "歌手",
              maxTagCount: "responsive",
              options: getUniqueOptions("artists"),
              filterOption: (input, option) => ((option == null ? void 0 : option.label) ?? "").toLowerCase().includes(input.toLowerCase())
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { name: "album", style: { marginBottom: 0, minWidth: 200 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Select,
            {
              mode: "multiple",
              allowClear: true,
              showSearch: true,
              placeholder: "专辑",
              maxTagCount: "responsive",
              options: getUniqueOptions("album"),
              filterOption: (input, option) => ((option == null ? void 0 : option.label) ?? "").toLowerCase().includes(input.toLowerCase())
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { type: "primary", onClick: handleSearch, children: "搜索" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: handleReset, children: "重置" })
        ] }) });
      };
      const UploadProgress = forwardRef(
        ({ uploadedList, total, uploadFailedSongList, onClose }, ref) => {
          const [visible, setVisible] = useState(false);
          const open = () => setVisible(true);
          const close = () => {
            setVisible(false);
            onClose == null ? void 0 : onClose();
          };
          const reset = () => {
          };
          useImperativeHandle(ref, () => ({
            open,
            close,
            reset
          }));
          const uploadedCount = uploadedList.length;
          const failedCount = uploadFailedSongList.length;
          const percent = Math.floor((uploadedCount + failedCount) / total * 100);
          const isCompleted = uploadedCount + failedCount === total;
          const songListRef = useRef(null);
          useEffect(() => {
            let timeId;
            if (visible) {
              timeId = setInterval(() => {
                var _a;
                (_a = songListRef.current) == null ? void 0 : _a.scrollTo({
                  top: songListRef.current.scrollHeight,
                  behavior: "smooth"
                });
              }, 500);
            }
            return () => {
              clearInterval(timeId);
            };
          }, [visible]);
          return /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Modal,
            {
              title: "上传进度",
              open: visible,
              onCancel: close,
              width: 520,
              maskClosable: false,
              footer: null,
              centered: true,
              className: styles$5.uploadModal,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5.progressSection, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Progress,
                    {
                      type: "circle",
                      percent,
                      status: isCompleted ? failedCount > 0 ? "exception" : "success" : "active",
                      format: () => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5.progressInfo, children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$5.percentage, children: [
                          percent,
                          "%"
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$5.count, children: [
                          uploadedCount + failedCount,
                          "/",
                          total
                        ] })
                      ] })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5.statsContainer, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$5.statsItem, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Tag, { color: "success", className: styles$5.statsTag, children: [
                      "成功：",
                      uploadedCount
                    ] }) }),
                    failedCount > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$5.statsItem, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Tag, { color: "error", className: styles$5.statsTag, children: [
                      "失败：",
                      failedCount
                    ] }) })
                  ] })
                ] }),
                (uploadedList.length > 0 || uploadFailedSongList.length > 0) && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5.songList, ref: songListRef, children: [
                  uploadFailedSongList.map((song2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5.songItem, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5.songInfo, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$5.songName, children: song2.name }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$5.artistName, children: [
                        "- ",
                        song2.artists
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { color: "error", children: "上传失败" })
                  ] }, song2.id)),
                  uploadedList.map((song2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5.songItem, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5.songInfo, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$5.songName, children: song2.name }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$5.artistName, children: [
                        "- ",
                        song2.artists
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { color: "success", children: "已上传" })
                  ] }, song2.id))
                ] })
              ]
            }
          );
        }
      );
      const UploadStats = memo(({ selectedRows, filteredSongList }) => {
        const selectedSize = selectedRows.reduce((acc, cur) => acc + cur.size, 0);
        const totalSize = filteredSongList.reduce((acc, cur) => acc + cur.size, 0);
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5["upload-stats"], children: [
          "已选择",
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Tag, { color: "blue", style: { margin: 0 }, children: [
            selectedRows.length,
            " 首"
          ] }),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$5["size-text"], children: +selectedSize && formatFileSize(selectedSize) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$5.divider, children: "/" }),
          "共",
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Tag, { color: "green", style: { margin: 0 }, children: [
            filteredSongList.length,
            " 首"
          ] }),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$5["size-text"], children: formatFileSize(totalSize) })
        ] });
      });
      UploadStats.displayName = "UploadStats";
      function UploadList({ singerList }) {
        const [songList2, setSongList] = useState([]);
        const [loading, setLoading] = useState(false);
        const getSongList = async (ids) => {
          try {
            setLoading(true);
            if (!(ids == null ? void 0 : ids.length)) return message.error("请先选择歌手");
            const proArr = ids.map(async (id) => {
              const res = await getCDNConfig(id);
              return res.data;
            });
            let allConfig = await Promise.all(proArr);
            allConfig = allConfig.flat();
            const allConfigMap = Object.fromEntries(
              allConfig.map((item) => [item.id, item])
            );
            console.log("allConfig", allConfig);
            const allInfo = await getSongInfoList(allConfig.map((item) => item.id));
            const songList22 = [];
            allInfo.map(({ privileges, songs: songs2 }) => {
              privileges.forEach((p2) => {
                var _a;
                const otherInfo = allConfigMap[p2.id];
                const defaultItem = {
                  ...otherInfo,
                  id: p2.id,
                  name: "未知",
                  album: "未知",
                  albumid: 0,
                  artists: "未知",
                  tns: "",
                  //翻译
                  dt: formatDuration(0),
                  filename: "未知." + (otherInfo == null ? void 0 : otherInfo.ext),
                  picUrl: "http://p4.music.126.net/UeTuwE7pvjBpypWLudqukA==/3132508627578625.jpg",
                  isNoCopyright: p2.st < 0,
                  isVIP: false,
                  isPay: false,
                  uploaded: p2.cs,
                  needMatch: otherInfo.name == void 0
                };
                const songsMap = Object.fromEntries(songs2.map((s) => [s.id, s]));
                const song2 = songsMap[p2.id];
                if (song2) {
                  Object.assign(defaultItem, song2, {
                    album: getAlbumTextInSongDetail(song2),
                    artists: getArtistTextInSongDetail(song2),
                    dt: formatDuration(song2.dt),
                    filename: `${getArtistTextInSongDetail(song2)} - ${song2.name}.${otherInfo.ext}`,
                    picUrl: ((_a = song2.al) == null ? void 0 : _a.picUrl) || "http://p4.music.126.net/UeTuwE7pvjBpypWLudqukA==/3132508627578625.jpg",
                    isVIP: song2.fee === 1,
                    isPay: song2.fee === 4
                  });
                }
                if (otherInfo.name) {
                  defaultItem.name = otherInfo.name;
                  defaultItem.album = otherInfo.al;
                  defaultItem.artists = otherInfo.ar;
                  defaultItem.filename = `${defaultItem.artists} - ${defaultItem.name}.${otherInfo.ext}`;
                }
                songList22.push(defaultItem);
              });
            });
            setSongList(songList22);
            setFilteredSongList(songList22);
          } catch (error) {
            console.log("error", error);
            message.error("获取歌曲信息失败", error.message);
          } finally {
            setLoading(false);
          }
        };
        useEffect(() => {
          getSongList(singerList);
        }, [singerList]);
        const [filteredSongList, setFilteredSongList] = useState([]);
        const handleSearch = (values) => {
          const { name: name2, artists, album } = values;
          const filtered = songList2.filter((song2) => {
            const nameMatch = !(name2 == null ? void 0 : name2.length) || name2.some((n2) => song2.name.toLowerCase().includes(n2.toLowerCase()));
            const artistMatch = !(artists == null ? void 0 : artists.length) || artists.some(
              (a) => song2.artists.toLowerCase().includes(a.toLowerCase())
            );
            const albumMatch = !(album == null ? void 0 : album.length) || album.some((a) => song2.album.toLowerCase().includes(a.toLowerCase()));
            return nameMatch && artistMatch && albumMatch;
          });
          setFilteredSongList(filtered);
        };
        const [selectedRows, setSelectedRows] = useState([]);
        const rowSelection = {
          type: "checkbox",
          fixed: true,
          getCheckboxProps: (record) => ({
            disabled: record.uploaded
          }),
          onChange: (selectedRowKeys, selectedRows2) => {
            setSelectedRows(selectedRows2);
          }
        };
        const handleUpload = async (record) => {
          try {
            setFilteredSongList((songList22) => {
              return songList22.map((song2) => {
                if (song2.id === record.id) song2.uploading = true;
                return song2;
              });
            });
            const res = await uploadSong(record);
            msgSuccess("上传成功");
            getSongList(singerList);
          } catch (error) {
            console.log("error", error);
          } finally {
            setFilteredSongList((songList22) => {
              return songList22.map((song2) => {
                if (song2.id === record.id) song2.uploading = false;
                return song2;
              });
            });
          }
        };
        const columns = [
          // 上传状态
          {
            title: "上传状态",
            dataIndex: "uploaded",
            key: "uploaded",
            width: 140,
            align: "center",
            filters: [
              { text: "已上传", value: true },
              { text: "未上传", value: false }
            ],
            onFilter: (value2, record) => record.uploaded === value2,
            defaultFilterValue: [false],
            render: (_, record) => {
              if (record.uploaded) return /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { color: "success", children: "已上传" });
              return /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "primary",
                  size: "small",
                  onClick: () => handleUpload(record),
                  loading: record.uploading,
                  children: "上传"
                }
              );
            }
          },
          {
            title: "歌曲",
            dataIndex: "name",
            key: "name",
            width: 200,
            sorter: (a, b) => {
              var _a;
              return (_a = a.name) == null ? void 0 : _a.localeCompare(b.name);
            },
            sortDirections: ["ascend", "descend"],
            render: (text2, record) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { style: { display: "flex", alignItems: "center", gap: "8px" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "img",
                {
                  src: record.picUrl,
                  alt: text2,
                  style: { width: "40px", height: "40px", borderRadius: "4px" }
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: text2 }),
                record.tns && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { color: "#666", fontSize: "12px" }, children: record.tns })
              ] })
            ] })
          },
          {
            title: "艺术家",
            dataIndex: "artists",
            key: "artists",
            width: 180,
            sorter: (a, b) => {
              var _a;
              return (_a = a.artists) == null ? void 0 : _a.localeCompare(b.artists);
            },
            sortDirections: ["ascend", "descend"],
            ellipsis: true
          },
          {
            title: "专辑",
            dataIndex: "album",
            key: "album",
            width: 160,
            sorter: (a, b) => {
              var _a;
              return (_a = a.album) == null ? void 0 : _a.localeCompare(b.album);
            },
            sortDirections: ["ascend", "descend"],
            defaultSortOrder: "descend",
            ellipsis: true
          },
          {
            title: "时长",
            dataIndex: "dt",
            key: "dt",
            width: 80,
            sorter: (a, b) => {
              var _a;
              return (_a = a.dt) == null ? void 0 : _a.localeCompare(b.dt);
            },
            sortDirections: ["ascend", "descend"]
          },
          {
            title: "音质",
            key: "quality",
            width: 100,
            render: (_, record) => {
              var _a;
              const quality = [];
              if (record.sq) quality.push("无损");
              if (((_a = record.h) == null ? void 0 : _a.br) >= 32e4) quality.push("320K");
              return quality.join(" / ") || "标准";
            }
          },
          {
            title: "备注",
            key: "status",
            width: 120,
            render: (_, record) => {
              if (record.isNoCopyright) return /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { color: "error", children: "无版权" });
              if (record.isVIP) return /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { color: "warning", children: "VIP" });
              if (record.isPay) return /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { color: "success", children: "付费" });
              if (record.uploaded) return /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { color: "processing", children: "已上传" });
            }
          },
          // 歌曲大小
          {
            title: "歌曲大小",
            dataIndex: "size",
            key: "size",
            width: 120,
            render: (size2) => formatFileSize(size2)
          },
          // 歌曲后缀
          {
            title: "歌曲后缀",
            dataIndex: "ext",
            key: "ext",
            width: 100,
            render: (ext) => /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { color: "blue", children: ext })
          }
        ];
        const handleTableChange = (pagination, filters, sorter) => {
          setFilteredSongList((songList22) => {
            return songList22.sort((a, b) => {
              var _a;
              const order = sorter.order === "ascend" ? 1 : -1;
              return order * ((_a = a[sorter.columnKey]) == null ? void 0 : _a.localeCompare(b[sorter.columnKey]));
            });
          });
        };
        const uploadProgressRef = useRef(null);
        const [uploadedSongList, setUploadedSongList] = useState([]);
        const [uploadFailedSongList, setUploadFailedSongList] = useState([]);
        const [toUploadingSongList, setToUploadingSongList] = useState([]);
        const [uploading, setUploading] = useState(false);
        const resetData = () => {
          setUploadedSongList([]);
          setToUploadingSongList([]);
          setUploadFailedSongList([]);
        };
        const handleBatchUpload = async (songs2) => {
          var _a;
          try {
            if (uploading) return;
            resetData();
            setUploading(true);
            console.log("将要批量上传的选中的歌曲", songs2);
            const uploadSongList = filteredSongList.filter((song2) => !song2.uploaded);
            console.log("uploadSongList", uploadSongList);
            setToUploadingSongList(uploadSongList);
            await UploadConfirm({
              total: songs2.length,
              uploaded: 0,
              toUpload: uploadSongList
            });
            if (!uploadSongList.length) return msgError("没有可上传的歌曲");
            (_a = uploadProgressRef.current) == null ? void 0 : _a.open();
            const tasks = uploadSongList.map((song2) => async () => {
              try {
                const res = await uploadSong(song2);
                song2.uploaded = true;
                setUploadedSongList((list) => [...list, song2]);
                return res;
              } catch (error) {
                song2.uploaded = true;
                setUploadFailedSongList((list) => [...list, song2]);
                return error;
              }
            });
            const results = await promiseLimit(tasks);
            getSongList(singerList);
            const successCount = results.filter((r) => !(r instanceof Error)).length;
            const failedCount = results.length - successCount;
            msgSuccess(`上传完成: 成功${successCount}首，失败${failedCount}首`);
          } catch (error) {
            console.log("error", error);
          } finally {
            setUploading(false);
          }
        };
        const handleUploadAll = async () => {
          handleBatchUpload(filteredSongList);
        };
        const handleUploadSelected = async () => {
          handleBatchUpload(selectedRows);
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          (singerList == null ? void 0 : singerList.length) ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5["upload-list"], children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(SearchForm$1, { onSearch: handleSearch, songList: songList2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Table,
              {
                rowSelection,
                dataSource: filteredSongList,
                columns,
                scroll: { y: 400, x: 1e3 },
                size: "small",
                loading,
                rowKey: ({ artists, id, name: name2 }) => name2 + artists + id,
                onChange: handleTableChange
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5["upload-footer"], children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                UploadStats,
                {
                  selectedRows,
                  filteredSongList
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "primary",
                  onClick: () => handleUploadSelected(),
                  disabled: !selectedRows.length,
                  loading: uploading,
                  children: "批量上传"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "primary",
                  onClick: () => handleUploadAll(),
                  loading: uploading,
                  children: "全部上传"
                }
              )
            ] })
          ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(
            Empty,
            {
              description: "请先选择歌手",
              style: {
                height: 400,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center"
              }
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            UploadProgress,
            {
              ref: uploadProgressRef,
              total: toUploadingSongList.length,
              uploadedList: uploadedSongList,
              uploadFailedSongList
            }
          )
        ] });
      }
      const UploadConfirm = ({ total, uploaded, toUpload }) => {
        return confirm(
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5["upload-confirm"], children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5["confirm-item"], children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$5.label, children: "总计歌曲：" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$5.value, children: [
                total,
                " 首"
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5["confirm-item"], children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$5.label, children: "已上传：" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$5.value, children: [
                uploaded,
                " 首"
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5["confirm-item"], children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$5.label, children: "待上传：" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$5.value, children: [
                toUpload.length,
                " 首",
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$5.size, children: [
                  "（",
                  formatFileSize(toUpload.reduce((acc, cur) => acc + cur.size, 0)),
                  "）"
                ] })
              ] })
            ] })
          ] }),
          "上传歌曲"
        );
      };
      const { TabPane } = Tabs;
      function QuickUpload(props, ref) {
        const [visible, setVisible] = useState(false);
        const open = () => {
          reset();
          getSingerList();
          setVisible(true);
        };
        const close = () => setVisible(false);
        const reset = () => {
          setSingerList([]);
        };
        const [currentTab, setCurrentTab] = useState("1");
        const [singerList, setSingerList] = useState([]);
        const [loading, setLoading] = useState(false);
        const getSingerList = async () => {
          try {
            setLoading(true);
            const res = await getArtists();
            const res2 = await getArtists2();
            console.log("res2", res2);
            const list = [...new Map([...res2, ...res].map((item) => [item.id, item])).values()];
            console.log("list", list);
            setSingerList(list);
          } catch (error) {
            console.log("error", error);
          } finally {
            setLoading(false);
          }
        };
        const [chooseList, setChooseList] = useState([]);
        const handleChoose = (value2) => {
          console.log(value2);
          setChooseList(value2);
          setCurrentTab("2");
        };
        useImperativeHandle(ref, () => ({
          open,
          close,
          reset
        }));
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Modal,
          {
            title: "云盘快速上传",
            width: 900,
            centered: true,
            open: visible,
            footer: null,
            onCancel: close,
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Tabs,
              {
                defaultActiveKey: "1",
                activeKey: currentTab,
                className: styles$5["quick-upload-tabs"],
                onChange: (key) => setCurrentTab(key),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    TabPane,
                    {
                      tab: "歌曲选择",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        SingerChoose,
                        {
                          singerList,
                          loading,
                          onChoose: handleChoose
                        }
                      )
                    },
                    "1"
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    TabPane,
                    {
                      tab: "上传列表",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(UploadList, { singerList: chooseList })
                    },
                    "2"
                  )
                ]
              }
            )
          }
        );
      }
      const QuickUpload$1 = forwardRef(QuickUpload);
      const QualityUpgrade = forwardRef((props, ref) => {
        const [visible, setVisible] = useState(false);
        const open = () => setVisible(true);
        const close = () => setVisible(false);
        const reset = () => {
        };
        useImperativeHandle(ref, () => ({
          open,
          close,
          reset
        }));
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Modal,
          {
            title: "云盘音质提升",
            open: visible,
            onCancel: close,
            width: 800,
            footer: null
          }
        );
      });
      const dragger = "_dragger_ad6cg_12";
      const divider$1 = "_divider_ad6cg_56";
      const styles$4 = {
        "local-upload": "_local-upload_ad6cg_1",
        "upload-section": "_upload-section_ad6cg_6",
        dragger,
        "upload-icon": "_upload-icon_ad6cg_26",
        "upload-text": "_upload-text_ad6cg_30",
        "upload-hint": "_upload-hint_ad6cg_34",
        "file-list": "_file-list_ad6cg_39",
        "upload-stats": "_upload-stats_ad6cg_49",
        "size-text": "_size-text_ad6cg_53",
        divider: divider$1
      };
      const { Dragger } = Upload;
      const LocalUpload = forwardRef((props, ref) => {
        const [visible, setVisible] = useState(false);
        const [fileList, setFileList] = useState([]);
        const open = () => setVisible(true);
        const close = () => setVisible(false);
        const reset = () => setFileList([]);
        useImperativeHandle(ref, () => ({
          open,
          close,
          reset
        }));
        const [loading, setLoading] = useState(false);
        const handleUpload = async () => {
          try {
            setLoading(true);
            const uploadPromises = fileList.map((file) => async () => {
              if (file.status === "done") {
                return;
              }
              file.status = "uploading";
              const res2 = await uploadLocalSong(file);
              file.status = "done";
              setFileList((prev) => [...prev]);
              return res2;
            });
            const res = await promiseLimit(uploadPromises, 5);
            console.log("res", res);
          } catch (error) {
            console.log("error", error);
          } finally {
            setLoading(false);
          }
        };
        const columns = [
          {
            title: "文件名",
            dataIndex: "name",
            key: "name"
          },
          {
            title: "大小",
            dataIndex: "size",
            key: "size",
            render: (size2) => `${(size2 / 1024 / 1024).toFixed(2)} MB`
          },
          {
            title: "状态",
            dataIndex: "status",
            key: "status",
            render: (status, record) => {
              if (status === "done") {
                return /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Progress,
                  {
                    percent: 100,
                    size: "small",
                    status: "success"
                  }
                );
              }
              if (status === "error") {
                return /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Progress,
                  {
                    percent: record.progress || 0,
                    size: "small",
                    status: "exception"
                  }
                );
              }
              if (status === "uploading") {
                return /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Progress,
                  {
                    percent: record.progress || 0,
                    size: "small",
                    status: "active"
                  }
                );
              }
              return /* @__PURE__ */ jsxRuntimeExports.jsx(
                Progress,
                {
                  percent: 0,
                  size: "small"
                }
              );
            }
          }
        ];
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Modal,
          {
            title: "云盘本地上传",
            open: visible,
            onCancel: close,
            onOk: handleUpload,
            confirmLoading: loading,
            centered: true,
            width: 1e3,
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$4["local-upload"], children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$4["upload-section"], children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                Dragger,
                {
                  className: styles$4.dragger,
                  multiple: true,
                  fileList,
                  beforeUpload: (file) => {
                    setFileList((prev) => [...prev, file]);
                    return false;
                  },
                  showUploadList: false,
                  accept: ".mp3,.flac,.wav,.m4a",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: styles$4["upload-icon"], children: /* @__PURE__ */ jsxRuntimeExports.jsx(InboxOutlined, {}) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: styles$4["upload-text"], children: "点击或拖拽文件到此区域上传" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: styles$4["upload-hint"], children: "支持 mp3, flac, wav, m4a 格式的音频文件" })
                  ]
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$4["file-list"], children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Table,
                  {
                    columns,
                    dataSource: fileList,
                    rowKey: (file) => file.uid || file.name,
                    scroll: { y: 300 },
                    pagination: false
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$4["upload-stats"], children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                    "共 ",
                    fileList.length,
                    " 个文件"
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$4.divider, children: "|" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$4["size-text"], children: [
                    "总大小：",
                    (fileList.reduce((acc, file) => acc + file.size, 0) / 1024 / 1024).toFixed(2),
                    " MB"
                  ] })
                ] })
              ] })
            ] })
          }
        );
      });
      const VipSongA = forwardRef((props, ref) => {
        const [visible, setVisible] = useState(false);
        const open = () => setVisible(true);
        const close = () => setVisible(false);
        const reset = () => {
        };
        useImperativeHandle(ref, () => ({
          open,
          close,
          reset
        }));
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Modal,
          {
            title: "网页VIP歌曲A",
            open: visible,
            onCancel: close,
            width: 800,
            footer: null
          }
        );
      });
      const VipSongB = forwardRef((props, ref) => {
        const [visible, setVisible] = useState(false);
        const open = () => setVisible(true);
        const close = () => setVisible(false);
        const reset = () => {
        };
        useImperativeHandle(ref, () => ({
          open,
          close,
          reset
        }));
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Modal,
          {
            title: "网页VIP歌曲B",
            open: visible,
            onCancel: close,
            width: 800,
            footer: null
          }
        );
      });
      const CloudExport = forwardRef((props, ref) => {
        const [visible, setVisible] = useState(false);
        const open = () => setVisible(true);
        const close = () => setVisible(false);
        const reset = () => {
        };
        useImperativeHandle(ref, () => ({
          open,
          close,
          reset
        }));
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Modal,
          {
            title: "云盘导出",
            open: visible,
            onCancel: close,
            footer: null,
            centered: true
          }
        );
      });
      const CloudImport = forwardRef((props, ref) => {
        const [visible, setVisible] = useState(false);
        const open = () => setVisible(true);
        const close = () => setVisible(false);
        const reset = () => {
        };
        useImperativeHandle(ref, () => ({
          open,
          close,
          reset
        }));
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Modal,
          {
            title: "云盘导入",
            open: visible,
            onCancel: close,
            footer: null
          }
        );
      });
      const TestModal = forwardRef((props, ref) => {
        const [visible, setVisible] = useState(false);
        const open = () => setVisible(true);
        const close = () => setVisible(false);
        const reset = () => {
        };
        useImperativeHandle(ref, () => ({
          open,
          close,
          reset
        }));
        const [pageData, setPageData] = useState({
          limit: 500,
          offset: 0
        });
        const handleGetCloudData = async () => {
          console.log("获取云盘数据");
          try {
            const res = await getCloudData(pageData.limit, pageData.offset);
            console.log("res", res);
          } catch (error) {
            console.log("error", error);
          }
        };
        const [songListName, setSongListName] = useState("");
        const handleCreateSongList = async () => {
          console.log("新建歌单");
          try {
            const res = await createPlaylist(songListName);
            console.log("res", res);
          } catch (error) {
            console.log("error", error);
          }
        };
        const [addInfo, setAddInfo] = useState({
          songId: "185620",
          playlistId: "12999288729"
        });
        const handleAddSong = async () => {
          console.log("添加歌曲");
          try {
            const res = await addSongToPlaylist(addInfo.playlistId, [addInfo.songId]);
            console.log("res", res);
          } catch (error) {
            console.log("error", error);
          }
        };
        const [userId, setUserId] = useState("12999288729");
        const handleGetPlaylistList = async () => {
          console.log("获取歌单列表");
          try {
            const res = await getPlaylistList(userId);
            console.log("res", res);
          } catch (error) {
            console.log("error", error);
          }
        };
        const [songId2, setSongId] = useState("2608471890");
        const handleGetSongUrl = async () => {
          console.log("获取歌曲URL");
          try {
            const res = await getSongUrl([songId2]);
            console.log("res", res);
            if (res.code === 200) {
              const url = res.data[0].url;
              await navigator.clipboard.writeText(url);
              msgSuccess("获取成功,已复制到剪切板");
            }
          } catch (error) {
            console.log("error", error);
          }
        };
        const handleDeleteCloudSong = async () => {
          console.log("删除云盘歌曲");
          try {
            const res = await deleteCloudSong([songId2]);
            console.log("res", res);
          } catch (error) {
            console.log("error", error);
          }
        };
        const [albumId, setAlbumId] = useState("242274622");
        const handleGetAlbumSongList = async () => {
          console.log("获取专辑歌曲列表");
          try {
            const res = await getAlbumSongList(albumId);
            console.log("res", res);
          } catch (error) {
            console.log("error", error);
          }
        };
        const [artistId, setArtistId] = useState("3684");
        const handleGetArtistTopSongList = async () => {
          console.log("获取歌手歌曲列表");
          try {
            const res = await getArtistTopSongList(artistId);
            console.log("res", res);
          } catch (error) {
            console.log("error", error);
          }
        };
        const handleGetArtistAlbum = async () => {
          console.log("获取歌手专辑");
          try {
            const res = await getArtistAlbumList(artistId);
            console.log("res", res);
          } catch (error) {
            console.log("error", error);
          }
        };
        const handleGetArtistAllSongList = async () => {
          console.log("获取歌手全部歌曲");
          try {
            const res = await getArtistAllSongList(artistId);
            console.log("res", res);
          } catch (error) {
            console.log("error", error);
          }
        };
        const handleQrLogin = async () => {
          console.log("二维码登录");
          try {
            const keyRes = await getQrKey();
            if (keyRes.code !== 200) return msgError("获取二维码key失败");
            const key = keyRes.unikey;
            console.log("key", key);
            const qrcode2 = await getQrCode(key);
            const qrImg = document.createElement("img");
            qrImg.src = qrcode2;
            qrImg.style.width = "200px";
            qrImg.style.height = "200px";
            document.getElementById("qrcode-container").innerHTML = "";
            document.getElementById("qrcode-container").appendChild(qrImg);
            const timeOutTime = Date.now() + 2 * 60 * 1e3;
            while (Date.now() < timeOutTime) {
              const qrStatusRes = await getQrStatus(key);
              console.log("qrStatus", qrStatusRes);
              const { code } = qrStatusRes.response;
              if (code === 801) {
                console.log("等待扫码");
              } else if (code === 802) {
                console.log("授权中");
              } else if (code === 803) {
                console.log("授权成功");
                console.log("qrStatusRes", qrStatusRes);
                break;
              } else if (code === 800) {
                console.log("不存在或失效");
                break;
              }
              await sleep(1e3);
            }
          } catch (error) {
            console.log("error", error);
          }
        };
        const [fileList, setFileList] = useState([]);
        const handleUploadLocalSong = async () => {
          try {
            console.log("fileList", fileList);
            if (!fileList.length) return msgError("请选择文件");
            for (let i = 0; i < fileList.length; i++) {
              const file = fileList[i];
              await uploadLocalSong(file);
            }
          } catch (error) {
            console.log("error", error);
          }
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Modal,
          {
            title: "测试Modal",
            open: visible,
            onCancel: close,
            width: 800,
            footer: null,
            centered: true,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Form, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { label: "获取云盘数据", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Space, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      placeholder: "limit",
                      style: { width: 100 }
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      placeholder: "offset",
                      style: { width: 100 }
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      onClick: handleGetCloudData,
                      children: "获取云盘数据"
                    }
                  )
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { label: "新建歌单", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Space, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      placeholder: "请输入歌单名称",
                      value: songListName,
                      onChange: (e) => setSongListName(e.target.value)
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      onClick: handleCreateSongList,
                      children: "新建歌单"
                    }
                  )
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { label: "添加歌曲", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Space, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      placeholder: "请输入歌单id",
                      value: addInfo.playlistId,
                      onChange: (e) => setAddInfo({ ...addInfo, playlistId: e.target.value })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      placeholder: "请输入歌曲id",
                      value: addInfo.songId,
                      onChange: (e) => setAddInfo({ ...addInfo, songId: e.target.value })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      onClick: handleAddSong,
                      children: "添加歌曲"
                    }
                  )
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { label: "获取歌单列表", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Space, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      placeholder: "请输入用户id",
                      value: userId,
                      onChange: (e) => setUserId(e.target.value)
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      onClick: handleGetPlaylistList,
                      children: "获取歌单列表"
                    }
                  )
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { label: "获取歌曲URL", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Space, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      placeholder: "请输入歌曲id",
                      value: songId2,
                      onChange: (e) => setSongId(e.target.value)
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      onClick: handleGetSongUrl,
                      children: "获取歌曲URL"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      onClick: handleDeleteCloudSong,
                      children: "删除云盘歌曲"
                    }
                  )
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { label: "获取专辑歌曲列表", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Space, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      placeholder: "请输入专辑id",
                      value: albumId,
                      onChange: (e) => setAlbumId(e.target.value)
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      onClick: handleGetAlbumSongList,
                      children: "获取专辑歌曲列表"
                    }
                  )
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { label: "获取歌手歌曲列表", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Space, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      placeholder: "请输入歌手id",
                      value: artistId,
                      onChange: (e) => setArtistId(e.target.value)
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      onClick: handleGetArtistTopSongList,
                      children: "获取歌手热门歌曲列表"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      onClick: handleGetArtistAlbum,
                      children: "获取歌手专辑"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      onClick: handleGetArtistAllSongList,
                      children: "获取歌手全部歌曲"
                    }
                  )
                ] }) })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Form.Item, { label: "二维码登录", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { id: "qrcode-container" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "primary",
                    onClick: handleQrLogin,
                    children: "二维码登录"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { label: "上传本地歌曲到云盘", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Space, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Upload,
                  {
                    fileList,
                    accept: ".flac,.mp3,.wav,.aac,.m4a,.ogg,.wma",
                    beforeUpload: (file) => {
                      setFileList([...fileList, file]);
                      return false;
                    },
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { icon: /* @__PURE__ */ jsxRuntimeExports.jsx(UploadOutlined, {}), children: "Select File" })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "primary",
                    onClick: handleUploadLocalSong,
                    children: "上传本地歌曲到云盘"
                  }
                )
              ] }) })
            ]
          }
        );
      });
      const songInfoColumn = "_songInfoColumn_19jjf_1";
      const songCover = "_songCover_19jjf_6";
      const songInfo = "_songInfo_19jjf_1";
      const songName = "_songName_19jjf_15";
      const songId = "_songId_19jjf_24";
      const footer = "_footer_19jjf_29";
      const actions = "_actions_19jjf_37";
      const stats = "_stats_19jjf_42";
      const size = "_size_19jjf_47";
      const divider = "_divider_19jjf_50";
      const playlist = "_playlist_19jjf_58";
      const autoAddContent = "_autoAddContent_19jjf_62";
      const title = "_title_19jjf_62";
      const statsWrapper = "_statsWrapper_19jjf_66";
      const statsContent = "_statsContent_19jjf_69";
      const label = "_label_19jjf_76";
      const value = "_value_19jjf_79";
      const listHeader = "_listHeader_19jjf_84";
      const listWrapper = "_listWrapper_19jjf_90";
      const listItem = "_listItem_19jjf_111";
      const itemName = "_itemName_19jjf_127";
      const itemCount = "_itemCount_19jjf_133";
      const deleteConfirmation = "_deleteConfirmation_19jjf_138";
      const count = "_count_19jjf_146";
      const songs = "_songs_19jjf_149";
      const songItem = "_songItem_19jjf_160";
      const warning = "_warning_19jjf_171";
      const text = "_text_19jjf_178";
      const icon = "_icon_19jjf_185";
      const styles$3 = {
        songInfoColumn,
        songCover,
        songInfo,
        songName,
        songId,
        footer,
        actions,
        stats,
        size,
        divider,
        playlist,
        autoAddContent,
        title,
        statsWrapper,
        statsContent,
        label,
        value,
        listHeader,
        listWrapper,
        listItem,
        itemName,
        itemCount,
        deleteConfirmation,
        count,
        songs,
        songItem,
        warning,
        text,
        icon
      };
      const PlayList = (props, ref) => {
        const [visible, setVisible] = useState(false);
        const [mode2, setMode] = useState("edit");
        const isSelect = mode2 === "select";
        const open = (mode22) => {
          reset();
          if (mode22) {
            setMode(mode22);
          }
          setVisible(true);
          handleGetPlayList();
        };
        const close = () => {
          setVisible(false);
          setPlayList([]);
        };
        const reset = () => {
          setPlayList([]);
          res.current = null;
          setMode("add");
          setSelectedRows([]);
          setName("");
          setCreateModalVisible(false);
        };
        const res = useRef(null);
        const submit = () => {
          return new Promise((resolve, reject) => {
            res.current = resolve;
          });
        };
        useImperativeHandle(ref, () => ({
          open,
          close,
          submit
        }));
        const [loading, setLoading] = useState(false);
        const [playList, setPlayList] = useState([]);
        const handleGetPlayList = async () => {
          setLoading(true);
          try {
            const user = getGUser();
            if (!user) return message.error("请先登录");
            const res2 = await getPlaylistList(user.userId);
            console.log("res", res2);
            if (res2.code === 200) {
              setPlayList((list) => [...list, ...res2.playlist]);
            }
          } catch (error) {
            console.log("error", error);
          } finally {
            setLoading(false);
          }
        };
        const columns = [
          {
            title: "歌单",
            dataIndex: "name",
            key: "name",
            width: 220,
            ellipsis: true,
            render: (text2, record) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { style: { display: "flex", alignItems: "center", gap: "8px" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Image,
                {
                  src: record.coverImgUrl,
                  width: 40,
                  height: 40,
                  style: { borderRadius: "4px" },
                  preview: false
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "div",
                {
                  style: {
                    fontWeight: 500,
                    flex: 1,
                    minWidth: 0,
                    overflow: "hidden",
                    textOverflow: "ellipsis",
                    whiteSpace: "nowrap"
                  },
                  children: text2
                }
              )
            ] })
          },
          {
            title: "歌曲数",
            dataIndex: "trackCount",
            key: "trackCount",
            width: 100,
            align: "right",
            sorter: (a, b) => a.trackCount - b.trackCount,
            sortDirections: ["descend", "ascend"],
            render: (text2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "span",
              {
                style: {
                  color: "#666",
                  fontSize: "13px"
                },
                children: [
                  text2,
                  " 首"
                ]
              }
            )
          },
          {
            title: "创建者",
            dataIndex: ["creator", "nickname"],
            key: "creator",
            width: 150,
            ellipsis: true
          },
          {
            title: "更新时间",
            dataIndex: "updateTime",
            key: "updateTime",
            width: 200,
            render: (text2) => new Date(text2).toLocaleString(),
            sorter: (a, b) => a.updateTime - b.updateTime,
            sortDirections: ["descend", "ascend"]
          },
          {
            title: "播放量",
            dataIndex: "playCount",
            key: "playCount",
            width: 100,
            render: (text2) => {
              const count2 = text2 > 1e4 ? `${(text2 / 1e4).toFixed(1)}万` : text2;
              return /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: count2 });
            },
            sorter: (a, b) => a.playCount - b.playCount,
            sortDirections: ["descend", "ascend"]
          }
        ];
        const [selectedRows, setSelectedRows] = useState([]);
        const rowSelection = {
          type: isSelect ? "radio" : "checkbox",
          selectedRowKeys: selectedRows.map((item) => item.id),
          onSelectAll: () => {
            setTimeout(() => {
              setSelectedRows(playList);
            }, 0);
          },
          onChange: (_, selectedRows2) => {
            setSelectedRows(selectedRows2);
          }
        };
        const handleConfirm = () => {
          var _a;
          if (!selectedRows.length) {
            msgWarning("请选择歌单");
            return;
          }
          if (selectedRows.length !== 1) return msgWarning("只能选择一个歌单");
          (_a = res.current) == null ? void 0 : _a.call(res, selectedRows[0]);
          close();
        };
        const [name2, setName] = useState("");
        const [createModalVisible, setCreateModalVisible] = useState(false);
        const handleCreate = async () => {
          if (!name2.trim()) {
            msgWarning("请输入歌单名称");
            return;
          }
          try {
            const res2 = await createPlaylist(name2.trim());
            if (res2.code === 200) {
              msgSuccess("新建成功");
              handleGetPlayList();
              setName("");
              setCreateModalVisible(false);
            } else {
              msgError("新建失败");
            }
          } catch (error) {
            console.log("error", error);
          }
        };
        const handleDelete = async () => {
          if (!selectedRows.length) {
            msgWarning("请选择要删除的歌单");
            return;
          }
          try {
            await confirm(
              /* @__PURE__ */ jsxRuntimeExports.jsx(DeleteConfirmContent, { playlists: selectedRows }),
              "删除歌单"
            );
            const proArr = selectedRows.map((item) => deletePlaylist(item.id));
            const res2 = await Promise.all(proArr);
            console.log("res", res2);
            msgSuccess("删除成功");
            handleGetPlayList();
            setSelectedRows([]);
          } catch (error) {
            console.log("error", error);
            msgError("删除失败");
          }
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Modal,
            {
              title: "歌单列表",
              open: visible,
              onCancel: close,
              footer: null,
              centered: true,
              width: 800,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Table,
                  {
                    dataSource: playList,
                    columns,
                    rowKey: "id",
                    size: "small",
                    loading,
                    scroll: { y: 400 },
                    rowSelection
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.footer, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    "已选择 ",
                    selectedRows.length,
                    " 个歌单"
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Space, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setCreateModalVisible(true), children: "新建歌单" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Button,
                      {
                        danger: true,
                        disabled: !selectedRows.length,
                        onClick: handleDelete,
                        children: "删除歌单"
                      }
                    ),
                    isSelect && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      Button,
                      {
                        type: "primary",
                        onClick: handleConfirm,
                        disabled: selectedRows.length !== 1,
                        children: [
                          "选择(",
                          selectedRows.length,
                          ")"
                        ]
                      }
                    )
                  ] })
                ] })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Modal,
            {
              title: "新建歌单",
              open: createModalVisible,
              onCancel: () => {
                setCreateModalVisible(false);
                setName("");
              },
              onOk: handleCreate,
              okText: "确定",
              cancelText: "取消",
              centered: true,
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Input,
                {
                  placeholder: "请输入歌单名称",
                  value: name2,
                  onChange: (e) => setName(e.target.value),
                  onPressEnter: handleCreate,
                  autoFocus: true
                }
              )
            }
          )
        ] });
      };
      const DeleteConfirmContent = ({ playlists }) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.autoAddContent, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.statsWrapper, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.title, children: "总计：" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.statsContent, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.label, children: "删除数量：" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.value, children: playlists.length }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.label, children: " 个歌单" })
            ] }) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.listHeader, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.title, children: "即将删除的歌单：" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: styles$3.listWrapper, children: playlists.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: styles$3.listItem, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.itemName, children: item.name }),
              item.trackCount > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$3.itemCount, children: [
                item.trackCount,
                "首"
              ] })
            ] }, item.id)) })
          ] })
        ] });
      };
      const PlayList$1 = forwardRef(PlayList);
      const SearchForm = ({ onSearch, songList: songList2 }) => {
        const [form] = Form.useForm();
        const getUniqueOptions = (key) => {
          const uniqueList = uniqueArrayByKey(
            songList2.map((item) => ({
              ...item,
              name: item.simpleSong.name,
              singer: item.simpleSong.singer
            })),
            key
          );
          return uniqueList.map((item) => ({
            label: item[key],
            value: item[key]
          }));
        };
        const handleSearch = () => {
          const values = form.getFieldsValue();
          onSearch(values);
        };
        const handleReset = () => {
          form.resetFields();
          onSearch({});
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Form, { form, style: { marginBottom: 16 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Space, { wrap: true, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { name: "name", style: { marginBottom: 0, minWidth: 200 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Select,
            {
              mode: "multiple",
              allowClear: true,
              showSearch: true,
              placeholder: "歌名",
              maxTagCount: "responsive",
              options: getUniqueOptions("name"),
              filterOption: (input, option) => ((option == null ? void 0 : option.label) ?? "").toLowerCase().includes(input.toLowerCase())
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { name: "artist", style: { marginBottom: 0, minWidth: 200 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Select,
            {
              mode: "multiple",
              allowClear: true,
              showSearch: true,
              placeholder: "歌手",
              maxTagCount: "responsive",
              options: getUniqueOptions("artist"),
              filterOption: (input, option) => ((option == null ? void 0 : option.label) ?? "").toLowerCase().includes(input.toLowerCase())
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Form.Item, { name: "album", style: { marginBottom: 0, minWidth: 200 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Select,
            {
              mode: "multiple",
              allowClear: true,
              showSearch: true,
              placeholder: "专辑",
              maxTagCount: "responsive",
              options: getUniqueOptions("album"),
              filterOption: (input, option) => ((option == null ? void 0 : option.label) ?? "").toLowerCase().includes(input.toLowerCase())
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { type: "primary", onClick: handleSearch, children: "搜索" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: handleReset, children: "重置" })
        ] }) });
      };
      const Stats = memo(({ selectedRows = [], filteredSongList = [] }) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.stats, children: [
          "已选择 ",
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Tag, { color: "blue", children: [
            selectedRows.length,
            " 首"
          ] }),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.size, children: selectedRows.length > 0 && `${(selectedRows.reduce((acc, cur) => acc + cur.fileSize, 0) / 1024 / 1024).toFixed(2)}MB` }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.divider, children: "/" }),
          "共",
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Tag, { color: "green", children: [
            filteredSongList.length,
            " 首"
          ] }),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.size, children: filteredSongList.length > 0 && `${(filteredSongList.reduce((acc, cur) => acc + cur.fileSize, 0) / 1024 / 1024).toFixed(2)}MB` })
        ] });
      });
      Stats.displayName = "Stats";
      const CloudMusicManager = forwardRef((props, ref) => {
        const [visible, setVisible] = useState(false);
        const open = () => setVisible(true);
        const close = () => setVisible(false);
        const reset = () => {
        };
        useImperativeHandle(ref, () => ({
          open,
          close,
          reset
        }));
        const [songList2, setSongList] = useState([]);
        const [loading, setLoading] = useState(false);
        const getCloudDataList = async () => {
          try {
            setLoading(true);
            const res = await getCloudData(1e4, 0);
            if (res.code === 200) {
              console.log("songList", res.data);
              setSongList(res.data);
              setFilteredSongList(res.data);
            }
          } catch (error) {
            console.log("error", error);
          } finally {
            setLoading(false);
          }
        };
        useEffect(() => {
          if (!visible) return;
          getCloudDataList();
        }, [visible]);
        const [filteredSongList, setFilteredSongList] = useState([]);
        const handleSearch = (values) => {
          console.log("values", values);
          const { name: name2, artist: artist2, album } = values;
          const filtered = songList2.filter((song2) => {
            const nameMatch = !(name2 == null ? void 0 : name2.length) || name2.some(
              (n2) => {
                var _a;
                return (_a = song2.simpleSong.name) == null ? void 0 : _a.toLowerCase().includes(n2.toLowerCase());
              }
            );
            const artistMatch = !(artist2 == null ? void 0 : artist2.length) || artist2.some(
              (a) => song2.artist.toLowerCase().includes(a.toLowerCase())
            );
            const albumMatch = !(album == null ? void 0 : album.length) || album.some((a) => song2.album.toLowerCase().includes(a.toLowerCase()));
            const legacy = song2.simpleSong.al && song2.simpleSong.ar;
            const match = nameMatch && artistMatch && albumMatch && legacy;
            if (!match) {
              console.log("song", song2);
              console.log("nameMatch", nameMatch);
              console.log("artistMatch", artistMatch);
              console.log("albumMatch", albumMatch);
              console.log("legacy", legacy);
            }
            return match;
          });
          setFilteredSongList(filtered);
        };
        const [selectedRows, setSelectedRows] = useState([]);
        const selectedRowKeys = useMemo(
          () => selectedRows.map((item) => item.songId),
          [selectedRows]
        );
        const rowSelection = {
          type: "checkbox",
          fixed: true,
          selectedRowKeys,
          getCheckboxProps: (record) => ({
            disabled: record.uploaded
          }),
          onSelectAll: () => {
            setTimeout(() => {
              setSelectedRows(filteredSongList);
            }, 0);
          },
          onChange: (selectedRowKeys2, selectedRows2) => {
            setSelectedRows(selectedRows2);
          }
        };
        const handleTableChange = (pagination, filters, sorter) => {
          setFilteredSongList((songList22) => {
            return songList22.sort((a, b) => {
              var _a;
              const order = sorter.order === "ascend" ? 1 : -1;
              return order * ((_a = a[sorter.columnKey]) == null ? void 0 : _a.localeCompare(b[sorter.columnKey]));
            });
          });
        };
        const columns = [
          {
            title: "歌名",
            dataIndex: "simpleSong",
            key: "name",
            width: 250,
            sorter: (a, b) => {
              var _a;
              return (_a = a.simpleSong.name) == null ? void 0 : _a.localeCompare(b.simpleSong.name);
            },
            sortDirections: ["ascend", "descend"],
            render: (record) => {
              var _a;
              return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.songInfoColumn, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "img",
                  {
                    src: (_a = record.al) == null ? void 0 : _a.picUrl,
                    alt: record.name,
                    className: styles$3.songCover
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.songInfo, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.songName, children: record.name }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.songId, children: record.id })
                ] })
              ] });
            }
          },
          {
            title: "歌手",
            dataIndex: "simpleSong",
            key: "artists",
            width: 200,
            sorter: (a, b) => {
              var _a, _b;
              const aArtists = (_a = a.simpleSong.ar) == null ? void 0 : _a.map((a2) => a2.name).join(",");
              const bArtists = (_b = b.simpleSong.ar) == null ? void 0 : _b.map((a2) => a2.name).join(",");
              return aArtists == null ? void 0 : aArtists.localeCompare(bArtists);
            },
            sortDirections: ["ascend", "descend"],
            ellipsis: true,
            render: (record) => {
              var _a;
              return (_a = record.ar) == null ? void 0 : _a.map((a) => a.name).join(",");
            }
          },
          {
            title: "专辑",
            dataIndex: "simpleSong",
            key: "album",
            width: 300,
            sorter: (a, b) => {
              var _a, _b, _c;
              return (_c = (_a = a.simpleSong.al) == null ? void 0 : _a.name) == null ? void 0 : _c.localeCompare((_b = b.simpleSong.al) == null ? void 0 : _b.name);
            },
            sortDirections: ["ascend", "descend"],
            defaultSortOrder: "ascend",
            ellipsis: true,
            render: (record) => {
              var _a;
              return (_a = record.al) == null ? void 0 : _a.name;
            }
          },
          {
            title: "大小",
            dataIndex: "fileSize",
            key: "fileSize",
            width: 100,
            sorter: (a, b) => a.fileSize - b.fileSize,
            sortDirections: ["ascend", "descend"],
            render: (size2) => `${(size2 / 1024 / 1024).toFixed(2)}MB`
          },
          {
            title: "比特率",
            dataIndex: "bitrate",
            key: "bitrate",
            width: 100,
            sorter: (a, b) => a.bitrate - b.bitrate,
            sortDirections: ["ascend", "descend"],
            render: (bitrate) => /* @__PURE__ */ jsxRuntimeExports.jsxs(Tag, { color: "blue", children: [
              bitrate,
              "kbps"
            ] })
          },
          {
            title: "上传时间",
            dataIndex: "addTime",
            key: "addTime",
            width: 150,
            sorter: (a, b) => a.addTime - b.addTime,
            sortDirections: ["ascend", "descend"],
            render: (time) => new Date(time).toLocaleString()
          }
        ];
        const [addToPlayListByAlbumLoading, setAddToPlayListByAlbumLoading] = useState(false);
        const handleAddToPlaylistByAlbum = async () => {
          var _a;
          try {
            setAddToPlayListByAlbumLoading(true);
            console.log("自动按专辑添加");
            const albumMap = /* @__PURE__ */ new Map();
            filteredSongList.forEach((song2) => {
              var _a2, _b, _c;
              const { simpleSong } = song2;
              const album = `${((_b = (_a2 = simpleSong.ar) == null ? void 0 : _a2[0]) == null ? void 0 : _b.name) || ""}-${(_c = simpleSong.al) == null ? void 0 : _c.name}`;
              if (!albumMap.has(album)) {
                albumMap.set(album, []);
              }
              albumMap.get(album).push(song2);
            });
            const totalSongs = filteredSongList.length;
            const albums = Array.from(albumMap.entries()).sort(
              ([, songsA], [, songsB]) => songsB.length - songsA.length
            );
            await confirm(
              /* @__PURE__ */ jsxRuntimeExports.jsx(AutoAddContent, { totalSongs, albums }),
              "自动按专辑添加",
              {
                width: "auto"
              }
            );
            const res = await getPlaylistList();
            console.log("res", res);
            if (res.code !== 200) return msgError("获取歌单失败");
            const playlist2 = res.playlist;
            for (const [album, songs2] of albums) {
              try {
                const playlistName = album;
                console.log("playlistName", playlistName, "songs", songs2);
                let playlistId = (_a = playlist2.find((p2) => p2.name === playlistName)) == null ? void 0 : _a.id;
                if (!playlistId) {
                  const truncatedName = truncateString(playlistName, 40);
                  const res3 = await createPlaylist(truncatedName);
                  if (res3.code === 200) {
                    playlistId = res3.id;
                  } else {
                    console.log("res", res3);
                    debugger;
                  }
                  await sleep(1e3);
                }
                const songIds = songs2.map((song2) => song2.songId);
                const res2 = await addSongToPlaylist(playlistId, songIds);
                console.log("res", res2);
                if (res2.code !== 200) {
                  console.log("添加歌曲失败", res2.message || res2.msg);
                }
                await sleep(500);
              } catch (error) {
                console.log("error", error);
              }
            }
            setSelectedRows([]);
            msgSuccess("添加成功");
          } catch (error) {
            console.log("error", error);
          } finally {
            setAddToPlayListByAlbumLoading(false);
          }
        };
        const playListRef = useRef(null);
        const handleAddToPlaylist = async () => {
          try {
            console.log("添加到歌单");
            playListRef.current.open("select");
            const playlist2 = await playListRef.current.submit();
            if (!playlist2) return;
            const songIds = selectedRows.map((item) => item.songId);
            const res = await addSongToPlaylist(playlist2.id, songIds);
            console.log("res", res);
            if (res.code === 200) {
              setSelectedRows([]);
              msgSuccess("添加成功");
            }
          } catch (error) {
            console.log("error", error);
          }
        };
        const handleCreatePlaylist = () => {
          console.log("新建歌单");
          playListRef.current.open();
        };
        const handleDeleteSong = async () => {
          try {
            const confirmContent = /* @__PURE__ */ jsxRuntimeExports.jsx(
              DeleteConfirmation,
              {
                selectedCount: selectedRows.length,
                songNames: selectedRows.map((item) => item.simpleSong.name)
              }
            );
            await confirm(confirmContent, "删除确认");
            const songIds = selectedRows.map((item) => item.songId);
            const res = await deleteCloudSong(songIds);
            console.log("res", res);
            if (res.code === 200) {
              msgSuccess("删除成功");
              reset();
              getCloudDataList();
            }
          } catch (error) {
            console.log("error", error);
          }
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Modal,
          {
            title: "云盘音乐管理",
            open: visible,
            onCancel: close,
            footer: null,
            centered: true,
            width: 900,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(SearchForm, { onSearch: handleSearch, songList: songList2 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Table,
                {
                  rowSelection,
                  dataSource: filteredSongList,
                  columns,
                  scroll: { y: 400, x: 1e3 },
                  size: "small",
                  loading,
                  rowKey: ({ songId: songId2 }) => songId2,
                  onChange: handleTableChange
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.footer, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Stats,
                  {
                    selectedRows,
                    filteredSongList
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.actions, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setSelectedRows(filteredSongList), children: "全部选择" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      onClick: handleAddToPlaylistByAlbum,
                      loading: addToPlayListByAlbumLoading,
                      children: "自动按专辑添加"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      disabled: !selectedRows.length,
                      onClick: handleAddToPlaylist,
                      children: "添加到歌单"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: handleCreatePlaylist, children: "新建歌单" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "primary",
                      danger: true,
                      disabled: !selectedRows.length,
                      onClick: handleDeleteSong,
                      children: "删除歌曲"
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(PlayList$1, { ref: playListRef })
            ]
          }
        );
      });
      const AutoAddContent = ({ totalSongs, albums }) => {
        const handleCopy = () => {
          const text2 = albums.map(([name2, songs2]) => `${name2}（${songs2.length}首）`).join("\n");
          navigator.clipboard.writeText(text2).then(() => {
            message.success("复制成功");
          });
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.autoAddContent, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.statsWrapper, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.title, children: "总计：" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.statsContent, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.label, children: "歌曲数：" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.value, children: totalSongs }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.label, children: " 首" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.label, children: "歌单数：" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.value, children: albums.length }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.label, children: " 个" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.listHeader, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.title, children: "即将创建的歌单：" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "link",
                  size: "small",
                  icon: /* @__PURE__ */ jsxRuntimeExports.jsx(CopyrightOutlined, {}),
                  onClick: handleCopy,
                  children: "复制列表"
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: styles$3.listWrapper, children: albums.map(([name2, songs2]) => /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: styles$3.listItem, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.itemName, children: name2 }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$3.itemCount, children: [
                songs2.length,
                "首"
              ] })
            ] }, name2)) })
          ] })
        ] });
      };
      const DeleteConfirmation = ({ selectedCount, songNames }) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3.deleteConfirmation, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: styles$3.title, children: [
            "您确定要删除以下 ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.count, children: selectedCount }),
            " 首歌曲吗？"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.songs, children: songNames.map((name2, index) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.songItem, children: name2 }, index)) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$3.warning, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: styles$3.text, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3.icon, children: "!" }),
            "注意：此操作不可恢复，删除后歌曲将从您的网易云音乐云盘中永久移除。"
          ] }) })
        ] });
      };
      const container = "_container_18cxg_1";
      const styles$2 = {
        container
      };
      const uploadArea = "_uploadArea_62myb_1";
      const uploadContent = "_uploadContent_62myb_14";
      const uploadIcon = "_uploadIcon_62myb_22";
      const uploadText = "_uploadText_62myb_27";
      const uploadTip = "_uploadTip_62myb_34";
      const styles$1 = {
        uploadArea,
        uploadContent,
        uploadIcon,
        uploadText,
        uploadTip
      };
      const UploadArea = ({ onUpload }) => {
        const handleDragOver = (e) => {
          e.preventDefault();
          e.stopPropagation();
        };
        const handleDrop = (e) => {
          e.preventDefault();
          e.stopPropagation();
          const files = e.dataTransfer.files;
          onUpload == null ? void 0 : onUpload(files);
        };
        const handleFileSelect = (e) => {
          const files = e.target.files;
          onUpload == null ? void 0 : onUpload(files);
          e.target.value = null;
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "div",
          {
            className: styles$1.uploadArea,
            onDragOver: handleDragOver,
            onDrop: handleDrop,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "file",
                  multiple: true,
                  accept: ".ncm,.qmc,.mflac,.mgg,.kgm,.xm,.kwm",
                  onChange: handleFileSelect,
                  style: { display: "none" },
                  id: "file-input"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "label",
                {
                  htmlFor: "file-input",
                  className: styles$1.uploadContent,
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CloudUploadOutlined, { className: styles$1.uploadIcon }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$1.uploadText, children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "点击或拖拽文件到此处" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: styles$1.uploadTip, children: "支持格式：网易云音乐(ncm), QQ音乐(qmc, mflac, mgg), 酷狗音乐(kgm), 虾米音乐(xm), 酷我音乐(.kwm)" })
                    ] })
                  ]
                }
              )
            ]
          }
        );
      };
      const unlockList = "_unlockList_gel3y_1";
      const styles = {
        unlockList
      };
      const urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
      let nanoid = (size2 = 21) => {
        let id = "";
        let bytes = crypto.getRandomValues(new Uint8Array(size2 |= 0));
        while (size2--) {
          id += urlAlphabet[bytes[size2] & 63];
        }
        return id;
      };
      let wasm;
      const cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", { ignoreBOM: true, fatal: true }) : { decode: () => {
        throw Error("TextDecoder not available");
      } };
      if (typeof TextDecoder !== "undefined") {
        cachedTextDecoder.decode();
      }
      let cachedUint8ArrayMemory0 = null;
      function getUint8ArrayMemory0() {
        if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
          cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);
        }
        return cachedUint8ArrayMemory0;
      }
      function getStringFromWasm0(ptr, len) {
        ptr = ptr >>> 0;
        return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
      }
      let WASM_VECTOR_LEN = 0;
      const cachedTextEncoder = typeof TextEncoder !== "undefined" ? new TextEncoder("utf-8") : { encode: () => {
        throw Error("TextEncoder not available");
      } };
      const encodeString = typeof cachedTextEncoder.encodeInto === "function" ? function(arg, view) {
        return cachedTextEncoder.encodeInto(arg, view);
      } : function(arg, view) {
        const buf = cachedTextEncoder.encode(arg);
        view.set(buf);
        return {
          read: arg.length,
          written: buf.length
        };
      };
      function passStringToWasm0(arg, malloc, realloc) {
        if (realloc === void 0) {
          const buf = cachedTextEncoder.encode(arg);
          const ptr2 = malloc(buf.length, 1) >>> 0;
          getUint8ArrayMemory0().subarray(ptr2, ptr2 + buf.length).set(buf);
          WASM_VECTOR_LEN = buf.length;
          return ptr2;
        }
        let len = arg.length;
        let ptr = malloc(len, 1) >>> 0;
        const mem = getUint8ArrayMemory0();
        let offset = 0;
        for (; offset < len; offset++) {
          const code = arg.charCodeAt(offset);
          if (code > 127) break;
          mem[ptr + offset] = code;
        }
        if (offset !== len) {
          if (offset !== 0) {
            arg = arg.slice(offset);
          }
          ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;
          const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);
          const ret = encodeString(arg, view);
          offset += ret.written;
          ptr = realloc(ptr, len, offset, 1) >>> 0;
        }
        WASM_VECTOR_LEN = offset;
        return ptr;
      }
      let cachedDataViewMemory0 = null;
      function getDataViewMemory0() {
        if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || cachedDataViewMemory0.buffer.detached === void 0 && cachedDataViewMemory0.buffer !== wasm.memory.buffer) {
          cachedDataViewMemory0 = new DataView(wasm.memory.buffer);
        }
        return cachedDataViewMemory0;
      }
      function getArrayU8FromWasm0(ptr, len) {
        ptr = ptr >>> 0;
        return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);
      }
      function takeFromExternrefTable0(idx) {
        const value2 = wasm.__wbindgen_export_3.get(idx);
        wasm.__externref_table_dealloc(idx);
        return value2;
      }
      function passArray8ToWasm0(arg, malloc) {
        const ptr = malloc(arg.length * 1, 1) >>> 0;
        getUint8ArrayMemory0().set(arg, ptr / 1);
        WASM_VECTOR_LEN = arg.length;
        return ptr;
      }
      function decryptX2MHeader(buffer) {
        var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.decryptX2MHeader(ptr0, len0, buffer);
        if (ret[1]) {
          throw takeFromExternrefTable0(ret[0]);
        }
      }
      function decryptX3MHeader(buffer) {
        var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.decryptX3MHeader(ptr0, len0, buffer);
        if (ret[1]) {
          throw takeFromExternrefTable0(ret[0]);
        }
      }
      function _assertClass(instance, klass) {
        if (!(instance instanceof klass)) {
          throw new Error(`expected instance of ${klass.name}`);
        }
      }
      function isLikeNone(x) {
        return x === void 0 || x === null;
      }
      function decryptQMC1(buffer, offset) {
        var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.decryptQMC1(ptr0, len0, buffer, offset);
      }
      function initPanicHook() {
        wasm.initPanicHook();
      }
      function detectAudioType(buffer) {
        const ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.detectAudioType(ptr0, len0);
        if (ret[2]) {
          throw takeFromExternrefTable0(ret[1]);
        }
        return AudioTypeResult.__wrap(ret[0]);
      }
      const AudioTypeResultFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_audiotyperesult_free(ptr >>> 0, 1));
      class AudioTypeResult {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(AudioTypeResult.prototype);
          obj.__wbg_ptr = ptr;
          AudioTypeResultFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          AudioTypeResultFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_audiotyperesult_free(ptr, 0);
        }
        /**
         * When this field is not zero, it means we need to feed this amount of bytes to the detector.
         * @returns {number}
         */
        get needMore() {
          const ret = wasm.__wbg_get_audiotyperesult_needMore(this.__wbg_ptr);
          return ret >>> 0;
        }
        /**
         * When this field is not zero, it means we need to feed this amount of bytes to the detector.
         * @param {number} arg0
         */
        set needMore(arg0) {
          wasm.__wbg_set_audiotyperesult_needMore(this.__wbg_ptr, arg0);
        }
        /**
         * Audio extension, without "."
         * When is unknown, it will return "bin".
         * @returns {string}
         */
        get audioType() {
          let deferred1_0;
          let deferred1_1;
          try {
            const ret = wasm.__wbg_get_audiotyperesult_audioType(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
          } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
          }
        }
        /**
         * Audio extension, without "."
         * When is unknown, it will return "bin".
         * @param {string} arg0
         */
        set audioType(arg0) {
          const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          const len0 = WASM_VECTOR_LEN;
          wasm.__wbg_set_audiotyperesult_audioType(this.__wbg_ptr, ptr0, len0);
        }
      }
      typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_jooxfile_free(ptr >>> 0, 1));
      const KWMDecipherFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_kwmdecipher_free(ptr >>> 0, 1));
      class KWMDecipher {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          KWMDecipherFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_kwmdecipher_free(ptr, 0);
        }
        /**
         * Create an instance of cipher (decipher) for decryption
         * @param {KuwoHeader} header
         * @param {string | undefined} [ekey]
         */
        constructor(header, ekey) {
          _assertClass(header, KuwoHeader);
          var ptr0 = isLikeNone(ekey) ? 0 : passStringToWasm0(ekey, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          var len0 = WASM_VECTOR_LEN;
          const ret = wasm.kwmdecipher_make_decipher(header.__wbg_ptr, ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          this.__wbg_ptr = ret[0] >>> 0;
          KWMDecipherFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
         * Decrypt buffer at given offset.
         * @param {Uint8Array} buffer
         * @param {number} offset
         */
        decrypt(buffer, offset) {
          var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
          var len0 = WASM_VECTOR_LEN;
          wasm.kwmdecipher_decrypt(this.__wbg_ptr, ptr0, len0, buffer, offset);
        }
      }
      typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_kwmdecipherv1_free(ptr >>> 0, 1));
      const KuGouFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_kugou_free(ptr >>> 0, 1));
      class KuGou {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(KuGou.prototype);
          obj.__wbg_ptr = ptr;
          KuGouFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          KuGouFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_kugou_free(ptr, 0);
        }
        /**
         * Parse the KuGou header (0x400 bytes recommended).
         * @param {Uint8Array} header
         * @returns {KuGou}
         */
        static from_header(header) {
          const ptr0 = passArray8ToWasm0(header, wasm.__wbindgen_malloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.kugou_from_header(ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          return KuGou.__wrap(ret[0]);
        }
        /**
         * Parse the KuGou header (0x400 bytes recommended).
         * @param {KuGouHeader} header
         * @param {string | undefined} [ekey]
         * @returns {KuGou}
         */
        static fromHeaderV5(header, ekey) {
          _assertClass(header, KuGouHeader);
          var ptr0 = isLikeNone(ekey) ? 0 : passStringToWasm0(ekey, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          var len0 = WASM_VECTOR_LEN;
          const ret = wasm.kugou_fromHeaderV5(header.__wbg_ptr, ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          return KuGou.__wrap(ret[0]);
        }
        /**
         * Decrypt a buffer.
         * @param {Uint8Array} buffer
         * @param {number} offset
         */
        decrypt(buffer, offset) {
          var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
          var len0 = WASM_VECTOR_LEN;
          wasm.kugou_decrypt(this.__wbg_ptr, ptr0, len0, buffer, offset);
        }
        /**
         * Decrypt Kugou PC client db.
         * @param {Uint8Array} database
         */
        static decryptDatabase(database) {
          var ptr0 = passArray8ToWasm0(database, wasm.__wbindgen_malloc);
          var len0 = WASM_VECTOR_LEN;
          const ret = wasm.kugou_decryptDatabase(ptr0, len0, database);
          if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
          }
        }
      }
      const KuGouHeaderFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_kugouheader_free(ptr >>> 0, 1));
      class KuGouHeader {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          KuGouHeaderFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_kugouheader_free(ptr, 0);
        }
        /**
         * Parse the KuGou header (0x400 bytes recommended).
         * @param {Uint8Array} header
         */
        constructor(header) {
          const ptr0 = passArray8ToWasm0(header, wasm.__wbindgen_malloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.kugouheader_new(ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          this.__wbg_ptr = ret[0] >>> 0;
          KuGouHeaderFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
         * Get the audio hash (kgm v5).
         * @returns {string}
         */
        get audioHash() {
          let deferred1_0;
          let deferred1_1;
          try {
            const ret = wasm.kugouheader_audioHash(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
          } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
          }
        }
        /**
         * Get version
         * @returns {number}
         */
        get version() {
          const ret = wasm.kugouheader_version(this.__wbg_ptr);
          return ret >>> 0;
        }
        /**
         * Get offset to encrypted data
         * @returns {number}
         */
        get offsetToData() {
          const ret = wasm.kugouheader_offsetToData(this.__wbg_ptr);
          return ret >>> 0;
        }
      }
      const KuwoHeaderFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_kuwoheader_free(ptr >>> 0, 1));
      class KuwoHeader {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(KuwoHeader.prototype);
          obj.__wbg_ptr = ptr;
          KuwoHeaderFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          KuwoHeaderFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_kuwoheader_free(ptr, 0);
        }
        /**
         * Parse the KuWo header (0x400 bytes)
         * @param {Uint8Array} header
         * @returns {KuwoHeader}
         */
        static parse(header) {
          const ptr0 = passArray8ToWasm0(header, wasm.__wbindgen_malloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.kuwoheader_parse(ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          return KuwoHeader.__wrap(ret[0]);
        }
        /**
         * Get quality id (used for Android Kuwo APP),
         *   that can be then used to extract ekey from mmkv db.
         * @returns {number}
         */
        get qualityId() {
          const ret = wasm.kuwoheader_qualityId(this.__wbg_ptr);
          return ret >>> 0;
        }
        /**
         * Get resource id
         * @returns {number}
         */
        get resourceId() {
          const ret = wasm.kuwoheader_resourceId(this.__wbg_ptr);
          return ret >>> 0;
        }
      }
      const Migu3DFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_migu3d_free(ptr >>> 0, 1));
      class Migu3D {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(Migu3D.prototype);
          obj.__wbg_ptr = ptr;
          Migu3DFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          Migu3DFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_migu3d_free(ptr, 0);
        }
        /**
         * Create a new decipher and guess its key from first 0x100 bytes.
         * @param {Uint8Array} header
         * @returns {Migu3D}
         */
        static fromHeader(header) {
          const ptr0 = passArray8ToWasm0(header, wasm.__wbindgen_malloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.migu3d_fromHeader(ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          return Migu3D.__wrap(ret[0]);
        }
        /**
         * Create a new decipher from file_key
         * @param {string} file_key
         * @returns {Migu3D}
         */
        static fromFileKey(file_key) {
          const ptr0 = passStringToWasm0(file_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.migu3d_fromFileKey(ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          return Migu3D.__wrap(ret[0]);
        }
        /**
         * Decrypt encrypted buffer part.
         * @param {Uint8Array} buffer
         * @param {number} offset
         */
        decrypt(buffer, offset) {
          var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
          var len0 = WASM_VECTOR_LEN;
          wasm.migu3d_decrypt(this.__wbg_ptr, ptr0, len0, buffer, offset);
        }
      }
      const NCMFileFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_ncmfile_free(ptr >>> 0, 1));
      class NCMFile {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          NCMFileFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_ncmfile_free(ptr, 0);
        }
        /**
         * Create a NCMFile instance
         */
        constructor() {
          const ret = wasm.ncmfile_new();
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          this.__wbg_ptr = ret[0] >>> 0;
          NCMFileFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
         * Open NCM file.
         * If everything is ok, return `0`.
         * If it needs more header bytes, return positive integer.
         * If it was not a valid NCM file, return -1.
         *
         * # Arguments
         *
         * * `header`: Header bytes of NCM file.
         *
         * returns: Result<i32, JsError>
         *
         * If it needs more bytes, the new header size will be returned.
         * If the header was large enough, it will return 0.
         * @param {Uint8Array} header
         * @returns {number}
         */
        open(header) {
          const ptr0 = passArray8ToWasm0(header, wasm.__wbindgen_malloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.ncmfile_open(this.__wbg_ptr, ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          return ret[0];
        }
        /**
         * Decrypt buffer.
         *
         * # Arguments
         *
         * * `buffer`: Buffer to decrypt.
         * * `offset`: Offset (start from 0, of encrypted binary data)
         *
         * returns: Result<(), JsError>
         * @param {Uint8Array} buffer
         * @param {number} offset
         */
        decrypt(buffer, offset) {
          var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
          var len0 = WASM_VECTOR_LEN;
          const ret = wasm.ncmfile_decrypt(this.__wbg_ptr, ptr0, len0, buffer, offset);
          if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
          }
        }
        /**
         * Get audio data offset.
         * @returns {number}
         */
        get audioOffset() {
          const ret = wasm.ncmfile_audioOffset(this.__wbg_ptr);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          return ret[0] >>> 0;
        }
      }
      const QMC2Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_qmc2_free(ptr >>> 0, 1));
      class QMC2 {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(QMC2.prototype);
          obj.__wbg_ptr = ptr;
          QMC2Finalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          QMC2Finalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_qmc2_free(ptr, 0);
        }
        /**
         * Create a new QMC2 (mgg/mflac) cipher instance.
         * @param {string} ekey
         */
        constructor(ekey) {
          const ptr0 = passStringToWasm0(ekey, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.qmc2_new(ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          this.__wbg_ptr = ret[0] >>> 0;
          QMC2Finalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
         * Decrypt buffer at given offset.
         * @param {Uint8Array} buffer
         * @param {number} offset
         */
        decrypt(buffer, offset) {
          var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
          var len0 = WASM_VECTOR_LEN;
          wasm.qmc2_decrypt(this.__wbg_ptr, ptr0, len0, buffer, offset);
        }
      }
      const QMCFooterFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_qmcfooter_free(ptr >>> 0, 1));
      class QMCFooter {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(QMCFooter.prototype);
          obj.__wbg_ptr = ptr;
          QMCFooterFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          QMCFooterFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_qmcfooter_free(ptr, 0);
        }
        /**
         * Parse QMC Footer from byte slice.
         *   Recommended to slice the last 1024 bytes of the file.
         * @param {Uint8Array} footer
         * @returns {QMCFooter | undefined}
         */
        static parse(footer2) {
          const ptr0 = passArray8ToWasm0(footer2, wasm.__wbindgen_malloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.qmcfooter_parse(ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          return ret[0] === 0 ? void 0 : QMCFooter.__wrap(ret[0]);
        }
        /**
         * Get eKey (if embedded)
         * @returns {string | undefined}
         */
        get ekey() {
          const ret = wasm.qmcfooter_ekey(this.__wbg_ptr);
          let v1;
          if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
          }
          return v1;
        }
        /**
         * Get size of footer
         * @returns {number}
         */
        get size() {
          const ret = wasm.qmcfooter_size(this.__wbg_ptr);
          return ret >>> 0;
        }
        /**
         * Get media name (MusicEx)
         * @returns {string | undefined}
         */
        get mediaName() {
          const ret = wasm.qmcfooter_mediaName(this.__wbg_ptr);
          let v1;
          if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
          }
          return v1;
        }
      }
      const QingTingFMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_qingtingfm_free(ptr >>> 0, 1));
      class QingTingFM {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          QingTingFMFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_qingtingfm_free(ptr, 0);
        }
        /**
         * @param {string} product
         * @param {string} device
         * @param {string} manufacturer
         * @param {string} brand
         * @param {string} board
         * @param {string} model
         * @returns {Uint8Array}
         */
        static getDeviceKey(product, device, manufacturer, brand, board, model) {
          const ptr0 = passStringToWasm0(product, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          const len0 = WASM_VECTOR_LEN;
          const ptr1 = passStringToWasm0(device, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          const len1 = WASM_VECTOR_LEN;
          const ptr2 = passStringToWasm0(manufacturer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          const len2 = WASM_VECTOR_LEN;
          const ptr3 = passStringToWasm0(brand, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          const len3 = WASM_VECTOR_LEN;
          const ptr4 = passStringToWasm0(board, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          const len4 = WASM_VECTOR_LEN;
          const ptr5 = passStringToWasm0(model, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          const len5 = WASM_VECTOR_LEN;
          const ret = wasm.qingtingfm_getDeviceKey(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5);
          var v7 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
          wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
          return v7;
        }
        /**
         * @param {string} file_name
         * @returns {Uint8Array}
         */
        static getFileIV(file_name) {
          const ptr0 = passStringToWasm0(file_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.qingtingfm_getFileIV(ptr0, len0);
          if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
          }
          var v2 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
          wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
          return v2;
        }
        /**
         * @param {Uint8Array} device_key
         * @param {Uint8Array} file_iv
         */
        constructor(device_key, file_iv) {
          const ptr0 = passArray8ToWasm0(device_key, wasm.__wbindgen_malloc);
          const len0 = WASM_VECTOR_LEN;
          const ptr1 = passArray8ToWasm0(file_iv, wasm.__wbindgen_malloc);
          const len1 = WASM_VECTOR_LEN;
          const ret = wasm.qingtingfm_new(ptr0, len0, ptr1, len1);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          this.__wbg_ptr = ret[0] >>> 0;
          QingTingFMFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
         * Decrypt encrypted buffer part.
         * @param {Uint8Array} buffer
         * @param {number} offset
         */
        decrypt(buffer, offset) {
          var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
          var len0 = WASM_VECTOR_LEN;
          wasm.qingtingfm_decrypt(this.__wbg_ptr, ptr0, len0, buffer, offset);
        }
      }
      const XiamiFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_xiami_free(ptr >>> 0, 1));
      class Xiami {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(Xiami.prototype);
          obj.__wbg_ptr = ptr;
          XiamiFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          XiamiFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_xiami_free(ptr, 0);
        }
        /**
         * Parse the Xiami header (0x400 bytes)
         * @param {Uint8Array} header
         * @returns {Xiami}
         */
        static from_header(header) {
          const ptr0 = passArray8ToWasm0(header, wasm.__wbindgen_malloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.xiami_from_header(ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          return Xiami.__wrap(ret[0]);
        }
        /**
         * Decrypt encrypted buffer part.
         * @param {Uint8Array} buffer
         */
        decrypt(buffer) {
          var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
          var len0 = WASM_VECTOR_LEN;
          wasm.xiami_decrypt(this.__wbg_ptr, ptr0, len0, buffer);
        }
        /**
         * After header (0x10 bytes), the number of bytes should be copied without decryption.
         * @returns {number}
         */
        get copyPlainLength() {
          const ret = wasm.xiami_copyPlainLength(this.__wbg_ptr);
          return ret >>> 0;
        }
      }
      const XmlyPCFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm.__wbg_xmlypc_free(ptr >>> 0, 1));
      class XmlyPC {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          XmlyPCFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_xmlypc_free(ptr, 0);
        }
        /**
         * Get required bytes for the header, or throw error if not valid XM file.
         * @param {Uint8Array} buffer
         * @returns {number}
         */
        static getHeaderSize(buffer) {
          const ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.xmlypc_getHeaderSize(ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          return ret[0] >>> 0;
        }
        /**
         * Create a new XmlyPC decipher
         * @param {Uint8Array} header
         */
        constructor(header) {
          const ptr0 = passArray8ToWasm0(header, wasm.__wbindgen_malloc);
          const len0 = WASM_VECTOR_LEN;
          const ret = wasm.xmlypc_new(ptr0, len0);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          this.__wbg_ptr = ret[0] >>> 0;
          XmlyPCFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
         * Get the first few bytes of the header.
         * @returns {Uint8Array}
         */
        get audioHeader() {
          const ret = wasm.xmlypc_audioHeader(this.__wbg_ptr);
          var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
          wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
          return v1;
        }
        /**
         * Get the offset where the encrypted header is
         * @returns {number}
         */
        get encryptedHeaderOffset() {
          const ret = wasm.xmlypc_encryptedHeaderOffset(this.__wbg_ptr);
          return ret >>> 0;
        }
        /**
         * Get the size of encrypted header
         * @returns {number}
         */
        get encryptedHeaderSize() {
          const ret = wasm.xmlypc_encryptedHeaderSize(this.__wbg_ptr);
          return ret >>> 0;
        }
        /**
         * Decrypt encrypted header
         * @param {Uint8Array} buffer
         * @returns {number}
         */
        decrypt(buffer) {
          var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
          var len0 = WASM_VECTOR_LEN;
          const ret = wasm.xmlypc_decrypt(this.__wbg_ptr, ptr0, len0, buffer);
          if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
          }
          return ret[0] >>> 0;
        }
      }
      async function __wbg_load(module, imports) {
        if (typeof Response === "function" && module instanceof Response) {
          if (typeof WebAssembly.instantiateStreaming === "function") {
            try {
              return await WebAssembly.instantiateStreaming(module, imports);
            } catch (e) {
              if (module.headers.get("Content-Type") != "application/wasm") {
                console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
              } else {
                throw e;
              }
            }
          }
          const bytes = await module.arrayBuffer();
          return await WebAssembly.instantiate(bytes, imports);
        } else {
          const instance = await WebAssembly.instantiate(module, imports);
          if (instance instanceof WebAssembly.Instance) {
            return { instance, module };
          } else {
            return instance;
          }
        }
      }
      function __wbg_get_imports() {
        const imports = {};
        imports.wbg = {};
        imports.wbg.__wbg_error_7534b8e9a36f1ab4 = function(arg0, arg1) {
          let deferred0_0;
          let deferred0_1;
          try {
            deferred0_0 = arg0;
            deferred0_1 = arg1;
            console.error(getStringFromWasm0(arg0, arg1));
          } finally {
            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);
          }
        };
        imports.wbg.__wbg_new_8a6f238a6ece86ea = function() {
          const ret = new Error();
          return ret;
        };
        imports.wbg.__wbg_stack_0ed75d68575b0f3c = function(arg0, arg1) {
          const ret = arg1.stack;
          const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
          const len1 = WASM_VECTOR_LEN;
          getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
          getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
        };
        imports.wbg.__wbindgen_copy_to_typed_array = function(arg0, arg1, arg2) {
          new Uint8Array(arg2.buffer, arg2.byteOffset, arg2.byteLength).set(getArrayU8FromWasm0(arg0, arg1));
        };
        imports.wbg.__wbindgen_error_new = function(arg0, arg1) {
          const ret = new Error(getStringFromWasm0(arg0, arg1));
          return ret;
        };
        imports.wbg.__wbindgen_init_externref_table = function() {
          const table = wasm.__wbindgen_export_3;
          const offset = table.grow(4);
          table.set(0, void 0);
          table.set(offset + 0, void 0);
          table.set(offset + 1, null);
          table.set(offset + 2, true);
          table.set(offset + 3, false);
        };
        imports.wbg.__wbindgen_throw = function(arg0, arg1) {
          throw new Error(getStringFromWasm0(arg0, arg1));
        };
        return imports;
      }
      function __wbg_finalize_init(instance, module) {
        wasm = instance.exports;
        __wbg_init.__wbindgen_wasm_module = module;
        cachedDataViewMemory0 = null;
        cachedUint8ArrayMemory0 = null;
        wasm.__wbindgen_start();
        return wasm;
      }
      async function __wbg_init(module_or_path) {
        if (wasm !== void 0) return wasm;
        if (typeof module_or_path !== "undefined") {
          if (Object.getPrototypeOf(module_or_path) === Object.prototype) {
            ({ module_or_path } = module_or_path);
          } else {
            console.warn("using deprecated parameters for the initialization function; pass a single object instead");
          }
        }
        if (typeof module_or_path === "undefined") {
          module_or_path = new URL("data:application/wasm;base64,", module.meta.url);
        }
        const imports = __wbg_get_imports();
        if (typeof module_or_path === "string" || typeof Request === "function" && module_or_path instanceof Request || typeof URL === "function" && module_or_path instanceof URL) {
          module_or_path = fetch(module_or_path);
        }
        const { instance, module: module$1 } = await __wbg_load(await module_or_path, imports);
        return __wbg_finalize_init(instance, module$1);
      }
      function loader() {
        {
          const url = new URL("data:application/wasm;base64,", module.meta.url);
          const wasm2 = url.protocol === "file:" ? __vitePreload(() => module.import(
            /* @vite-ignore */
            './__vite-browser-external-pcc57R5k.js'
          ), void 0 ).then((fs) => fs.readFile(url)).catch((err) => {
            console.log("read wasm failed", err);
          }) : void 0;
          return __wbg_init({ module_or_path: wasm2 }).then(() => (initPanicHook(), true));
        }
      }
      const ready = loader();
      const workerParseKuwoHeader = async ({ blobURI }) => {
        const blob = await fetch(blobURI, { headers: { Range: "bytes=0-1023" } }).then((r) => r.blob());
        const arrayBuffer = await blob.arrayBuffer();
        try {
          const buffer = new Uint8Array(arrayBuffer.slice(0, 1024));
          const kwm = KuwoHeader.parse(buffer);
          const { qualityId, resourceId } = kwm;
          kwm.free();
          return { qualityId, resourceId };
        } catch {
          return null;
        }
      };
      const workerParseMusicExMediaName = async ({ blobURI }) => {
        const blob = await fetch(blobURI, { headers: { Range: "bytes=-1024" } }).then((r) => r.blob());
        const arrayBuffer = await blob.arrayBuffer();
        console.log("blob", blob);
        console.log("arrayBuffer", arrayBuffer);
        try {
          const buffer = new Uint8Array(arrayBuffer.slice(-1024));
          const footer2 = QMCFooter.parse(buffer);
          return (footer2 == null ? void 0 : footer2.mediaName) || null;
        } catch {
          return null;
        }
      };
      const workerParseKugouHeader = async ({ blobURI }) => {
        const blob = await fetch(blobURI, { headers: { Range: "bytes=0-1023" } }).then((r) => r.blob());
        const arrayBuffer = await blob.arrayBuffer();
        const buffer = new Uint8Array(arrayBuffer.slice(0, 1024));
        let kwm;
        try {
          kwm = new KuGouHeader(buffer);
          const { version: version2, audioHash } = kwm;
          return { version: version2, audioHash };
        } catch {
          return null;
        } finally {
          kwm == null ? void 0 : kwm.free();
        }
      };
      function* chunkBuffer(buffer, blockLen = 4096) {
        const len = buffer.byteLength;
        for (let i = 0; i < len; i += blockLen) {
          const idxEnd = Math.min(i + blockLen, len);
          const slice = buffer.subarray(i, idxEnd);
          yield [slice, i];
        }
      }
      const DecryptErrorType = {
        UNSUPPORTED_FILE: "UNSUPPORTED_FILE",
        UNKNOWN: "UNKNOWN"
      };
      class DecryptError extends Error {
        constructor() {
          super();
          this.code = DecryptErrorType.UNKNOWN;
        }
        toJSON() {
          const { name: name2, message: message2, stack, code } = this;
          return { name: name2, message: message2, stack, code };
        }
      }
      class UnsupportedSourceFile extends DecryptError {
        constructor() {
          super();
          this.code = DecryptErrorType.UNSUPPORTED_FILE;
        }
      }
      class NetEaseCloudMusicDecipher {
        constructor() {
          this.cipherName = "NCM/PC";
        }
        tryInit(ncm, buffer) {
          let neededLength = 1024;
          while (neededLength !== 0) {
            console.debug("NCM/open: read %d bytes", neededLength);
            neededLength = ncm.open(buffer.subarray(0, neededLength));
            if (neededLength === -1) {
              throw new UnsupportedSourceFile("file is not ncm");
            }
          }
        }
        async decrypt(buffer) {
          const ncm = new NCMFile();
          try {
            this.tryInit(ncm, buffer);
            const audioBuffer = buffer.slice(ncm.audioOffset);
            for (const [block, offset] of chunkBuffer(audioBuffer)) {
              ncm.decrypt(block, offset);
            }
            return {
              status: Status$1.OK,
              cipherName: this.cipherName,
              data: audioBuffer
            };
          } finally {
            ncm.free();
          }
        }
        static make() {
          return new NetEaseCloudMusicDecipher();
        }
      }
      class TransparentDecipher {
        constructor() {
          this.cipherName = "none";
        }
        async decrypt(buffer) {
          return {
            cipherName: "None",
            status: Status$1.OK,
            data: buffer,
            message: "No decipher applied"
          };
        }
        static make() {
          return new TransparentDecipher();
        }
      }
      function isDataLooksLikeAudio(buffer) {
        if (buffer.byteLength < 32) {
          return false;
        }
        const detectResult = detectAudioType(buffer.subarray(0, 32));
        const ok = detectResult.needMore !== 0 || detectResult.audioType !== "bin";
        detectResult.free();
        return ok;
      }
      class QQMusicV1Decipher {
        constructor() {
          this.cipherName = "QQMusic/QMC1";
        }
        async decrypt(buffer) {
          const header = buffer.slice(0, 32);
          decryptQMC1(header, 0);
          if (!isDataLooksLikeAudio(header)) {
            throw new UnsupportedSourceFile("does not look like QMC file");
          }
          const audioBuffer = new Uint8Array(buffer);
          for (const [block, offset] of chunkBuffer(audioBuffer)) {
            decryptQMC1(block, offset);
          }
          return {
            status: Status$1.OK,
            cipherName: this.cipherName,
            data: audioBuffer
          };
        }
        static create() {
          return new QQMusicV1Decipher();
        }
      }
      class QQMusicV2Decipher {
        constructor(useUserKey) {
          this.useUserKey = useUserKey;
          this.cipherName = `QQMusic/QMC2(user_key=${+useUserKey})`;
        }
        parseFooter(buffer) {
          const footer2 = QMCFooter.parse(buffer.subarray(buffer.byteLength - 1024));
          if (footer2) {
            const { size: size2, ekey } = footer2;
            footer2.free();
            return { size: size2, ekey };
          }
          if (!this.useUserKey) {
            throw new UnsupportedSourceFile("Not QMC2 File");
          }
          return { size: 0 };
        }
        async decrypt(buffer, options) {
          const footer2 = this.parseFooter(buffer.subarray(buffer.byteLength - 1024));
          const ekey = this.useUserKey ? options.qmc2Key : footer2.ekey;
          if (!ekey) {
            throw new Error("EKey required");
          }
          const qmc2 = new QMC2(ekey);
          const audioBuffer = buffer.slice(0, buffer.byteLength - footer2.size);
          for (const [block, offset] of chunkBuffer(audioBuffer)) {
            qmc2.decrypt(block, offset);
          }
          qmc2.free();
          return {
            status: Status$1.OK,
            cipherName: this.cipherName,
            data: audioBuffer
          };
        }
        static createWithUserKey() {
          return new QQMusicV2Decipher(true);
        }
        static createWithEmbeddedEKey() {
          return new QQMusicV2Decipher(false);
        }
      }
      class KuwoMusicDecipher {
        constructor() {
          this.cipherName = "Kuwo";
        }
        async decrypt(buffer, options) {
          let header;
          let kwm;
          try {
            header = KuwoHeader.parse(buffer.subarray(0, 1024));
            kwm = new KWMDecipher(header, options.kwm2key);
            const audioBuffer = new Uint8Array(buffer.subarray(1024));
            for (const [block, offset] of chunkBuffer(audioBuffer)) {
              kwm.decrypt(block, offset);
            }
            return {
              status: Status$1.OK,
              cipherName: this.cipherName,
              data: audioBuffer
            };
          } finally {
            kwm == null ? void 0 : kwm.free();
            header == null ? void 0 : header.free();
          }
        }
        static make() {
          return new KuwoMusicDecipher();
        }
      }
      class KugouMusicDecipher {
        constructor() {
          __publicField(this, "cipherName", "Kugou");
        }
        async decrypt(buffer, options) {
          let kgm;
          let kgmHdr;
          try {
            kgmHdr = new KuGouHeader(buffer.subarray(0, 1024));
            kgm = KuGou.fromHeaderV5(kgmHdr, options.kugouKey);
            const audioBuffer = new Uint8Array(buffer.subarray(1024));
            for (const [block, offset] of chunkBuffer(audioBuffer)) {
              kgm.decrypt(block, offset);
            }
            return {
              status: Status$1.OK,
              cipherName: this.cipherName,
              data: audioBuffer
            };
          } finally {
            kgmHdr == null ? void 0 : kgmHdr.free();
            kgm == null ? void 0 : kgm.free();
          }
        }
        static make() {
          return new KugouMusicDecipher();
        }
      }
      class XimalayaAndroidDecipher {
        constructor(decipher, cipherType) {
          this.decipher = decipher;
          this.cipherType = cipherType;
          this.cipherName = `Ximalaya (Android, ${cipherType})`;
        }
        async decrypt(buffer, _options) {
          const slice = buffer.slice(0, 1024);
          this.decipher(slice);
          if (!isDataLooksLikeAudio(slice)) {
            throw new UnsupportedSourceFile(`Not a Xmly android file (${this.cipherType})`);
          }
          const result = new Uint8Array(buffer);
          result.set(slice, 0);
          return {
            cipherName: this.cipherName,
            status: Status$1.OK,
            data: result
          };
        }
        static makeX2M() {
          return new XimalayaAndroidDecipher(decryptX2MHeader, "X2M");
        }
        static makeX3M() {
          return new XimalayaAndroidDecipher(decryptX3MHeader, "X3M");
        }
      }
      class XimalayaPCDecipher {
        constructor() {
          this.cipherName = "Ximalaya (PC)";
        }
        async decrypt(buffer, _options) {
          const headerSize = XmlyPC.getHeaderSize(buffer.subarray(0, 1024));
          const xm = new XmlyPC(buffer.subarray(0, headerSize));
          const { audioHeader, encryptedHeaderOffset, encryptedHeaderSize } = xm;
          const plainAudioDataOffset = encryptedHeaderOffset + encryptedHeaderSize;
          const plainAudioDataLength = buffer.byteLength - plainAudioDataOffset;
          const encryptedAudioPart = buffer.slice(encryptedHeaderOffset, plainAudioDataOffset);
          const encryptedAudioPartLen = xm.decrypt(encryptedAudioPart);
          const audioSize = audioHeader.byteLength + encryptedAudioPartLen + plainAudioDataLength;
          xm.free();
          const result = new Uint8Array(audioSize);
          result.set(audioHeader);
          result.set(encryptedAudioPart, audioHeader.byteLength);
          result.set(buffer.subarray(plainAudioDataOffset), audioHeader.byteLength + encryptedAudioPartLen);
          return {
            status: Status$1.OK,
            data: result,
            cipherName: this.cipherName
          };
        }
        static make() {
          return new XimalayaPCDecipher();
        }
      }
      class XiamiDecipher {
        constructor() {
          this.cipherName = "Xiami (XM)";
        }
        async decrypt(buffer) {
          const xm = Xiami.from_header(buffer.subarray(0, 16));
          const { copyPlainLength } = xm;
          const audioBuffer = buffer.slice(16);
          for (const [block] of chunkBuffer(audioBuffer.subarray(copyPlainLength))) {
            xm.decrypt(block);
          }
          xm.free();
          return {
            cipherName: this.cipherName,
            status: Status$1.OK,
            data: audioBuffer
          };
        }
        static make() {
          return new XiamiDecipher();
        }
      }
      function unhex(value2) {
        const bytes = [];
        for (const [byte2] of value2.matchAll(/[0-9a-fA-F]{2}/g)) {
          bytes.push(parseInt(byte2, 16));
        }
        return new Uint8Array(bytes);
      }
      class QignTingFMDecipher {
        constructor() {
          this.cipherName = "QingTingFM (Android, qta)";
        }
        async decrypt(buffer, opts) {
          const key = unhex(opts.qingTingAndroidKey || "");
          const iv = QingTingFM.getFileIV(opts.fileName);
          if (key.byteLength !== 16 || iv.byteLength !== 16) {
            return {
              status: Status$1.FAILED,
              message: "device key or iv invalid"
            };
          }
          const qtfm = new QingTingFM(key, iv);
          const audioBuffer = new Uint8Array(buffer);
          for (const [block, i] of chunkBuffer(audioBuffer)) {
            qtfm.decrypt(block, i);
          }
          return {
            cipherName: this.cipherName,
            status: Status$1.OK,
            data: audioBuffer
          };
        }
        static make() {
          return new QignTingFMDecipher();
        }
      }
      class Migu3DKeylessDecipher {
        constructor() {
          this.cipherName = "Migu3D (Keyless)";
        }
        async decrypt(buffer) {
          const mg3d = Migu3D.fromHeader(buffer.subarray(0, 256));
          const audioBuffer = new Uint8Array(buffer);
          for (const [block, i] of chunkBuffer(audioBuffer)) {
            mg3d.decrypt(block, i);
          }
          mg3d.free();
          return {
            cipherName: this.cipherName,
            status: Status$1.OK,
            data: audioBuffer
          };
        }
        static make() {
          return new Migu3DKeylessDecipher();
        }
      }
      const Status$1 = {
        OK: 0,
        NOT_THIS_CIPHER: 1,
        FAILED: 2
      };
      const allCryptoFactories = [
        /// File with fixed headers goes first.
        // NCM (*.ncm)
        NetEaseCloudMusicDecipher.make,
        // KGM (*.kgm, *.vpr)
        KugouMusicDecipher.make,
        // KWMv1 (*.kwm)
        KuwoMusicDecipher.make,
        // Ximalaya PC (*.xm)
        XimalayaPCDecipher.make,
        // Xiami (*.xm)
        XiamiDecipher.make,
        // QingTingFM Android (*.qta)
        QignTingFMDecipher.make,
        /// File with a fixed footer goes second
        // QMCv2 (*.mflac)
        QQMusicV2Decipher.createWithUserKey,
        QQMusicV2Decipher.createWithEmbeddedEKey,
        /// File without an obvious header or footer goes last.
        // Migu3D/Keyless (*.wav; *.m4a)
        Migu3DKeylessDecipher.make,
        // Crypto that does not implement "checkBySignature" or need to decrypt the entire file and then check audio type,
        //   should be moved to the bottom of the list for performance reasons.
        // QMCv1 (*.qmcflac)
        QQMusicV1Decipher.create,
        // Ximalaya (Android)
        XimalayaAndroidDecipher.makeX2M,
        XimalayaAndroidDecipher.makeX3M,
        // Transparent crypto (not encrypted)
        TransparentDecipher.make
      ];
      async function unlock(file) {
        try {
          const blobURI = URL.createObjectURL(file);
          const fileName = file.name;
          const fileId = "file://" + nanoid();
          debugger;
          const [qmcv2MusicExMediaFile, kuwoHdr, kugouHdr] = await Promise.all([
            workerParseMusicExMediaName({ blobURI }),
            workerParseKuwoHeader({ blobURI }),
            workerParseKugouHeader({ blobURI })
          ]);
          console.log("头信息", qmcv2MusicExMediaFile, kuwoHdr, kugouHdr);
          const options = {
            fileName
            /* qmc2Key: selectQMCv2KeyByFileName(state, qmcv2MusicExMediaFile || file.fileName),
            kwm2key: selectKWMv2Key(state, kuwoHdr),
            kugouKey: selectKugouKey(state, kugouHdr),
            qingTingAndroidKey: selectQtfmAndroidKey(state), */
          };
          await ready;
          const buffer = await fetch(blobURI).then((r) => r.arrayBuffer());
          for (const factory of allCryptoFactories) {
            try {
              const decipher = factory();
              const result = await tryDecryptWith(decipher, new Uint8Array(buffer), options);
              if (result) {
                return result;
              }
            } catch (error) {
              console.log("error", error);
            }
          }
          return null;
        } catch (error) {
          console.log("error", error);
        }
      }
      const Status = {
        OK: 0,
        NOT_THIS_CIPHER: 1,
        FAILED: 2
      };
      async function tryDecryptWith(decipher, buffer, options) {
        try {
          const result = await decipher.decrypt(buffer, options);
          switch (result.status) {
            case Status.NOT_THIS_CIPHER:
              return null;
            case Status.FAILED:
              throw new Error(`failed: ${result.message}`);
            default:
              break;
          }
        } catch (error) {
          console.log("error", error);
        }
      }
      const UnlockList = ({ fileList }) => {
        const columns = [
          {
            title: "文件名",
            dataIndex: "name",
            key: "name",
            width: 300,
            ellipsis: true
          },
          {
            title: "大小",
            dataIndex: "size",
            key: "size",
            width: 100,
            render: (size2) => `${(size2 / 1024 / 1024).toFixed(2)}MB`
          },
          {
            title: "状态",
            dataIndex: "status",
            key: "status",
            width: 100,
            render: (status) => {
              const statusMap = {
                waiting: { text: "等待中", color: "default" },
                unlocking: { text: "解锁中", color: "processing" },
                success: { text: "已完成", color: "success" },
                error: { text: "失败", color: "error" }
              };
              return /* @__PURE__ */ jsxRuntimeExports.jsx(Tag, { color: statusMap[status].color, children: statusMap[status].text });
            }
          },
          {
            title: "进度",
            dataIndex: "progress",
            key: "progress",
            width: 200,
            render: (progress, record) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              Progress,
              {
                percent: progress,
                size: "small",
                status: record.status === "error" ? "exception" : record.status === "success" ? "success" : "active"
              }
            )
          },
          {
            title: "操作",
            key: "action",
            width: 100,
            render: (_, record) => {
              if (record.status === "success") {
                return /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "link",
                    size: "small",
                    children: "下载"
                  }
                );
              }
              return null;
            }
          }
        ];
        const [list, setList] = useState(fileList);
        useEffect(() => {
          console.log("fileList", fileList);
          setList(fileList);
          fileList.forEach(async (item) => {
            if (item.status === "waiting") {
              item.status = "unlocking";
              item.progress = 0;
              await unlock(item.file);
              setTimeout(() => {
                item.status = "success";
                item.progress = 100;
                setList([...fileList]);
              }, 2e3);
            }
          });
        }, [fileList]);
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles.unlockList, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Table,
          {
            dataSource: list,
            columns,
            rowKey: "id",
            pagination: false,
            scroll: { y: 400 }
          }
        ) });
      };
      const UnlockMusic = forwardRef((props, ref) => {
        const [visible, setVisible] = useState(false);
        const open = () => setVisible(true);
        const close = () => setVisible(false);
        const reset = () => {
        };
        useImperativeHandle(ref, () => ({
          open,
          close,
          reset
        }));
        const [fileList, setFileList] = useState([]);
        const handleUpload = (files) => {
          const newFiles = Array.from(files).map((file) => ({
            id: Date.now() + Math.random(),
            file,
            name: file.name,
            size: file.size,
            status: "waiting",
            // waiting, unlocking, success, error
            progress: 0
          }));
          setFileList((list) => [...list, ...newFiles]);
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Modal,
          {
            title: "加密音乐解锁",
            open: visible,
            onCancel: close,
            width: 950,
            footer: null,
            centered: true,
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$2.container, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(UploadArea, { onUpload: handleUpload }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(UnlockList, { fileList })
            ] })
          }
        );
      });
      const ButtonGroup = () => {
        const quickUploadRef = useRef(null);
        const handleQuickUpload = () => {
          quickUploadRef.current.open();
        };
        const cloudMusicManagerRef = useRef(null);
        const handleCloudMusicManager = () => {
          cloudMusicManagerRef.current.open();
        };
        const qualityUpgradeRef = useRef(null);
        const localUploadRef = useRef(null);
        const handleLocalUpload = () => {
          localUploadRef.current.open();
        };
        const unlockMusicRef = useRef(null);
        const handleUnlockMusic = () => {
          unlockMusicRef.current.open();
        };
        const vipSongARef = useRef(null);
        const vipSongBRef = useRef(null);
        const cloudExportRef = useRef(null);
        const cloudImportRef = useRef(null);
        const testModalRef = useRef(null);
        const handleTestModal = () => {
          testModalRef.current.open();
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$6["button-group"], children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Tooltip,
            {
              title: "云盘快速上传",
              placement: "left",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "primary",
                  icon: /* @__PURE__ */ jsxRuntimeExports.jsx(CloudUploadOutlined, {}),
                  onClick: handleQuickUpload,
                  className: styles$6["button"]
                }
              )
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Tooltip,
            {
              title: "云盘歌曲管理",
              placement: "left",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "primary",
                  icon: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomerServiceOutlined, {}),
                  onClick: handleCloudMusicManager,
                  className: styles$6["button"]
                }
              )
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Tooltip,
            {
              title: "云盘本地上传",
              placement: "left",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "primary",
                  icon: /* @__PURE__ */ jsxRuntimeExports.jsx(UploadOutlined, {}),
                  onClick: handleLocalUpload,
                  className: styles$6["button"]
                }
              )
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Tooltip,
            {
              title: "加密音乐解锁",
              placement: "left",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "primary",
                  icon: /* @__PURE__ */ jsxRuntimeExports.jsx(UnlockOutlined, {}),
                  onClick: handleUnlockMusic,
                  className: styles$6["button"]
                }
              )
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Tooltip,
            {
              title: "testModal",
              placement: "left",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  type: "primary",
                  icon: /* @__PURE__ */ jsxRuntimeExports.jsx(InfoCircleOutlined, {}),
                  onClick: handleTestModal,
                  className: styles$6["button"]
                }
              )
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(QuickUpload$1, { ref: quickUploadRef }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(CloudMusicManager, { ref: cloudMusicManagerRef }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(QualityUpgrade, { ref: qualityUpgradeRef }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(LocalUpload, { ref: localUploadRef }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(VipSongA, { ref: vipSongARef }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(VipSongB, { ref: vipSongBRef }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(CloudExport, { ref: cloudExportRef }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(CloudImport, { ref: cloudImportRef }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(UnlockMusic, { ref: unlockMusicRef }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(TestModal, { ref: testModalRef })
        ] });
      };
      function App() {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "App", children: /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonGroup, {}) });
      }
      const theme = {
        // 品牌色
        token: {
          // 主色
          colorPrimary: "#C20C0C",
          // 网易云特征红色
          colorPrimaryHover: "#D81E06",
          colorPrimaryActive: "#A00606",
          // 文字颜色
          colorText: "#333333",
          colorTextSecondary: "#666666",
          colorTextTertiary: "#999999",
          colorTextDescription: "#666666",
          // 背景色
          colorBgContainer: "#FFFFFF",
          colorBgLayout: "#F5F5F5",
          colorBgMask: "rgba(0, 0, 0, 0.45)",
          // 边框颜色
          colorBorder: "#E1E1E1",
          colorBorderSecondary: "#F0F0F0",
          // 链接颜色
          colorLink: "#0C73C2",
          colorLinkHover: "#2994E7",
          colorLinkActive: "#095C9C",
          // 成功、警告、错误状态色
          colorSuccess: "#52C41A",
          colorWarning: "#FAAD14",
          colorError: "#FF4D4F",
          // 字体
          fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif',
          fontSize: 14,
          // 圆角
          borderRadius: 4,
          borderRadiusLG: 8,
          borderRadiusSM: 2,
          // 间距
          marginXS: 8,
          marginSM: 12,
          margin: 16,
          marginMD: 20,
          marginLG: 24,
          marginXL: 32,
          // 动画
          motionDurationFast: "0.1s",
          motionDurationMid: "0.2s",
          motionDurationSlow: "0.3s",
          motionEaseInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
          motionEaseOut: "cubic-bezier(0.0, 0, 0.2, 1)",
          motionEaseIn: "cubic-bezier(0.4, 0, 1, 1)"
        },
        // 组件级别的样式定制
        components: {
          Button: {
            colorPrimary: "#C20C0C",
            algorithm: true
            // 启用算法
          },
          Input: {
            colorBorder: "#E1E1E1",
            algorithm: true
          }
        }
      };
      var zh_CN$6 = {};
      var interopRequireDefault = { exports: {} };
      (function(module) {
        function _interopRequireDefault2(e) {
          return e && e.__esModule ? e : {
            "default": e
          };
        }
        module.exports = _interopRequireDefault2, module.exports.__esModule = true, module.exports["default"] = module.exports;
      })(interopRequireDefault);
      var interopRequireDefaultExports = interopRequireDefault.exports;
      var zh_CN$5 = {};
      Object.defineProperty(zh_CN$5, "__esModule", {
        value: true
      });
      zh_CN$5.default = void 0;
      var locale$3 = {
        // Options
        items_per_page: "条/页",
        jump_to: "跳至",
        jump_to_confirm: "确定",
        page: "页",
        // Pagination
        prev_page: "上一页",
        next_page: "下一页",
        prev_5: "向前 5 页",
        next_5: "向后 5 页",
        prev_3: "向前 3 页",
        next_3: "向后 3 页",
        page_size: "页码"
      };
      zh_CN$5.default = locale$3;
      var zh_CN$4 = {};
      var zh_CN$3 = {};
      var zh_CN$2 = {};
      var objectSpread2 = { exports: {} };
      var defineProperty = { exports: {} };
      var toPropertyKey = { exports: {} };
      var _typeof = { exports: {} };
      (function(module) {
        function _typeof2(o) {
          "@babel/helpers - typeof";
          return module.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
            return typeof o2;
          } : function(o2) {
            return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
          }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(o);
        }
        module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
      })(_typeof);
      var _typeofExports = _typeof.exports;
      var toPrimitive = { exports: {} };
      (function(module) {
        var _typeof2 = _typeofExports["default"];
        function toPrimitive2(t, r) {
          if ("object" != _typeof2(t) || !t) return t;
          var e = t[Symbol.toPrimitive];
          if (void 0 !== e) {
            var i = e.call(t, r || "default");
            if ("object" != _typeof2(i)) return i;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return ("string" === r ? String : Number)(t);
        }
        module.exports = toPrimitive2, module.exports.__esModule = true, module.exports["default"] = module.exports;
      })(toPrimitive);
      var toPrimitiveExports = toPrimitive.exports;
      (function(module) {
        var _typeof2 = _typeofExports["default"];
        var toPrimitive2 = toPrimitiveExports;
        function toPropertyKey2(t) {
          var i = toPrimitive2(t, "string");
          return "symbol" == _typeof2(i) ? i : i + "";
        }
        module.exports = toPropertyKey2, module.exports.__esModule = true, module.exports["default"] = module.exports;
      })(toPropertyKey);
      var toPropertyKeyExports = toPropertyKey.exports;
      (function(module) {
        var toPropertyKey2 = toPropertyKeyExports;
        function _defineProperty(e, r, t) {
          return (r = toPropertyKey2(r)) in e ? Object.defineProperty(e, r, {
            value: t,
            enumerable: true,
            configurable: true,
            writable: true
          }) : e[r] = t, e;
        }
        module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
      })(defineProperty);
      var definePropertyExports = defineProperty.exports;
      (function(module) {
        var defineProperty2 = definePropertyExports;
        function ownKeys(e, r) {
          var t = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var o = Object.getOwnPropertySymbols(e);
            r && (o = o.filter(function(r2) {
              return Object.getOwnPropertyDescriptor(e, r2).enumerable;
            })), t.push.apply(t, o);
          }
          return t;
        }
        function _objectSpread22(e) {
          for (var r = 1; r < arguments.length; r++) {
            var t = null != arguments[r] ? arguments[r] : {};
            r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
              defineProperty2(e, r2, t[r2]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
              Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
            });
          }
          return e;
        }
        module.exports = _objectSpread22, module.exports.__esModule = true, module.exports["default"] = module.exports;
      })(objectSpread2);
      var objectSpread2Exports = objectSpread2.exports;
      var common = {};
      Object.defineProperty(common, "__esModule", {
        value: true
      });
      common.commonLocale = void 0;
      common.commonLocale = {
        yearFormat: "YYYY",
        dayFormat: "D",
        cellMeridiemFormat: "A",
        monthBeforeYear: true
      };
      var _interopRequireDefault$3 = interopRequireDefaultExports.default;
      Object.defineProperty(zh_CN$2, "__esModule", {
        value: true
      });
      zh_CN$2.default = void 0;
      var _objectSpread2 = _interopRequireDefault$3(objectSpread2Exports);
      var _common = common;
      var locale$2 = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, _common.commonLocale), {}, {
        locale: "zh_CN",
        today: "今天",
        now: "此刻",
        backToToday: "返回今天",
        ok: "确定",
        timeSelect: "选择时间",
        dateSelect: "选择日期",
        weekSelect: "选择周",
        clear: "清除",
        month: "月",
        year: "年",
        previousMonth: "上个月 (翻页上键)",
        nextMonth: "下个月 (翻页下键)",
        monthSelect: "选择月份",
        yearSelect: "选择年份",
        decadeSelect: "选择年代",
        previousYear: "上一年 (Control键加左方向键)",
        nextYear: "下一年 (Control键加右方向键)",
        previousDecade: "上一年代",
        nextDecade: "下一年代",
        previousCentury: "上一世纪",
        nextCentury: "下一世纪",
        yearFormat: "YYYY年",
        cellDateFormat: "D",
        monthBeforeYear: false
      });
      zh_CN$2.default = locale$2;
      var zh_CN$1 = {};
      Object.defineProperty(zh_CN$1, "__esModule", {
        value: true
      });
      zh_CN$1.default = void 0;
      const locale$1 = {
        placeholder: "请选择时间",
        rangePlaceholder: ["开始时间", "结束时间"]
      };
      zh_CN$1.default = locale$1;
      var _interopRequireDefault$2 = interopRequireDefaultExports.default;
      Object.defineProperty(zh_CN$3, "__esModule", {
        value: true
      });
      zh_CN$3.default = void 0;
      var _zh_CN$2 = _interopRequireDefault$2(zh_CN$2);
      var _zh_CN2$1 = _interopRequireDefault$2(zh_CN$1);
      const locale = {
        lang: Object.assign({
          placeholder: "请选择日期",
          yearPlaceholder: "请选择年份",
          quarterPlaceholder: "请选择季度",
          monthPlaceholder: "请选择月份",
          weekPlaceholder: "请选择周",
          rangePlaceholder: ["开始日期", "结束日期"],
          rangeYearPlaceholder: ["开始年份", "结束年份"],
          rangeMonthPlaceholder: ["开始月份", "结束月份"],
          rangeQuarterPlaceholder: ["开始季度", "结束季度"],
          rangeWeekPlaceholder: ["开始周", "结束周"]
        }, _zh_CN$2.default),
        timePickerLocale: Object.assign({}, _zh_CN2$1.default)
      };
      locale.lang.ok = "确定";
      zh_CN$3.default = locale;
      var _interopRequireDefault$1 = interopRequireDefaultExports.default;
      Object.defineProperty(zh_CN$4, "__esModule", {
        value: true
      });
      zh_CN$4.default = void 0;
      var _zh_CN$1 = _interopRequireDefault$1(zh_CN$3);
      zh_CN$4.default = _zh_CN$1.default;
      var _interopRequireDefault = interopRequireDefaultExports.default;
      Object.defineProperty(zh_CN$6, "__esModule", {
        value: true
      });
      zh_CN$6.default = void 0;
      var _zh_CN = _interopRequireDefault(zh_CN$5);
      var _zh_CN2 = _interopRequireDefault(zh_CN$4);
      var _zh_CN3 = _interopRequireDefault(zh_CN$3);
      var _zh_CN4 = _interopRequireDefault(zh_CN$1);
      const typeTemplate = "${label}不是一个有效的${type}";
      const localeValues = {
        locale: "zh-cn",
        Pagination: _zh_CN.default,
        DatePicker: _zh_CN3.default,
        TimePicker: _zh_CN4.default,
        Calendar: _zh_CN2.default,
        // locales for all components
        global: {
          placeholder: "请选择"
        },
        Table: {
          filterTitle: "筛选",
          filterConfirm: "确定",
          filterReset: "重置",
          filterEmptyText: "无筛选项",
          filterCheckall: "全选",
          filterSearchPlaceholder: "在筛选项中搜索",
          emptyText: "暂无数据",
          selectAll: "全选当页",
          selectInvert: "反选当页",
          selectNone: "清空所有",
          selectionAll: "全选所有",
          sortTitle: "排序",
          expand: "展开行",
          collapse: "关闭行",
          triggerDesc: "点击降序",
          triggerAsc: "点击升序",
          cancelSort: "取消排序"
        },
        Modal: {
          okText: "确定",
          cancelText: "取消",
          justOkText: "知道了"
        },
        Tour: {
          Next: "下一步",
          Previous: "上一步",
          Finish: "结束导览"
        },
        Popconfirm: {
          cancelText: "取消",
          okText: "确定"
        },
        Transfer: {
          titles: ["", ""],
          searchPlaceholder: "请输入搜索内容",
          itemUnit: "项",
          itemsUnit: "项",
          remove: "删除",
          selectCurrent: "全选当页",
          removeCurrent: "删除当页",
          selectAll: "全选所有",
          deselectAll: "取消全选",
          removeAll: "删除全部",
          selectInvert: "反选当页"
        },
        Upload: {
          uploading: "文件上传中",
          removeFile: "删除文件",
          uploadError: "上传错误",
          previewFile: "预览文件",
          downloadFile: "下载文件"
        },
        Empty: {
          description: "暂无数据"
        },
        Icon: {
          icon: "图标"
        },
        Text: {
          edit: "编辑",
          copy: "复制",
          copied: "复制成功",
          expand: "展开",
          collapse: "收起"
        },
        Form: {
          optional: "（可选）",
          defaultValidateMessages: {
            default: "字段验证错误${label}",
            required: "请输入${label}",
            enum: "${label}必须是其中一个[${enum}]",
            whitespace: "${label}不能为空字符",
            date: {
              format: "${label}日期格式无效",
              parse: "${label}不能转换为日期",
              invalid: "${label}是一个无效日期"
            },
            types: {
              string: typeTemplate,
              method: typeTemplate,
              array: typeTemplate,
              object: typeTemplate,
              number: typeTemplate,
              date: typeTemplate,
              boolean: typeTemplate,
              integer: typeTemplate,
              float: typeTemplate,
              regexp: typeTemplate,
              email: typeTemplate,
              url: typeTemplate,
              hex: typeTemplate
            },
            string: {
              len: "${label}须为${len}个字符",
              min: "${label}最少${min}个字符",
              max: "${label}最多${max}个字符",
              range: "${label}须在${min}-${max}字符之间"
            },
            number: {
              len: "${label}必须等于${len}",
              min: "${label}最小值为${min}",
              max: "${label}最大值为${max}",
              range: "${label}须在${min}-${max}之间"
            },
            array: {
              len: "须为${len}个${label}",
              min: "最少${min}个${label}",
              max: "最多${max}个${label}",
              range: "${label}数量须在${min}-${max}之间"
            },
            pattern: {
              mismatch: "${label}与模式不匹配${pattern}"
            }
          }
        },
        Image: {
          preview: "预览"
        },
        QRCode: {
          expired: "二维码过期",
          refresh: "点击刷新",
          scanned: "已扫描"
        },
        ColorPicker: {
          presetEmpty: "暂无",
          transparent: "无色",
          singleColor: "单色",
          gradientColor: "渐变色"
        }
      };
      zh_CN$6.default = localeValues;
      var zh_CN = zh_CN$6;
      const zhCN = /* @__PURE__ */ getDefaultExportFromCjs(zh_CN);
      client.createRoot(
        (() => {
          const app = document.createElement("div");
          document.body.append(app);
          return app;
        })()
      ).render(
        /* @__PURE__ */ jsxRuntimeExports.jsx(require$$0.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ConfigProvider, { locale: zhCN, theme, children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) }) })
      );

    })
  };
}));

System.register("./MpegParser-t3JjS_bv-DP4MVn8J.js", ['./__monkey.entry-SDvwpoNt.js', './AbstractID3Parser-FIM36LHz-B5gpnOzd.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge', './ID3v2Parser-eXNf-3mE-7kzMCmWm.js'], (function (exports, module) {
  'use strict';
  var StringType, initDebug, EndOfStreamError$1, getBitAllignedNumber, INT16_BE, Uint8ArrayType, stripNulls, UINT32_BE, makeUnexpectedFileContentError, isBitSet$1, UINT8, UINT16_BE, AbstractID3Parser;
  return {
    setters: [module => {
      StringType = module.S;
      initDebug = module.i;
      EndOfStreamError$1 = module.E;
      getBitAllignedNumber = module.g;
      INT16_BE = module.I;
      Uint8ArrayType = module.U;
      stripNulls = module.s;
      UINT32_BE = module.a;
      makeUnexpectedFileContentError = module.m;
      isBitSet$1 = module.b;
      UINT8 = module.c;
      UINT16_BE = module.d;
    }, module => {
      AbstractID3Parser = module.A;
    }, null, null, null, null, null, null],
    execute: (function () {

      var NameCode;
      (function(NameCode2) {
        NameCode2[NameCode2["not_set"] = 0] = "not_set";
        NameCode2[NameCode2["radio"] = 1] = "radio";
        NameCode2[NameCode2["audiophile"] = 2] = "audiophile";
      })(NameCode || (NameCode = {}));
      var ReplayGainOriginator;
      (function(ReplayGainOriginator2) {
        ReplayGainOriginator2[ReplayGainOriginator2["unspecified"] = 0] = "unspecified";
        ReplayGainOriginator2[ReplayGainOriginator2["engineer"] = 1] = "engineer";
        ReplayGainOriginator2[ReplayGainOriginator2["user"] = 2] = "user";
        ReplayGainOriginator2[ReplayGainOriginator2["automatic"] = 3] = "automatic";
        ReplayGainOriginator2[ReplayGainOriginator2["rms_average"] = 4] = "rms_average";
      })(ReplayGainOriginator || (ReplayGainOriginator = {}));
      const ReplayGain = {
        len: 2,
        get: (buf, off) => {
          const gain_type = getBitAllignedNumber(buf, off, 0, 3);
          const sign = getBitAllignedNumber(buf, off, 6, 1);
          const gain_adj = getBitAllignedNumber(buf, off, 7, 9) / 10;
          if (gain_type > 0) {
            return {
              type: getBitAllignedNumber(buf, off, 0, 3),
              origin: getBitAllignedNumber(buf, off, 3, 3),
              adjustment: sign ? -gain_adj : gain_adj
            };
          }
          return void 0;
        }
      };
      const ExtendedLameHeader = {
        len: 27,
        get: (buf, off) => {
          const track_peak = UINT32_BE.get(buf, off + 2);
          return {
            revision: getBitAllignedNumber(buf, off, 0, 4),
            vbr_method: getBitAllignedNumber(buf, off, 4, 4),
            lowpass_filter: 100 * UINT8.get(buf, off + 1),
            track_peak: track_peak === 0 ? null : track_peak / 2 ** 23,
            track_gain: ReplayGain.get(buf, 6),
            album_gain: ReplayGain.get(buf, 8),
            music_length: UINT32_BE.get(buf, off + 20),
            music_crc: UINT8.get(buf, off + 24),
            header_crc: UINT16_BE.get(buf, off + 24)
          };
        }
      };
      const InfoTagHeaderTag = new StringType(4, "ascii");
      const LameEncoderVersion = new StringType(6, "ascii");
      const XingHeaderFlags = {
        len: 4,
        get: (buf, off) => {
          return {
            frames: isBitSet$1(buf, off, 31),
            bytes: isBitSet$1(buf, off, 30),
            toc: isBitSet$1(buf, off, 29),
            vbrScale: isBitSet$1(buf, off, 28)
          };
        }
      };
      async function readXingHeader(tokenizer) {
        const flags = await tokenizer.readToken(XingHeaderFlags);
        const xingInfoTag = { numFrames: null, streamSize: null, vbrScale: null };
        if (flags.frames) {
          xingInfoTag.numFrames = await tokenizer.readToken(UINT32_BE);
        }
        if (flags.bytes) {
          xingInfoTag.streamSize = await tokenizer.readToken(UINT32_BE);
        }
        if (flags.toc) {
          xingInfoTag.toc = new Uint8Array(100);
          await tokenizer.readBuffer(xingInfoTag.toc);
        }
        if (flags.vbrScale) {
          xingInfoTag.vbrScale = await tokenizer.readToken(UINT32_BE);
        }
        const lameTag = await tokenizer.peekToken(new StringType(4, "ascii"));
        if (lameTag === "LAME") {
          await tokenizer.ignore(4);
          xingInfoTag.lame = {
            version: await tokenizer.readToken(new StringType(5, "ascii"))
          };
          const match = xingInfoTag.lame.version.match(/\d+.\d+/g);
          if (match !== null) {
            const majorMinorVersion = match[0];
            const version = majorMinorVersion.split(".").map((n) => Number.parseInt(n, 10));
            if (version[0] >= 3 && version[1] >= 90) {
              xingInfoTag.lame.extended = await tokenizer.readToken(ExtendedLameHeader);
            }
          }
        }
        return xingInfoTag;
      }
      const debug = initDebug("music-metadata:parser:mpeg");
      class MpegContentError extends makeUnexpectedFileContentError("MPEG") {
      } exports("MpegContentError", MpegContentError);
      const maxPeekLen = 1024;
      const MPEG4 = {
        /**
         * Audio Object Types
         */
        AudioObjectTypes: [
          "AAC Main",
          "AAC LC",
          // Low Complexity
          "AAC SSR",
          // Scalable Sample Rate
          "AAC LTP"
          // Long Term Prediction
        ],
        /**
         * Sampling Frequencies
         * https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Sampling_Frequencies
         */
        SamplingFrequencies: [
          96e3,
          88200,
          64e3,
          48e3,
          44100,
          32e3,
          24e3,
          22050,
          16e3,
          12e3,
          11025,
          8e3,
          7350,
          null,
          null,
          -1
        ]
        /**
         * Channel Configurations
         */
      };
      const MPEG4_ChannelConfigurations = [
        void 0,
        ["front-center"],
        ["front-left", "front-right"],
        ["front-center", "front-left", "front-right"],
        ["front-center", "front-left", "front-right", "back-center"],
        ["front-center", "front-left", "front-right", "back-left", "back-right"],
        ["front-center", "front-left", "front-right", "back-left", "back-right", "LFE-channel"],
        ["front-center", "front-left", "front-right", "side-left", "side-right", "back-left", "back-right", "LFE-channel"]
      ];
      class MpegFrameHeader {
        constructor(buf, off) {
          this.bitrateIndex = null;
          this.sampRateFreqIndex = null;
          this.padding = null;
          this.privateBit = null;
          this.channelModeIndex = null;
          this.modeExtension = null;
          this.isOriginalMedia = null;
          this.version = null;
          this.bitrate = null;
          this.samplingRate = null;
          this.frameLength = 0;
          this.versionIndex = getBitAllignedNumber(buf, off + 1, 3, 2);
          this.layer = MpegFrameHeader.LayerDescription[getBitAllignedNumber(buf, off + 1, 5, 2)];
          if (this.versionIndex > 1 && this.layer === 0) {
            this.parseAdtsHeader(buf, off);
          } else {
            this.parseMpegHeader(buf, off);
          }
          this.isProtectedByCRC = !isBitSet$1(buf, off + 1, 7);
        }
        calcDuration(numFrames) {
          return this.samplingRate == null ? null : numFrames * this.calcSamplesPerFrame() / this.samplingRate;
        }
        calcSamplesPerFrame() {
          return MpegFrameHeader.samplesInFrameTable[this.version === 1 ? 0 : 1][this.layer];
        }
        calculateSideInfoLength() {
          if (this.layer !== 3)
            return 2;
          if (this.channelModeIndex === 3) {
            if (this.version === 1) {
              return 17;
            }
            if (this.version === 2 || this.version === 2.5) {
              return 9;
            }
          } else {
            if (this.version === 1) {
              return 32;
            }
            if (this.version === 2 || this.version === 2.5) {
              return 17;
            }
          }
          return null;
        }
        calcSlotSize() {
          return [null, 4, 1, 1][this.layer];
        }
        parseMpegHeader(buf, off) {
          this.container = "MPEG";
          this.bitrateIndex = getBitAllignedNumber(buf, off + 2, 0, 4);
          this.sampRateFreqIndex = getBitAllignedNumber(buf, off + 2, 4, 2);
          this.padding = isBitSet$1(buf, off + 2, 6);
          this.privateBit = isBitSet$1(buf, off + 2, 7);
          this.channelModeIndex = getBitAllignedNumber(buf, off + 3, 0, 2);
          this.modeExtension = getBitAllignedNumber(buf, off + 3, 2, 2);
          this.isCopyrighted = isBitSet$1(buf, off + 3, 4);
          this.isOriginalMedia = isBitSet$1(buf, off + 3, 5);
          this.emphasis = getBitAllignedNumber(buf, off + 3, 7, 2);
          this.version = MpegFrameHeader.VersionID[this.versionIndex];
          this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];
          this.codec = `MPEG ${this.version} Layer ${this.layer}`;
          const bitrateInKbps = this.calcBitrate();
          if (!bitrateInKbps) {
            throw new MpegContentError("Cannot determine bit-rate");
          }
          this.bitrate = bitrateInKbps * 1e3;
          this.samplingRate = this.calcSamplingRate();
          if (this.samplingRate == null) {
            throw new MpegContentError("Cannot determine sampling-rate");
          }
        }
        parseAdtsHeader(buf, off) {
          debug("layer=0 => ADTS");
          this.version = this.versionIndex === 2 ? 4 : 2;
          this.container = `ADTS/MPEG-${this.version}`;
          const profileIndex = getBitAllignedNumber(buf, off + 2, 0, 2);
          this.codec = "AAC";
          this.codecProfile = MPEG4.AudioObjectTypes[profileIndex];
          debug(`MPEG-4 audio-codec=${this.codec}`);
          const samplingFrequencyIndex = getBitAllignedNumber(buf, off + 2, 2, 4);
          this.samplingRate = MPEG4.SamplingFrequencies[samplingFrequencyIndex];
          debug(`sampling-rate=${this.samplingRate}`);
          const channelIndex = getBitAllignedNumber(buf, off + 2, 7, 3);
          this.mp4ChannelConfig = MPEG4_ChannelConfigurations[channelIndex];
          debug(`channel-config=${this.mp4ChannelConfig ? this.mp4ChannelConfig.join("+") : "?"}`);
          this.frameLength = getBitAllignedNumber(buf, off + 3, 6, 2) << 11;
        }
        calcBitrate() {
          if (this.bitrateIndex === 0 || // free
          this.bitrateIndex === 15) {
            return null;
          }
          if (this.version && this.bitrateIndex) {
            const codecIndex = 10 * Math.floor(this.version) + this.layer;
            return MpegFrameHeader.bitrate_index[this.bitrateIndex][codecIndex];
          }
          return null;
        }
        calcSamplingRate() {
          if (this.sampRateFreqIndex === 3 || this.version === null || this.sampRateFreqIndex == null)
            return null;
          return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];
        }
      }
      MpegFrameHeader.SyncByte1 = 255;
      MpegFrameHeader.SyncByte2 = 224;
      MpegFrameHeader.VersionID = [2.5, null, 2, 1];
      MpegFrameHeader.LayerDescription = [0, 3, 2, 1];
      MpegFrameHeader.ChannelMode = ["stereo", "joint_stereo", "dual_channel", "mono"];
      MpegFrameHeader.bitrate_index = {
        1: { 11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8 },
        2: { 11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16 },
        3: { 11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24 },
        4: { 11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32 },
        5: { 11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40 },
        6: { 11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48 },
        7: { 11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56 },
        8: { 11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64 },
        9: { 11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80 },
        10: { 11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96 },
        11: { 11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112 },
        12: { 11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128 },
        13: { 11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144 },
        14: { 11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160 }
      };
      MpegFrameHeader.sampling_rate_freq_index = {
        1: { 0: 44100, 1: 48e3, 2: 32e3 },
        2: { 0: 22050, 1: 24e3, 2: 16e3 },
        2.5: { 0: 11025, 1: 12e3, 2: 8e3 }
      };
      MpegFrameHeader.samplesInFrameTable = [
        /* Layer   I    II   III */
        [0, 384, 1152, 1152],
        // MPEG-1
        [0, 384, 1152, 576]
        // MPEG-2(.5
      ];
      const FrameHeader = {
        len: 4,
        get: (buf, off) => {
          return new MpegFrameHeader(buf, off);
        }
      };
      function getVbrCodecProfile(vbrScale) {
        return `V${Math.floor((100 - vbrScale) / 10)}`;
      }
      class MpegParser extends AbstractID3Parser {
        constructor() {
          super(...arguments);
          this.frameCount = 0;
          this.syncFrameCount = -1;
          this.countSkipFrameData = 0;
          this.totalDataLength = 0;
          this.bitrates = [];
          this.offset = 0;
          this.frame_size = 0;
          this.crc = null;
          this.calculateEofDuration = false;
          this.samplesPerFrame = null;
          this.buf_frame_header = new Uint8Array(4);
          this.mpegOffset = null;
          this.syncPeek = {
            buf: new Uint8Array(maxPeekLen),
            len: 0
          };
        }
        /**
         * Called after ID3 headers have been parsed
         */
        async postId3v2Parse() {
          this.metadata.setFormat("lossless", false);
          try {
            let quit = false;
            while (!quit) {
              await this.sync();
              quit = await this.parseCommonMpegHeader();
            }
          } catch (err) {
            if (err instanceof EndOfStreamError$1) {
              debug("End-of-stream");
              if (this.calculateEofDuration) {
                if (this.samplesPerFrame !== null) {
                  const numberOfSamples = this.frameCount * this.samplesPerFrame;
                  this.metadata.setFormat("numberOfSamples", numberOfSamples);
                  if (this.metadata.format.sampleRate) {
                    const duration = numberOfSamples / this.metadata.format.sampleRate;
                    debug(`Calculate duration at EOF: ${duration} sec.`, duration);
                    this.metadata.setFormat("duration", duration);
                  }
                }
              }
            } else {
              throw err;
            }
          }
        }
        /**
         * Called after file has been fully parsed, this allows, if present, to exclude the ID3v1.1 header length
         */
        finalize() {
          const format = this.metadata.format;
          const hasID3v1 = !!this.metadata.native.ID3v1;
          if (this.mpegOffset !== null) {
            if (format.duration && this.tokenizer.fileInfo.size) {
              const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);
              if (format.codecProfile && format.codecProfile[0] === "V") {
                this.metadata.setFormat("bitrate", mpegSize * 8 / format.duration);
              }
            }
            if (this.tokenizer.fileInfo.size && format.codecProfile === "CBR") {
              const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);
              if (this.frame_size !== null && this.samplesPerFrame !== null) {
                const numberOfSamples = Math.round(mpegSize / this.frame_size) * this.samplesPerFrame;
                this.metadata.setFormat("numberOfSamples", numberOfSamples);
                if (format.sampleRate && !format.duration) {
                  const duration = numberOfSamples / format.sampleRate;
                  debug("Calculate CBR duration based on file size: %s", duration);
                  this.metadata.setFormat("duration", duration);
                }
              }
            }
          }
        }
        async sync() {
          let gotFirstSync = false;
          while (true) {
            let bo = 0;
            this.syncPeek.len = await this.tokenizer.peekBuffer(this.syncPeek.buf, { length: maxPeekLen, mayBeLess: true });
            if (this.syncPeek.len <= 163) {
              throw new EndOfStreamError$1();
            }
            while (true) {
              if (gotFirstSync && (this.syncPeek.buf[bo] & 224) === 224) {
                this.buf_frame_header[0] = MpegFrameHeader.SyncByte1;
                this.buf_frame_header[1] = this.syncPeek.buf[bo];
                await this.tokenizer.ignore(bo);
                debug(`Sync at offset=${this.tokenizer.position - 1}, frameCount=${this.frameCount}`);
                if (this.syncFrameCount === this.frameCount) {
                  debug(`Re-synced MPEG stream, frameCount=${this.frameCount}`);
                  this.frameCount = 0;
                  this.frame_size = 0;
                }
                this.syncFrameCount = this.frameCount;
                return;
              }
              gotFirstSync = false;
              bo = this.syncPeek.buf.indexOf(MpegFrameHeader.SyncByte1, bo);
              if (bo === -1) {
                if (this.syncPeek.len < this.syncPeek.buf.length) {
                  throw new EndOfStreamError$1();
                }
                await this.tokenizer.ignore(this.syncPeek.len);
                break;
              }
              ++bo;
              gotFirstSync = true;
            }
          }
        }
        /**
         * Combined ADTS & MPEG (MP2 & MP3) header handling
         * @return {Promise<boolean>} true if parser should quit
         */
        async parseCommonMpegHeader() {
          if (this.frameCount === 0) {
            this.mpegOffset = this.tokenizer.position - 1;
          }
          await this.tokenizer.peekBuffer(this.buf_frame_header.subarray(1), { length: 3 });
          let header;
          try {
            header = FrameHeader.get(this.buf_frame_header, 0);
          } catch (err) {
            await this.tokenizer.ignore(1);
            if (err instanceof Error) {
              this.metadata.addWarning(`Parse error: ${err.message}`);
              return false;
            }
            throw err;
          }
          await this.tokenizer.ignore(3);
          this.metadata.setFormat("container", header.container);
          this.metadata.setFormat("codec", header.codec);
          this.metadata.setFormat("lossless", false);
          this.metadata.setFormat("sampleRate", header.samplingRate);
          this.frameCount++;
          return header.version !== null && header.version >= 2 && header.layer === 0 ? this.parseAdts(header) : this.parseAudioFrameHeader(header);
        }
        /**
         * @return {Promise<boolean>} true if parser should quit
         */
        async parseAudioFrameHeader(header) {
          this.metadata.setFormat("numberOfChannels", header.channelMode === "mono" ? 1 : 2);
          this.metadata.setFormat("bitrate", header.bitrate);
          if (this.frameCount < 20 * 1e4) {
            debug("offset=%s MP%s bitrate=%s sample-rate=%s", this.tokenizer.position - 4, header.layer, header.bitrate, header.samplingRate);
          }
          const slot_size = header.calcSlotSize();
          if (slot_size === null) {
            throw new MpegContentError("invalid slot_size");
          }
          const samples_per_frame = header.calcSamplesPerFrame();
          debug(`samples_per_frame=${samples_per_frame}`);
          const bps = samples_per_frame / 8;
          if (header.bitrate !== null && header.samplingRate != null) {
            const fsize = bps * header.bitrate / header.samplingRate + (header.padding ? slot_size : 0);
            this.frame_size = Math.floor(fsize);
          }
          this.audioFrameHeader = header;
          if (header.bitrate !== null) {
            this.bitrates.push(header.bitrate);
          }
          if (this.frameCount === 1) {
            this.offset = FrameHeader.len;
            await this.skipSideInformation();
            return false;
          }
          if (this.frameCount === 3) {
            if (this.areAllSame(this.bitrates)) {
              this.samplesPerFrame = samples_per_frame;
              this.metadata.setFormat("codecProfile", "CBR");
              if (this.tokenizer.fileInfo.size)
                return true;
            } else if (this.metadata.format.duration) {
              return true;
            }
            if (!this.options.duration) {
              return true;
            }
          }
          if (this.options.duration && this.frameCount === 4) {
            this.samplesPerFrame = samples_per_frame;
            this.calculateEofDuration = true;
          }
          this.offset = 4;
          if (header.isProtectedByCRC) {
            await this.parseCrc();
            return false;
          }
          await this.skipSideInformation();
          return false;
        }
        async parseAdts(header) {
          const buf = new Uint8Array(3);
          await this.tokenizer.readBuffer(buf);
          header.frameLength += getBitAllignedNumber(buf, 0, 0, 11);
          this.totalDataLength += header.frameLength;
          this.samplesPerFrame = 1024;
          if (header.samplingRate !== null) {
            const framesPerSec = header.samplingRate / this.samplesPerFrame;
            const bytesPerFrame = this.frameCount === 0 ? 0 : this.totalDataLength / this.frameCount;
            const bitrate = 8 * bytesPerFrame * framesPerSec + 0.5;
            this.metadata.setFormat("bitrate", bitrate);
            debug(`frame-count=${this.frameCount}, size=${header.frameLength} bytes, bit-rate=${bitrate}`);
          }
          await this.tokenizer.ignore(header.frameLength > 7 ? header.frameLength - 7 : 1);
          if (this.frameCount === 3) {
            this.metadata.setFormat("codecProfile", header.codecProfile);
            if (header.mp4ChannelConfig) {
              this.metadata.setFormat("numberOfChannels", header.mp4ChannelConfig.length);
            }
            if (this.options.duration) {
              this.calculateEofDuration = true;
            } else {
              return true;
            }
          }
          return false;
        }
        async parseCrc() {
          this.crc = await this.tokenizer.readNumber(INT16_BE);
          this.offset += 2;
          return this.skipSideInformation();
        }
        async skipSideInformation() {
          if (this.audioFrameHeader) {
            const sideinfo_length = this.audioFrameHeader.calculateSideInfoLength();
            if (sideinfo_length !== null) {
              await this.tokenizer.readToken(new Uint8ArrayType(sideinfo_length));
              this.offset += sideinfo_length;
              await this.readXtraInfoHeader();
              return;
            }
          }
        }
        async readXtraInfoHeader() {
          const headerTag = await this.tokenizer.readToken(InfoTagHeaderTag);
          this.offset += InfoTagHeaderTag.len;
          switch (headerTag) {
            case "Info":
              this.metadata.setFormat("codecProfile", "CBR");
              return this.readXingInfoHeader();
            case "Xing": {
              const infoTag = await this.readXingInfoHeader();
              if (infoTag.vbrScale !== null) {
                const codecProfile = getVbrCodecProfile(infoTag.vbrScale);
                this.metadata.setFormat("codecProfile", codecProfile);
              }
              return null;
            }
            case "Xtra":
              break;
            case "LAME": {
              const version = await this.tokenizer.readToken(LameEncoderVersion);
              if (this.frame_size !== null && this.frame_size >= this.offset + LameEncoderVersion.len) {
                this.offset += LameEncoderVersion.len;
                this.metadata.setFormat("tool", `LAME ${version}`);
                await this.skipFrameData(this.frame_size - this.offset);
                return null;
              }
              this.metadata.addWarning("Corrupt LAME header");
              break;
            }
          }
          const frameDataLeft = this.frame_size - this.offset;
          if (frameDataLeft < 0) {
            this.metadata.addWarning(`Frame ${this.frameCount}corrupt: negative frameDataLeft`);
          } else {
            await this.skipFrameData(frameDataLeft);
          }
          return null;
        }
        /**
         * Ref: http://gabriel.mp3-tech.org/mp3infotag.html
         * @returns {Promise<string>}
         */
        async readXingInfoHeader() {
          const offset = this.tokenizer.position;
          const infoTag = await readXingHeader(this.tokenizer);
          this.offset += this.tokenizer.position - offset;
          if (infoTag.lame) {
            this.metadata.setFormat("tool", `LAME ${stripNulls(infoTag.lame.version)}`);
            if (infoTag.lame.extended) {
              this.metadata.setFormat("trackPeakLevel", infoTag.lame.extended.track_peak);
              if (infoTag.lame.extended.track_gain) {
                this.metadata.setFormat("trackGain", infoTag.lame.extended.track_gain.adjustment);
              }
              if (infoTag.lame.extended.album_gain) {
                this.metadata.setFormat("albumGain", infoTag.lame.extended.album_gain.adjustment);
              }
              this.metadata.setFormat("duration", infoTag.lame.extended.music_length / 1e3);
            }
          }
          if (infoTag.streamSize && this.audioFrameHeader && infoTag.numFrames !== null) {
            const duration = this.audioFrameHeader.calcDuration(infoTag.numFrames);
            this.metadata.setFormat("duration", duration);
            debug("Get duration from Xing header: %s", this.metadata.format.duration);
            return infoTag;
          }
          const frameDataLeft = this.frame_size - this.offset;
          await this.skipFrameData(frameDataLeft);
          return infoTag;
        }
        async skipFrameData(frameDataLeft) {
          if (frameDataLeft < 0)
            throw new MpegContentError("frame-data-left cannot be negative");
          await this.tokenizer.ignore(frameDataLeft);
          this.countSkipFrameData += frameDataLeft;
        }
        areAllSame(array) {
          const first = array[0];
          return array.every((element) => {
            return element === first;
          });
        }
      } exports("MpegParser", MpegParser);

    })
  };
}));

System.register("./AsfParser-6pj_dtO9-DydKPSph.js", ['./__monkey.entry-SDvwpoNt.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge'], (function (exports, module) {
  'use strict';
  var initDebug, BasicParser, TrackType, uint8ArrayToHex, hexToUint8Array, makeUnexpectedFileContentError, UINT64_LE, UINT32_LE, getBit, UINT16_LE, stripNulls, decodeString, StringType, AttachedPictureType;
  return {
    setters: [module => {
      initDebug = module.i;
      BasicParser = module.B;
      TrackType = module.T;
      uint8ArrayToHex = module.u;
      hexToUint8Array = module.h;
      makeUnexpectedFileContentError = module.m;
      UINT64_LE = module.e;
      UINT32_LE = module.f;
      getBit = module.j;
      UINT16_LE = module.k;
      stripNulls = module.s;
      decodeString = module.l;
      StringType = module.S;
      AttachedPictureType = module.A;
    }, null, null, null, null, null],
    execute: (function () {

      class GUID {
        static fromBin(bin, offset = 0) {
          return new GUID(GUID.decode(bin, offset));
        }
        /**
         * Decode GUID in format like "B503BF5F-2EA9-CF11-8EE3-00C00C205365"
         * @param objectId Binary GUID
         * @param offset Read offset in bytes, default 0
         * @returns GUID as dashed hexadecimal representation
         */
        static decode(objectId, offset = 0) {
          const view = new DataView(objectId.buffer, offset);
          const guid = `${view.getUint32(0, true).toString(16)}-${view.getUint16(4, true).toString(16)}-${view.getUint16(6, true).toString(16)}-${view.getUint16(8).toString(16)}-${uint8ArrayToHex(objectId.slice(offset + 10, offset + 16))}`;
          return guid.toUpperCase();
        }
        /**
         * Decode stream type
         * @param mediaType Media type GUID
         * @returns Media type
         */
        static decodeMediaType(mediaType) {
          switch (mediaType.str) {
            case GUID.AudioMedia.str:
              return "audio";
            case GUID.VideoMedia.str:
              return "video";
            case GUID.CommandMedia.str:
              return "command";
            case GUID.Degradable_JPEG_Media.str:
              return "degradable-jpeg";
            case GUID.FileTransferMedia.str:
              return "file-transfer";
            case GUID.BinaryMedia.str:
              return "binary";
          }
        }
        /**
         * Encode GUID
         * @param guid GUID like: "B503BF5F-2EA9-CF11-8EE3-00C00C205365"
         * @returns Encoded Binary GUID
         */
        static encode(str) {
          const bin = new Uint8Array(16);
          const view = new DataView(bin.buffer);
          view.setUint32(0, Number.parseInt(str.slice(0, 8), 16), true);
          view.setUint16(4, Number.parseInt(str.slice(9, 13), 16), true);
          view.setUint16(6, Number.parseInt(str.slice(14, 18), 16), true);
          bin.set(hexToUint8Array(str.slice(19, 23)), 8);
          bin.set(hexToUint8Array(str.slice(24)), 10);
          return bin;
        }
        constructor(str) {
          this.str = str;
        }
        equals(guid) {
          return this.str === guid.str;
        }
        toBin() {
          return GUID.encode(this.str);
        }
      }
      GUID.HeaderObject = new GUID("75B22630-668E-11CF-A6D9-00AA0062CE6C");
      GUID.DataObject = new GUID("75B22636-668E-11CF-A6D9-00AA0062CE6C");
      GUID.SimpleIndexObject = new GUID("33000890-E5B1-11CF-89F4-00A0C90349CB");
      GUID.IndexObject = new GUID("D6E229D3-35DA-11D1-9034-00A0C90349BE");
      GUID.MediaObjectIndexObject = new GUID("FEB103F8-12AD-4C64-840F-2A1D2F7AD48C");
      GUID.TimecodeIndexObject = new GUID("3CB73FD0-0C4A-4803-953D-EDF7B6228F0C");
      GUID.FilePropertiesObject = new GUID("8CABDCA1-A947-11CF-8EE4-00C00C205365");
      GUID.StreamPropertiesObject = new GUID("B7DC0791-A9B7-11CF-8EE6-00C00C205365");
      GUID.HeaderExtensionObject = new GUID("5FBF03B5-A92E-11CF-8EE3-00C00C205365");
      GUID.CodecListObject = new GUID("86D15240-311D-11D0-A3A4-00A0C90348F6");
      GUID.ScriptCommandObject = new GUID("1EFB1A30-0B62-11D0-A39B-00A0C90348F6");
      GUID.MarkerObject = new GUID("F487CD01-A951-11CF-8EE6-00C00C205365");
      GUID.BitrateMutualExclusionObject = new GUID("D6E229DC-35DA-11D1-9034-00A0C90349BE");
      GUID.ErrorCorrectionObject = new GUID("75B22635-668E-11CF-A6D9-00AA0062CE6C");
      GUID.ContentDescriptionObject = new GUID("75B22633-668E-11CF-A6D9-00AA0062CE6C");
      GUID.ExtendedContentDescriptionObject = new GUID("D2D0A440-E307-11D2-97F0-00A0C95EA850");
      GUID.ContentBrandingObject = new GUID("2211B3FA-BD23-11D2-B4B7-00A0C955FC6E");
      GUID.StreamBitratePropertiesObject = new GUID("7BF875CE-468D-11D1-8D82-006097C9A2B2");
      GUID.ContentEncryptionObject = new GUID("2211B3FB-BD23-11D2-B4B7-00A0C955FC6E");
      GUID.ExtendedContentEncryptionObject = new GUID("298AE614-2622-4C17-B935-DAE07EE9289C");
      GUID.DigitalSignatureObject = new GUID("2211B3FC-BD23-11D2-B4B7-00A0C955FC6E");
      GUID.PaddingObject = new GUID("1806D474-CADF-4509-A4BA-9AABCB96AAE8");
      GUID.ExtendedStreamPropertiesObject = new GUID("14E6A5CB-C672-4332-8399-A96952065B5A");
      GUID.AdvancedMutualExclusionObject = new GUID("A08649CF-4775-4670-8A16-6E35357566CD");
      GUID.GroupMutualExclusionObject = new GUID("D1465A40-5A79-4338-B71B-E36B8FD6C249");
      GUID.StreamPrioritizationObject = new GUID("D4FED15B-88D3-454F-81F0-ED5C45999E24");
      GUID.BandwidthSharingObject = new GUID("A69609E6-517B-11D2-B6AF-00C04FD908E9");
      GUID.LanguageListObject = new GUID("7C4346A9-EFE0-4BFC-B229-393EDE415C85");
      GUID.MetadataObject = new GUID("C5F8CBEA-5BAF-4877-8467-AA8C44FA4CCA");
      GUID.MetadataLibraryObject = new GUID("44231C94-9498-49D1-A141-1D134E457054");
      GUID.IndexParametersObject = new GUID("D6E229DF-35DA-11D1-9034-00A0C90349BE");
      GUID.MediaObjectIndexParametersObject = new GUID("6B203BAD-3F11-48E4-ACA8-D7613DE2CFA7");
      GUID.TimecodeIndexParametersObject = new GUID("F55E496D-9797-4B5D-8C8B-604DFE9BFB24");
      GUID.CompatibilityObject = new GUID("26F18B5D-4584-47EC-9F5F-0E651F0452C9");
      GUID.AdvancedContentEncryptionObject = new GUID("43058533-6981-49E6-9B74-AD12CB86D58C");
      GUID.AudioMedia = new GUID("F8699E40-5B4D-11CF-A8FD-00805F5C442B");
      GUID.VideoMedia = new GUID("BC19EFC0-5B4D-11CF-A8FD-00805F5C442B");
      GUID.CommandMedia = new GUID("59DACFC0-59E6-11D0-A3AC-00A0C90348F6");
      GUID.JFIF_Media = new GUID("B61BE100-5B4E-11CF-A8FD-00805F5C442B");
      GUID.Degradable_JPEG_Media = new GUID("35907DE0-E415-11CF-A917-00805F5C442B");
      GUID.FileTransferMedia = new GUID("91BD222C-F21C-497A-8B6D-5AA86BFC0185");
      GUID.BinaryMedia = new GUID("3AFB65E2-47EF-40F2-AC2C-70A90D71D343");
      GUID.ASF_Index_Placeholder_Object = new GUID("D9AADE20-7C17-4F9C-BC28-8555DD98E2A2");
      function getParserForAttr(i) {
        return attributeParsers[i];
      }
      function parseUnicodeAttr(uint8Array) {
        return stripNulls(decodeString(uint8Array, "utf-16le"));
      }
      const attributeParsers = [
        parseUnicodeAttr,
        parseByteArrayAttr,
        parseBoolAttr,
        parseDWordAttr,
        parseQWordAttr,
        parseWordAttr,
        parseByteArrayAttr
      ];
      function parseByteArrayAttr(buf) {
        return new Uint8Array(buf);
      }
      function parseBoolAttr(buf, offset = 0) {
        return parseWordAttr(buf, offset) === 1;
      }
      function parseDWordAttr(buf, offset = 0) {
        return UINT32_LE.get(buf, offset);
      }
      function parseQWordAttr(buf, offset = 0) {
        return UINT64_LE.get(buf, offset);
      }
      function parseWordAttr(buf, offset = 0) {
        return UINT16_LE.get(buf, offset);
      }
      class AsfContentParseError extends makeUnexpectedFileContentError("ASF") {
      }
      var DataType;
      (function(DataType2) {
        DataType2[DataType2["UnicodeString"] = 0] = "UnicodeString";
        DataType2[DataType2["ByteArray"] = 1] = "ByteArray";
        DataType2[DataType2["Bool"] = 2] = "Bool";
        DataType2[DataType2["DWord"] = 3] = "DWord";
        DataType2[DataType2["QWord"] = 4] = "QWord";
        DataType2[DataType2["Word"] = 5] = "Word";
      })(DataType || (DataType = {}));
      const TopLevelHeaderObjectToken = {
        len: 30,
        get: (buf, off) => {
          return {
            objectId: GUID.fromBin(buf, off),
            objectSize: Number(UINT64_LE.get(buf, off + 16)),
            numberOfHeaderObjects: UINT32_LE.get(buf, off + 24)
            // Reserved: 2 bytes
          };
        }
      };
      const HeaderObjectToken = {
        len: 24,
        get: (buf, off) => {
          return {
            objectId: GUID.fromBin(buf, off),
            objectSize: Number(UINT64_LE.get(buf, off + 16))
          };
        }
      };
      class State {
        constructor(header) {
          this.len = Number(header.objectSize) - HeaderObjectToken.len;
        }
        postProcessTag(tags, name, valueType, data) {
          if (name === "WM/Picture") {
            tags.push({ id: name, value: WmPictureToken.fromBuffer(data) });
          } else {
            const parseAttr = getParserForAttr(valueType);
            if (!parseAttr) {
              throw new AsfContentParseError(`unexpected value headerType: ${valueType}`);
            }
            tags.push({ id: name, value: parseAttr(data) });
          }
        }
      }
      class IgnoreObjectState extends State {
        get(buf, off) {
          return null;
        }
      }
      class FilePropertiesObject extends State {
        get(buf, off) {
          return {
            fileId: GUID.fromBin(buf, off),
            fileSize: UINT64_LE.get(buf, off + 16),
            creationDate: UINT64_LE.get(buf, off + 24),
            dataPacketsCount: UINT64_LE.get(buf, off + 32),
            playDuration: UINT64_LE.get(buf, off + 40),
            sendDuration: UINT64_LE.get(buf, off + 48),
            preroll: UINT64_LE.get(buf, off + 56),
            flags: {
              broadcast: getBit(buf, off + 64, 24),
              seekable: getBit(buf, off + 64, 25)
            },
            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),
            minimumDataPacketSize: UINT32_LE.get(buf, off + 68),
            maximumDataPacketSize: UINT32_LE.get(buf, off + 72),
            maximumBitrate: UINT32_LE.get(buf, off + 76)
          };
        }
      }
      FilePropertiesObject.guid = GUID.FilePropertiesObject;
      class StreamPropertiesObject extends State {
        get(buf, off) {
          return {
            streamType: GUID.decodeMediaType(GUID.fromBin(buf, off)),
            errorCorrectionType: GUID.fromBin(buf, off + 8)
            // ToDo
          };
        }
      }
      StreamPropertiesObject.guid = GUID.StreamPropertiesObject;
      class HeaderExtensionObject {
        constructor() {
          this.len = 22;
        }
        get(buf, off) {
          const view = new DataView(buf.buffer, off);
          return {
            reserved1: GUID.fromBin(buf, off),
            reserved2: view.getUint16(16, true),
            extensionDataSize: view.getUint16(18, true)
          };
        }
      }
      HeaderExtensionObject.guid = GUID.HeaderExtensionObject;
      const CodecListObjectHeader = {
        len: 20,
        get: (buf, off) => {
          const view = new DataView(buf.buffer, off);
          return {
            entryCount: view.getUint16(16, true)
          };
        }
      };
      async function readString(tokenizer) {
        const length = await tokenizer.readNumber(UINT16_LE);
        return (await tokenizer.readToken(new StringType(length * 2, "utf-16le"))).replace("\0", "");
      }
      async function readCodecEntries(tokenizer) {
        const codecHeader = await tokenizer.readToken(CodecListObjectHeader);
        const entries = [];
        for (let i = 0; i < codecHeader.entryCount; ++i) {
          entries.push(await readCodecEntry(tokenizer));
        }
        return entries;
      }
      async function readInformation(tokenizer) {
        const length = await tokenizer.readNumber(UINT16_LE);
        const buf = new Uint8Array(length);
        await tokenizer.readBuffer(buf);
        return buf;
      }
      async function readCodecEntry(tokenizer) {
        const type = await tokenizer.readNumber(UINT16_LE);
        return {
          type: {
            videoCodec: (type & 1) === 1,
            audioCodec: (type & 2) === 2
          },
          codecName: await readString(tokenizer),
          description: await readString(tokenizer),
          information: await readInformation(tokenizer)
        };
      }
      class ContentDescriptionObjectState extends State {
        get(buf, off) {
          const tags = [];
          const view = new DataView(buf.buffer, off);
          let pos = 10;
          for (let i = 0; i < ContentDescriptionObjectState.contentDescTags.length; ++i) {
            const length = view.getUint16(i * 2, true);
            if (length > 0) {
              const tagName = ContentDescriptionObjectState.contentDescTags[i];
              const end = pos + length;
              tags.push({ id: tagName, value: parseUnicodeAttr(buf.slice(off + pos, off + end)) });
              pos = end;
            }
          }
          return tags;
        }
      }
      ContentDescriptionObjectState.guid = GUID.ContentDescriptionObject;
      ContentDescriptionObjectState.contentDescTags = ["Title", "Author", "Copyright", "Description", "Rating"];
      class ExtendedContentDescriptionObjectState extends State {
        get(buf, off) {
          const tags = [];
          const view = new DataView(buf.buffer, off);
          const attrCount = view.getUint16(0, true);
          let pos = 2;
          for (let i = 0; i < attrCount; i += 1) {
            const nameLen = view.getUint16(pos, true);
            pos += 2;
            const name = parseUnicodeAttr(buf.slice(off + pos, off + pos + nameLen));
            pos += nameLen;
            const valueType = view.getUint16(pos, true);
            pos += 2;
            const valueLen = view.getUint16(pos, true);
            pos += 2;
            const value = buf.slice(off + pos, off + pos + valueLen);
            pos += valueLen;
            this.postProcessTag(tags, name, valueType, value);
          }
          return tags;
        }
      }
      ExtendedContentDescriptionObjectState.guid = GUID.ExtendedContentDescriptionObject;
      class ExtendedStreamPropertiesObjectState extends State {
        get(buf, off) {
          const view = new DataView(buf.buffer, off);
          return {
            startTime: UINT64_LE.get(buf, off),
            endTime: UINT64_LE.get(buf, off + 8),
            dataBitrate: view.getInt32(12, true),
            bufferSize: view.getInt32(16, true),
            initialBufferFullness: view.getInt32(20, true),
            alternateDataBitrate: view.getInt32(24, true),
            alternateBufferSize: view.getInt32(28, true),
            alternateInitialBufferFullness: view.getInt32(32, true),
            maximumObjectSize: view.getInt32(36, true),
            flags: {
              reliableFlag: getBit(buf, off + 40, 0),
              seekableFlag: getBit(buf, off + 40, 1),
              resendLiveCleanpointsFlag: getBit(buf, off + 40, 2)
            },
            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),
            streamNumber: view.getInt16(42, true),
            streamLanguageId: view.getInt16(44, true),
            averageTimePerFrame: view.getInt32(52, true),
            streamNameCount: view.getInt32(54, true),
            payloadExtensionSystems: view.getInt32(56, true),
            streamNames: [],
            // ToDo
            streamPropertiesObject: null
          };
        }
      }
      ExtendedStreamPropertiesObjectState.guid = GUID.ExtendedStreamPropertiesObject;
      class MetadataObjectState extends State {
        get(uint8Array, off) {
          const tags = [];
          const view = new DataView(uint8Array.buffer, off);
          const descriptionRecordsCount = view.getUint16(0, true);
          let pos = 2;
          for (let i = 0; i < descriptionRecordsCount; i += 1) {
            pos += 4;
            const nameLen = view.getUint16(pos, true);
            pos += 2;
            const dataType = view.getUint16(pos, true);
            pos += 2;
            const dataLen = view.getUint32(pos, true);
            pos += 4;
            const name = parseUnicodeAttr(uint8Array.slice(off + pos, off + pos + nameLen));
            pos += nameLen;
            const data = uint8Array.slice(off + pos, off + pos + dataLen);
            pos += dataLen;
            this.postProcessTag(tags, name, dataType, data);
          }
          return tags;
        }
      }
      MetadataObjectState.guid = GUID.MetadataObject;
      class MetadataLibraryObjectState extends MetadataObjectState {
      }
      MetadataLibraryObjectState.guid = GUID.MetadataLibraryObject;
      class WmPictureToken {
        static fromBuffer(buffer) {
          const pic = new WmPictureToken(buffer.length);
          return pic.get(buffer, 0);
        }
        constructor(len) {
          this.len = len;
        }
        get(buffer, offset) {
          const view = new DataView(buffer.buffer, offset);
          const typeId = view.getUint8(0);
          const size = view.getInt32(1, true);
          let index = 5;
          while (view.getUint16(index) !== 0) {
            index += 2;
          }
          const format = new StringType(index - 5, "utf-16le").get(buffer, 5);
          while (view.getUint16(index) !== 0) {
            index += 2;
          }
          const description = new StringType(index - 5, "utf-16le").get(buffer, 5);
          return {
            type: AttachedPictureType[typeId],
            format,
            description,
            size,
            data: buffer.slice(index + 4)
          };
        }
      }
      const debug = initDebug("music-metadata:parser:ASF");
      const headerType = "asf";
      class AsfParser extends BasicParser {
        async parse() {
          const header = await this.tokenizer.readToken(TopLevelHeaderObjectToken);
          if (!header.objectId.equals(GUID.HeaderObject)) {
            throw new AsfContentParseError(`expected asf header; but was not found; got: ${header.objectId.str}`);
          }
          try {
            await this.parseObjectHeader(header.numberOfHeaderObjects);
          } catch (err) {
            debug("Error while parsing ASF: %s", err);
          }
        }
        async parseObjectHeader(numberOfObjectHeaders) {
          let tags;
          do {
            const header = await this.tokenizer.readToken(HeaderObjectToken);
            debug("header GUID=%s", header.objectId.str);
            switch (header.objectId.str) {
              case FilePropertiesObject.guid.str: {
                const fpo = await this.tokenizer.readToken(new FilePropertiesObject(header));
                this.metadata.setFormat("duration", Number(fpo.playDuration / BigInt(1e3)) / 1e4 - Number(fpo.preroll) / 1e3);
                this.metadata.setFormat("bitrate", fpo.maximumBitrate);
                break;
              }
              case StreamPropertiesObject.guid.str: {
                const spo = await this.tokenizer.readToken(new StreamPropertiesObject(header));
                this.metadata.setFormat("container", `ASF/${spo.streamType}`);
                break;
              }
              case HeaderExtensionObject.guid.str: {
                const extHeader = await this.tokenizer.readToken(new HeaderExtensionObject());
                await this.parseExtensionObject(extHeader.extensionDataSize);
                break;
              }
              case ContentDescriptionObjectState.guid.str:
                tags = await this.tokenizer.readToken(new ContentDescriptionObjectState(header));
                await this.addTags(tags);
                break;
              case ExtendedContentDescriptionObjectState.guid.str:
                tags = await this.tokenizer.readToken(new ExtendedContentDescriptionObjectState(header));
                await this.addTags(tags);
                break;
              case GUID.CodecListObject.str: {
                const codecs = await readCodecEntries(this.tokenizer);
                codecs.forEach((codec) => {
                  this.metadata.addStreamInfo({
                    type: codec.type.videoCodec ? TrackType.video : TrackType.audio,
                    codecName: codec.codecName
                  });
                });
                const audioCodecs = codecs.filter((codec) => codec.type.audioCodec).map((codec) => codec.codecName).join("/");
                this.metadata.setFormat("codec", audioCodecs);
                break;
              }
              case GUID.StreamBitratePropertiesObject.str:
                await this.tokenizer.ignore(header.objectSize - HeaderObjectToken.len);
                break;
              case GUID.PaddingObject.str:
                debug("Padding: %s bytes", header.objectSize - HeaderObjectToken.len);
                await this.tokenizer.ignore(header.objectSize - HeaderObjectToken.len);
                break;
              default:
                this.metadata.addWarning(`Ignore ASF-Object-GUID: ${header.objectId.str}`);
                debug("Ignore ASF-Object-GUID: %s", header.objectId.str);
                await this.tokenizer.readToken(new IgnoreObjectState(header));
            }
          } while (--numberOfObjectHeaders);
        }
        async addTags(tags) {
          await Promise.all(tags.map(({ id, value }) => this.metadata.addTag(headerType, id, value)));
        }
        async parseExtensionObject(extensionSize) {
          do {
            const header = await this.tokenizer.readToken(HeaderObjectToken);
            const remaining = header.objectSize - HeaderObjectToken.len;
            switch (header.objectId.str) {
              case ExtendedStreamPropertiesObjectState.guid.str:
                await this.tokenizer.readToken(new ExtendedStreamPropertiesObjectState(header));
                break;
              case MetadataObjectState.guid.str: {
                const moTags = await this.tokenizer.readToken(new MetadataObjectState(header));
                await this.addTags(moTags);
                break;
              }
              case MetadataLibraryObjectState.guid.str: {
                const mlTags = await this.tokenizer.readToken(new MetadataLibraryObjectState(header));
                await this.addTags(mlTags);
                break;
              }
              case GUID.PaddingObject.str:
                await this.tokenizer.ignore(remaining);
                break;
              case GUID.CompatibilityObject.str:
                await this.tokenizer.ignore(remaining);
                break;
              case GUID.ASF_Index_Placeholder_Object.str:
                await this.tokenizer.ignore(remaining);
                break;
              default:
                this.metadata.addWarning(`Ignore ASF-Object-GUID: ${header.objectId.str}`);
                await this.tokenizer.readToken(new IgnoreObjectState(header));
                break;
            }
            extensionSize -= header.objectSize;
          } while (extensionSize > 0);
        }
      } exports("AsfParser", AsfParser);

    })
  };
}));

System.register("./DsdiffParser-DlPzwyIy-BSxVmTfk.js", ['./__monkey.entry-SDvwpoNt.js', './ID3v2Parser-eXNf-3mE-7kzMCmWm.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge'], (function (exports, module) {
  'use strict';
  var initDebug, BasicParser, FourCcToken, Uint8ArrayType, fromBuffer$1, UINT32_LE, UINT16_BE, UINT8, UINT32_BE, StringType, INT64_BE, makeUnexpectedFileContentError, ID3v2Parser;
  return {
    setters: [module => {
      initDebug = module.i;
      BasicParser = module.B;
      FourCcToken = module.F;
      Uint8ArrayType = module.U;
      fromBuffer$1 = module.n;
      UINT32_LE = module.f;
      UINT16_BE = module.d;
      UINT8 = module.c;
      UINT32_BE = module.a;
      StringType = module.S;
      INT64_BE = module.o;
      makeUnexpectedFileContentError = module.m;
    }, module => {
      ID3v2Parser = module.I;
    }, null, null, null, null, null],
    execute: (function () {

      const ChunkHeader64 = {
        len: 12,
        get: (buf, off) => {
          return {
            // Group-ID
            chunkID: FourCcToken.get(buf, off),
            // Size
            chunkSize: INT64_BE.get(buf, off + 4)
          };
        }
      };
      const debug = initDebug("music-metadata:parser:aiff");
      class DsdiffContentParseError extends makeUnexpectedFileContentError("DSDIFF") {
      } exports("DsdiffContentParseError", DsdiffContentParseError);
      class DsdiffParser extends BasicParser {
        async parse() {
          const header = await this.tokenizer.readToken(ChunkHeader64);
          if (header.chunkID !== "FRM8")
            throw new DsdiffContentParseError("Unexpected chunk-ID");
          const type = (await this.tokenizer.readToken(FourCcToken)).trim();
          switch (type) {
            case "DSD":
              this.metadata.setFormat("container", `DSDIFF/${type}`);
              this.metadata.setFormat("lossless", true);
              return this.readFmt8Chunks(header.chunkSize - BigInt(FourCcToken.len));
            default:
              throw new DsdiffContentParseError(`Unsupported DSDIFF type: ${type}`);
          }
        }
        async readFmt8Chunks(remainingSize) {
          while (remainingSize >= ChunkHeader64.len) {
            const chunkHeader = await this.tokenizer.readToken(ChunkHeader64);
            debug(`Chunk id=${chunkHeader.chunkID}`);
            await this.readData(chunkHeader);
            remainingSize -= BigInt(ChunkHeader64.len) + chunkHeader.chunkSize;
          }
        }
        async readData(header) {
          debug(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);
          const p0 = this.tokenizer.position;
          switch (header.chunkID.trim()) {
            case "FVER": {
              const version = await this.tokenizer.readToken(UINT32_LE);
              debug(`DSDIFF version=${version}`);
              break;
            }
            case "PROP": {
              const propType = await this.tokenizer.readToken(FourCcToken);
              if (propType !== "SND ")
                throw new DsdiffContentParseError("Unexpected PROP-chunk ID");
              await this.handleSoundPropertyChunks(header.chunkSize - BigInt(FourCcToken.len));
              break;
            }
            case "ID3": {
              const id3_data = await this.tokenizer.readToken(new Uint8ArrayType(Number(header.chunkSize)));
              const rst = fromBuffer$1(id3_data);
              await new ID3v2Parser().parse(this.metadata, rst, this.options);
              break;
            }
            case "DSD":
              if (this.metadata.format.numberOfChannels) {
                this.metadata.setFormat("numberOfSamples", Number(header.chunkSize * BigInt(8) / BigInt(this.metadata.format.numberOfChannels)));
              }
              if (this.metadata.format.numberOfSamples && this.metadata.format.sampleRate) {
                this.metadata.setFormat("duration", this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);
              }
              break;
            default:
              debug(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);
              break;
          }
          const remaining = header.chunkSize - BigInt(this.tokenizer.position - p0);
          if (remaining > 0) {
            debug(`After Parsing chunk, remaining ${remaining} bytes`);
            await this.tokenizer.ignore(Number(remaining));
          }
        }
        async handleSoundPropertyChunks(remainingSize) {
          debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);
          while (remainingSize > 0) {
            const sndPropHeader = await this.tokenizer.readToken(ChunkHeader64);
            debug(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);
            const p0 = this.tokenizer.position;
            switch (sndPropHeader.chunkID.trim()) {
              case "FS": {
                const sampleRate = await this.tokenizer.readToken(UINT32_BE);
                this.metadata.setFormat("sampleRate", sampleRate);
                break;
              }
              case "CHNL": {
                const numChannels = await this.tokenizer.readToken(UINT16_BE);
                this.metadata.setFormat("numberOfChannels", numChannels);
                await this.handleChannelChunks(sndPropHeader.chunkSize - BigInt(UINT16_BE.len));
                break;
              }
              case "CMPR": {
                const compressionIdCode = (await this.tokenizer.readToken(FourCcToken)).trim();
                const count = await this.tokenizer.readToken(UINT8);
                const compressionName = await this.tokenizer.readToken(new StringType(count, "ascii"));
                if (compressionIdCode === "DSD") {
                  this.metadata.setFormat("lossless", true);
                  this.metadata.setFormat("bitsPerSample", 1);
                }
                this.metadata.setFormat("codec", `${compressionIdCode} (${compressionName})`);
                break;
              }
              case "ABSS": {
                const hours = await this.tokenizer.readToken(UINT16_BE);
                const minutes = await this.tokenizer.readToken(UINT8);
                const seconds = await this.tokenizer.readToken(UINT8);
                const samples = await this.tokenizer.readToken(UINT32_BE);
                debug(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);
                break;
              }
              case "LSCO": {
                const lsConfig = await this.tokenizer.readToken(UINT16_BE);
                debug(`LSCO lsConfig=${lsConfig}`);
                break;
              }
              default:
                debug(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);
                await this.tokenizer.ignore(Number(sndPropHeader.chunkSize));
            }
            const remaining = sndPropHeader.chunkSize - BigInt(this.tokenizer.position - p0);
            if (remaining > 0) {
              debug(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);
              await this.tokenizer.ignore(Number(remaining));
            }
            remainingSize -= BigInt(ChunkHeader64.len) + sndPropHeader.chunkSize;
            debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);
          }
          if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {
            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;
            this.metadata.setFormat("bitrate", bitrate);
          }
        }
        async handleChannelChunks(remainingSize) {
          debug(`Parsing channel-chunks, remainingSize=${remainingSize}`);
          const channels = [];
          while (remainingSize >= FourCcToken.len) {
            const channelId = await this.tokenizer.readToken(FourCcToken);
            debug(`Channel[ID=${channelId}]`);
            channels.push(channelId);
            remainingSize -= BigInt(FourCcToken.len);
          }
          debug(`Channels: ${channels.join(", ")}`);
          return channels;
        }
      } exports("DsdiffParser", DsdiffParser);

    })
  };
}));

System.register("./AiffParser-Bl4qv0ID-Bs_4-QGD.js", ['./__monkey.entry-SDvwpoNt.js', './ID3v2Parser-eXNf-3mE-7kzMCmWm.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge'], (function (exports, module) {
  'use strict';
  var initDebug, BasicParser, FourCcToken, EndOfStreamError$1, Uint8ArrayType, fromBuffer$1, StringType, makeUnexpectedFileContentError, UINT16_BE, UINT32_BE, UINT8, ID3v2Parser;
  return {
    setters: [module => {
      initDebug = module.i;
      BasicParser = module.B;
      FourCcToken = module.F;
      EndOfStreamError$1 = module.E;
      Uint8ArrayType = module.U;
      fromBuffer$1 = module.n;
      StringType = module.S;
      makeUnexpectedFileContentError = module.m;
      UINT16_BE = module.d;
      UINT32_BE = module.a;
      UINT8 = module.c;
    }, module => {
      ID3v2Parser = module.I;
    }, null, null, null, null, null],
    execute: (function () {

      const compressionTypes = {
        NONE: "not compressed	PCM	Apple Computer",
        sowt: "PCM (byte swapped)",
        fl32: "32-bit floating point IEEE 32-bit float",
        fl64: "64-bit floating point IEEE 64-bit float	Apple Computer",
        alaw: "ALaw 2:1	8-bit ITU-T G.711 A-law",
        ulaw: "µLaw 2:1	8-bit ITU-T G.711 µ-law	Apple Computer",
        ULAW: "CCITT G.711 u-law 8-bit ITU-T G.711 µ-law",
        ALAW: "CCITT G.711 A-law 8-bit ITU-T G.711 A-law",
        FL32: "Float 32	IEEE 32-bit float "
      };
      class AiffContentError extends makeUnexpectedFileContentError("AIFF") {
      }
      class Common {
        constructor(header, isAifc) {
          this.isAifc = isAifc;
          const minimumChunkSize = isAifc ? 22 : 18;
          if (header.chunkSize < minimumChunkSize)
            throw new AiffContentError(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);
          this.len = header.chunkSize;
        }
        get(buf, off) {
          const shift = UINT16_BE.get(buf, off + 8) - 16398;
          const baseSampleRate = UINT16_BE.get(buf, off + 8 + 2);
          const res = {
            numChannels: UINT16_BE.get(buf, off),
            numSampleFrames: UINT32_BE.get(buf, off + 2),
            sampleSize: UINT16_BE.get(buf, off + 6),
            sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift
          };
          if (this.isAifc) {
            res.compressionType = FourCcToken.get(buf, off + 18);
            if (this.len > 22) {
              const strLen = UINT8.get(buf, off + 22);
              if (strLen > 0) {
                const padding = (strLen + 1) % 2;
                if (23 + strLen + padding === this.len) {
                  res.compressionName = new StringType(strLen, "latin1").get(buf, off + 23);
                } else {
                  throw new AiffContentError("Illegal pstring length");
                }
              } else {
                res.compressionName = void 0;
              }
            }
          } else {
            res.compressionName = "PCM";
          }
          return res;
        }
      }
      const Header = {
        len: 8,
        get: (buf, off) => {
          return {
            // Chunk type ID
            chunkID: FourCcToken.get(buf, off),
            // Chunk size
            chunkSize: Number(BigInt(UINT32_BE.get(buf, off + 4)))
          };
        }
      };
      const debug = initDebug("music-metadata:parser:aiff");
      class AIFFParser extends BasicParser {
        constructor() {
          super(...arguments);
          this.isCompressed = null;
        }
        async parse() {
          const header = await this.tokenizer.readToken(Header);
          if (header.chunkID !== "FORM")
            throw new AiffContentError("Invalid Chunk-ID, expected 'FORM'");
          const type = await this.tokenizer.readToken(FourCcToken);
          switch (type) {
            case "AIFF":
              this.metadata.setFormat("container", type);
              this.isCompressed = false;
              break;
            case "AIFC":
              this.metadata.setFormat("container", "AIFF-C");
              this.isCompressed = true;
              break;
            default:
              throw new AiffContentError(`Unsupported AIFF type: ${type}`);
          }
          this.metadata.setFormat("lossless", !this.isCompressed);
          try {
            while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= Header.len) {
              debug(`Reading AIFF chunk at offset=${this.tokenizer.position}`);
              const chunkHeader = await this.tokenizer.readToken(Header);
              const nextChunk = 2 * Math.round(chunkHeader.chunkSize / 2);
              const bytesRead = await this.readData(chunkHeader);
              await this.tokenizer.ignore(nextChunk - bytesRead);
            }
          } catch (err) {
            if (err instanceof EndOfStreamError$1) {
              debug("End-of-stream");
            } else {
              throw err;
            }
          }
        }
        async readData(header) {
          switch (header.chunkID) {
            case "COMM": {
              if (this.isCompressed === null) {
                throw new AiffContentError("Failed to parse AIFF.COMM chunk when compression type is unknown");
              }
              const common = await this.tokenizer.readToken(new Common(header, this.isCompressed));
              this.metadata.setFormat("bitsPerSample", common.sampleSize);
              this.metadata.setFormat("sampleRate", common.sampleRate);
              this.metadata.setFormat("numberOfChannels", common.numChannels);
              this.metadata.setFormat("numberOfSamples", common.numSampleFrames);
              this.metadata.setFormat("duration", common.numSampleFrames / common.sampleRate);
              if (common.compressionName || common.compressionType) {
                this.metadata.setFormat("codec", common.compressionName ?? compressionTypes[common.compressionType]);
              }
              return header.chunkSize;
            }
            case "ID3 ": {
              const id3_data = await this.tokenizer.readToken(new Uint8ArrayType(header.chunkSize));
              const rst = fromBuffer$1(id3_data);
              await new ID3v2Parser().parse(this.metadata, rst, this.options);
              return header.chunkSize;
            }
            case "SSND":
              if (this.metadata.format.duration) {
                this.metadata.setFormat("bitrate", 8 * header.chunkSize / this.metadata.format.duration);
              }
              return 0;
            case "NAME":
            case "AUTH":
            case "(c) ":
            case "ANNO":
              return this.readTextChunk(header);
            default:
              debug(`Ignore chunk id=${header.chunkID}, size=${header.chunkSize}`);
              return 0;
          }
        }
        async readTextChunk(header) {
          const value = await this.tokenizer.readToken(new StringType(header.chunkSize, "ascii"));
          const values = value.split("\0").map((v) => v.trim()).filter((v) => v == null ? void 0 : v.length);
          await Promise.all(values.map((v) => this.metadata.addTag("AIFF", header.chunkID, v)));
          return header.chunkSize;
        }
      } exports("AIFFParser", AIFFParser);

    })
  };
}));

System.register("./DsfParser-D_jwx0gH-BdUENliv.js", ['./__monkey.entry-SDvwpoNt.js', './AbstractID3Parser-FIM36LHz-B5gpnOzd.js', './ID3v2Parser-eXNf-3mE-7kzMCmWm.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge'], (function (exports, module) {
  'use strict';
  var initDebug, FourCcToken, UINT64_LE, INT64_LE, INT32_LE, makeUnexpectedFileContentError, AbstractID3Parser, ID3v2Parser;
  return {
    setters: [module => {
      initDebug = module.i;
      FourCcToken = module.F;
      UINT64_LE = module.e;
      INT64_LE = module.p;
      INT32_LE = module.q;
      makeUnexpectedFileContentError = module.m;
    }, module => {
      AbstractID3Parser = module.A;
    }, module => {
      ID3v2Parser = module.I;
    }, null, null, null, null, null],
    execute: (function () {

      const ChunkHeader = {
        len: 12,
        get: (buf, off) => {
          return { id: FourCcToken.get(buf, off), size: UINT64_LE.get(buf, off + 4) };
        }
      };
      const DsdChunk = {
        len: 16,
        get: (buf, off) => {
          return {
            fileSize: INT64_LE.get(buf, off),
            metadataPointer: INT64_LE.get(buf, off + 8)
          };
        }
      };
      var ChannelType;
      (function(ChannelType2) {
        ChannelType2[ChannelType2["mono"] = 1] = "mono";
        ChannelType2[ChannelType2["stereo"] = 2] = "stereo";
        ChannelType2[ChannelType2["channels"] = 3] = "channels";
        ChannelType2[ChannelType2["quad"] = 4] = "quad";
        ChannelType2[ChannelType2["4 channels"] = 5] = "4 channels";
        ChannelType2[ChannelType2["5 channels"] = 6] = "5 channels";
        ChannelType2[ChannelType2["5.1 channels"] = 7] = "5.1 channels";
      })(ChannelType || (ChannelType = {}));
      const FormatChunk = {
        len: 40,
        get: (buf, off) => {
          return {
            formatVersion: INT32_LE.get(buf, off),
            formatID: INT32_LE.get(buf, off + 4),
            channelType: INT32_LE.get(buf, off + 8),
            channelNum: INT32_LE.get(buf, off + 12),
            samplingFrequency: INT32_LE.get(buf, off + 16),
            bitsPerSample: INT32_LE.get(buf, off + 20),
            sampleCount: INT64_LE.get(buf, off + 24),
            blockSizePerChannel: INT32_LE.get(buf, off + 32)
          };
        }
      };
      const debug = initDebug("music-metadata:parser:DSF");
      class DsdContentParseError extends makeUnexpectedFileContentError("DSD") {
      } exports("DsdContentParseError", DsdContentParseError);
      class DsfParser extends AbstractID3Parser {
        async postId3v2Parse() {
          const p0 = this.tokenizer.position;
          const chunkHeader = await this.tokenizer.readToken(ChunkHeader);
          if (chunkHeader.id !== "DSD ")
            throw new DsdContentParseError("Invalid chunk signature");
          this.metadata.setFormat("container", "DSF");
          this.metadata.setFormat("lossless", true);
          const dsdChunk = await this.tokenizer.readToken(DsdChunk);
          if (dsdChunk.metadataPointer === BigInt(0)) {
            debug("No ID3v2 tag present");
          } else {
            debug(`expect ID3v2 at offset=${dsdChunk.metadataPointer}`);
            await this.parseChunks(dsdChunk.fileSize - chunkHeader.size);
            await this.tokenizer.ignore(Number(dsdChunk.metadataPointer) - this.tokenizer.position - p0);
            return new ID3v2Parser().parse(this.metadata, this.tokenizer, this.options);
          }
        }
        async parseChunks(bytesRemaining) {
          while (bytesRemaining >= ChunkHeader.len) {
            const chunkHeader = await this.tokenizer.readToken(ChunkHeader);
            debug(`Parsing chunk name=${chunkHeader.id} size=${chunkHeader.size}`);
            switch (chunkHeader.id) {
              case "fmt ": {
                const formatChunk = await this.tokenizer.readToken(FormatChunk);
                this.metadata.setFormat("numberOfChannels", formatChunk.channelNum);
                this.metadata.setFormat("sampleRate", formatChunk.samplingFrequency);
                this.metadata.setFormat("bitsPerSample", formatChunk.bitsPerSample);
                this.metadata.setFormat("numberOfSamples", formatChunk.sampleCount);
                this.metadata.setFormat("duration", Number(formatChunk.sampleCount) / formatChunk.samplingFrequency);
                const bitrate = formatChunk.bitsPerSample * formatChunk.samplingFrequency * formatChunk.channelNum;
                this.metadata.setFormat("bitrate", bitrate);
                return;
              }
              default:
                this.tokenizer.ignore(Number(chunkHeader.size) - ChunkHeader.len);
                break;
            }
            bytesRemaining -= chunkHeader.size;
          }
        }
      } exports("DsfParser", DsfParser);

    })
  };
}));

System.register("./FlacParser-CxiwFQBW-BzeYKlyb.js", ['./__monkey.entry-SDvwpoNt.js', './VorbisParser-C_tWlZNb-Big__tIq.js', './AbstractID3Parser-FIM36LHz-B5gpnOzd.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge', './ID3v2Parser-eXNf-3mE-7kzMCmWm.js'], (function (exports, module) {
  'use strict';
  var initDebug, FourCcToken, Uint8ArrayType, getBit, getBitAllignedNumber, UINT24_BE, UINT16_BE, makeUnexpectedFileContentError, VorbisParser, VorbisPictureToken, VorbisDecoder, AbstractID3Parser;
  return {
    setters: [module => {
      initDebug = module.i;
      FourCcToken = module.F;
      Uint8ArrayType = module.U;
      getBit = module.j;
      getBitAllignedNumber = module.g;
      UINT24_BE = module.r;
      UINT16_BE = module.d;
      makeUnexpectedFileContentError = module.m;
    }, module => {
      VorbisParser = module.V;
      VorbisPictureToken = module.a;
      VorbisDecoder = module.b;
    }, module => {
      AbstractID3Parser = module.A;
    }, null, null, null, null, null, null],
    execute: (function () {

      const debug = initDebug("music-metadata:parser:FLAC");
      class FlacContentError extends makeUnexpectedFileContentError("FLAC") {
      }
      var BlockType;
      (function(BlockType2) {
        BlockType2[BlockType2["STREAMINFO"] = 0] = "STREAMINFO";
        BlockType2[BlockType2["PADDING"] = 1] = "PADDING";
        BlockType2[BlockType2["APPLICATION"] = 2] = "APPLICATION";
        BlockType2[BlockType2["SEEKTABLE"] = 3] = "SEEKTABLE";
        BlockType2[BlockType2["VORBIS_COMMENT"] = 4] = "VORBIS_COMMENT";
        BlockType2[BlockType2["CUESHEET"] = 5] = "CUESHEET";
        BlockType2[BlockType2["PICTURE"] = 6] = "PICTURE";
      })(BlockType || (BlockType = {}));
      class FlacParser extends AbstractID3Parser {
        constructor() {
          super(...arguments);
          this.vorbisParser = new VorbisParser(this.metadata, this.options);
          this.padding = 0;
        }
        async postId3v2Parse() {
          const fourCC = await this.tokenizer.readToken(FourCcToken);
          if (fourCC.toString() !== "fLaC") {
            throw new FlacContentError("Invalid FLAC preamble");
          }
          let blockHeader;
          do {
            blockHeader = await this.tokenizer.readToken(BlockHeader);
            await this.parseDataBlock(blockHeader);
          } while (!blockHeader.lastBlock);
          if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {
            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;
            this.metadata.setFormat("bitrate", 8 * dataSize / this.metadata.format.duration);
          }
        }
        async parseDataBlock(blockHeader) {
          debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);
          switch (blockHeader.type) {
            case BlockType.STREAMINFO:
              return this.parseBlockStreamInfo(blockHeader.length);
            case BlockType.PADDING:
              this.padding += blockHeader.length;
              break;
            case BlockType.APPLICATION:
              break;
            case BlockType.SEEKTABLE:
              break;
            case BlockType.VORBIS_COMMENT:
              return this.parseComment(blockHeader.length);
            case BlockType.CUESHEET:
              break;
            case BlockType.PICTURE:
              await this.parsePicture(blockHeader.length);
              return;
            default:
              this.metadata.addWarning(`Unknown block type: ${blockHeader.type}`);
          }
          return this.tokenizer.ignore(blockHeader.length).then();
        }
        /**
         * Parse STREAMINFO
         */
        async parseBlockStreamInfo(dataLen) {
          if (dataLen !== BlockStreamInfo.len)
            throw new FlacContentError("Unexpected block-stream-info length");
          const streamInfo = await this.tokenizer.readToken(BlockStreamInfo);
          this.metadata.setFormat("container", "FLAC");
          this.metadata.setFormat("codec", "FLAC");
          this.metadata.setFormat("lossless", true);
          this.metadata.setFormat("numberOfChannels", streamInfo.channels);
          this.metadata.setFormat("bitsPerSample", streamInfo.bitsPerSample);
          this.metadata.setFormat("sampleRate", streamInfo.sampleRate);
          if (streamInfo.totalSamples > 0) {
            this.metadata.setFormat("duration", streamInfo.totalSamples / streamInfo.sampleRate);
          }
        }
        /**
         * Parse VORBIS_COMMENT
         * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3
         */
        async parseComment(dataLen) {
          const data = await this.tokenizer.readToken(new Uint8ArrayType(dataLen));
          const decoder = new VorbisDecoder(data, 0);
          decoder.readStringUtf8();
          const commentListLength = decoder.readInt32();
          const tags = new Array(commentListLength);
          for (let i = 0; i < commentListLength; i++) {
            tags[i] = decoder.parseUserComment();
          }
          await Promise.all(tags.map((tag) => this.vorbisParser.addTag(tag.key, tag.value)));
        }
        async parsePicture(dataLen) {
          if (this.options.skipCovers) {
            return this.tokenizer.ignore(dataLen);
          }
          const picture = await this.tokenizer.readToken(new VorbisPictureToken(dataLen));
          this.vorbisParser.addTag("METADATA_BLOCK_PICTURE", picture);
        }
      } exports("FlacParser", FlacParser);
      const BlockHeader = {
        len: 4,
        get: (buf, off) => {
          return {
            lastBlock: getBit(buf, off, 7),
            type: getBitAllignedNumber(buf, off, 1, 7),
            length: UINT24_BE.get(buf, off + 1)
          };
        }
      };
      const BlockStreamInfo = {
        len: 34,
        get: (buf, off) => {
          return {
            // The minimum block size (in samples) used in the stream.
            minimumBlockSize: UINT16_BE.get(buf, off),
            // The maximum block size (in samples) used in the stream.
            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.
            maximumBlockSize: UINT16_BE.get(buf, off + 2) / 1e3,
            // The minimum frame size (in bytes) used in the stream.
            // May be 0 to imply the value is not known.
            minimumFrameSize: UINT24_BE.get(buf, off + 4),
            // The maximum frame size (in bytes) used in the stream.
            // May be 0 to imply the value is not known.
            maximumFrameSize: UINT24_BE.get(buf, off + 7),
            // Sample rate in Hz. Though 20 bits are available,
            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.
            // Also, a value of 0 is invalid.
            sampleRate: UINT24_BE.get(buf, off + 10) >> 4,
            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),
            // (number of channels)-1. FLAC supports from 1 to 8 channels
            channels: getBitAllignedNumber(buf, off + 12, 4, 3) + 1,
            // bits per sample)-1.
            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.
            bitsPerSample: getBitAllignedNumber(buf, off + 12, 7, 5) + 1,
            // Total samples in stream.
            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.
            // A value of zero here means the number of total samples is unknown.
            totalSamples: getBitAllignedNumber(buf, off + 13, 4, 36),
            // the MD5 hash of the file (see notes for usage... it's a littly tricky)
            fileMD5: new Uint8ArrayType(16).get(buf, off + 18)
          };
        }
      };

    })
  };
}));

System.register("./MatroskaParser-DlYom4Kd-CpEy0LtJ.js", ['./__monkey.entry-SDvwpoNt.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge'], (function (exports, module) {
  'use strict';
  var initDebug, BasicParser, TargetType, TrackType, EndOfStreamError$1, UINT8, Float64_BE, Float32_BE, StringType, UINT64_BE, makeUnexpectedFileContentError;
  return {
    setters: [module => {
      initDebug = module.i;
      BasicParser = module.B;
      TargetType = module.t;
      TrackType = module.T;
      EndOfStreamError$1 = module.E;
      UINT8 = module.c;
      Float64_BE = module.v;
      Float32_BE = module.w;
      StringType = module.S;
      UINT64_BE = module.x;
      makeUnexpectedFileContentError = module.m;
    }, null, null, null, null, null],
    execute: (function () {

      var DataType;
      (function(DataType2) {
        DataType2[DataType2["string"] = 0] = "string";
        DataType2[DataType2["uint"] = 1] = "uint";
        DataType2[DataType2["uid"] = 2] = "uid";
        DataType2[DataType2["bool"] = 3] = "bool";
        DataType2[DataType2["binary"] = 4] = "binary";
        DataType2[DataType2["float"] = 5] = "float";
      })(DataType || (DataType = {}));
      const matroskaDtd = {
        name: "dtd",
        container: {
          440786851: {
            name: "ebml",
            container: {
              17030: { name: "ebmlVersion", value: DataType.uint },
              // 5.1.1
              17143: { name: "ebmlReadVersion", value: DataType.uint },
              // 5.1.2
              17138: { name: "ebmlMaxIDWidth", value: DataType.uint },
              // 5.1.3
              17139: { name: "ebmlMaxSizeWidth", value: DataType.uint },
              // 5.1.4
              17026: { name: "docType", value: DataType.string },
              // 5.1.5
              17031: { name: "docTypeVersion", value: DataType.uint },
              // 5.1.6
              17029: { name: "docTypeReadVersion", value: DataType.uint }
              // 5.1.7
            }
          },
          // Matroska segments
          408125543: {
            name: "segment",
            container: {
              // Meta Seek Information (also known as MetaSeek)
              290298740: {
                name: "seekHead",
                container: {
                  19899: {
                    name: "seek",
                    multiple: true,
                    container: {
                      21419: { name: "id", value: DataType.binary },
                      21420: { name: "position", value: DataType.uint }
                    }
                  }
                }
              },
              // Segment Information
              357149030: {
                name: "info",
                container: {
                  29604: { name: "uid", value: DataType.uid },
                  29572: { name: "filename", value: DataType.string },
                  3979555: { name: "prevUID", value: DataType.uid },
                  3965867: { name: "prevFilename", value: DataType.string },
                  4110627: { name: "nextUID", value: DataType.uid },
                  4096955: { name: "nextFilename", value: DataType.string },
                  2807729: { name: "timecodeScale", value: DataType.uint },
                  17545: { name: "duration", value: DataType.float },
                  17505: { name: "dateUTC", value: DataType.uint },
                  31657: { name: "title", value: DataType.string },
                  19840: { name: "muxingApp", value: DataType.string },
                  22337: { name: "writingApp", value: DataType.string }
                }
              },
              // Cluster
              524531317: {
                name: "cluster",
                multiple: true,
                container: {
                  231: { name: "timecode", value: DataType.uid },
                  22743: { name: "silentTracks ", multiple: true },
                  167: { name: "position", value: DataType.uid },
                  171: { name: "prevSize", value: DataType.uid },
                  160: { name: "blockGroup" },
                  163: { name: "simpleBlock" }
                }
              },
              // Track
              374648427: {
                name: "tracks",
                container: {
                  174: {
                    name: "entries",
                    multiple: true,
                    container: {
                      215: { name: "trackNumber", value: DataType.uint },
                      29637: { name: "uid", value: DataType.uid },
                      131: { name: "trackType", value: DataType.uint },
                      185: { name: "flagEnabled", value: DataType.bool },
                      136: { name: "flagDefault", value: DataType.bool },
                      21930: { name: "flagForced", value: DataType.bool },
                      // extended
                      156: { name: "flagLacing", value: DataType.bool },
                      28135: { name: "minCache", value: DataType.uint },
                      28136: { name: "maxCache", value: DataType.uint },
                      2352003: { name: "defaultDuration", value: DataType.uint },
                      2306383: { name: "timecodeScale", value: DataType.float },
                      21358: { name: "name", value: DataType.string },
                      2274716: { name: "language", value: DataType.string },
                      134: { name: "codecID", value: DataType.string },
                      25506: { name: "codecPrivate", value: DataType.binary },
                      2459272: { name: "codecName", value: DataType.string },
                      3839639: { name: "codecSettings", value: DataType.string },
                      3883072: { name: "codecInfoUrl", value: DataType.string },
                      2536e3: { name: "codecDownloadUrl", value: DataType.string },
                      170: { name: "codecDecodeAll", value: DataType.bool },
                      28587: { name: "trackOverlay", value: DataType.uint },
                      // Video
                      224: {
                        name: "video",
                        container: {
                          154: { name: "flagInterlaced", value: DataType.bool },
                          21432: { name: "stereoMode", value: DataType.uint },
                          176: { name: "pixelWidth", value: DataType.uint },
                          186: { name: "pixelHeight", value: DataType.uint },
                          21680: { name: "displayWidth", value: DataType.uint },
                          21690: { name: "displayHeight", value: DataType.uint },
                          21683: { name: "aspectRatioType", value: DataType.uint },
                          3061028: { name: "colourSpace", value: DataType.uint },
                          3126563: { name: "gammaValue", value: DataType.float }
                        }
                      },
                      // Audio
                      225: {
                        name: "audio",
                        container: {
                          181: { name: "samplingFrequency", value: DataType.float },
                          30901: { name: "outputSamplingFrequency", value: DataType.float },
                          159: { name: "channels", value: DataType.uint },
                          // https://www.matroska.org/technical/specs/index.html
                          148: { name: "channels", value: DataType.uint },
                          32123: { name: "channelPositions", value: DataType.binary },
                          25188: { name: "bitDepth", value: DataType.uint }
                        }
                      },
                      // Content Encoding
                      28032: {
                        name: "contentEncodings",
                        container: {
                          25152: {
                            name: "contentEncoding",
                            container: {
                              20529: { name: "order", value: DataType.uint },
                              20530: { name: "scope", value: DataType.bool },
                              20531: { name: "type", value: DataType.uint },
                              20532: {
                                name: "contentEncoding",
                                container: {
                                  16980: { name: "contentCompAlgo", value: DataType.uint },
                                  16981: { name: "contentCompSettings", value: DataType.binary }
                                }
                              },
                              20533: {
                                name: "contentEncoding",
                                container: {
                                  18401: { name: "contentEncAlgo", value: DataType.uint },
                                  18402: { name: "contentEncKeyID", value: DataType.binary },
                                  18403: { name: "contentSignature ", value: DataType.binary },
                                  18404: { name: "ContentSigKeyID  ", value: DataType.binary },
                                  18405: { name: "contentSigAlgo ", value: DataType.uint },
                                  18406: { name: "contentSigHashAlgo ", value: DataType.uint }
                                }
                              },
                              25188: { name: "bitDepth", value: DataType.uint }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              // Cueing Data
              475249515: {
                name: "cues",
                container: {
                  187: {
                    name: "cuePoint",
                    container: {
                      179: { name: "cueTime", value: DataType.uid },
                      183: {
                        name: "positions",
                        container: {
                          247: { name: "track", value: DataType.uint },
                          241: { name: "clusterPosition", value: DataType.uint },
                          21368: { name: "blockNumber", value: DataType.uint },
                          234: { name: "codecState", value: DataType.uint },
                          219: {
                            name: "reference",
                            container: {
                              150: { name: "time", value: DataType.uint },
                              151: { name: "cluster", value: DataType.uint },
                              21343: { name: "number", value: DataType.uint },
                              235: { name: "codecState", value: DataType.uint }
                            }
                          },
                          240: { name: "relativePosition", value: DataType.uint }
                          // extended
                        }
                      }
                    }
                  }
                }
              },
              // Attachment
              423732329: {
                name: "attachments",
                container: {
                  24999: {
                    name: "attachedFiles",
                    multiple: true,
                    container: {
                      18046: { name: "description", value: DataType.string },
                      18030: { name: "name", value: DataType.string },
                      18016: { name: "mimeType", value: DataType.string },
                      18012: { name: "data", value: DataType.binary },
                      18094: { name: "uid", value: DataType.uid }
                    }
                  }
                }
              },
              // Chapters
              272869232: {
                name: "chapters",
                container: {
                  17849: {
                    name: "editionEntry",
                    container: {
                      182: {
                        name: "chapterAtom",
                        container: {
                          29636: { name: "uid", value: DataType.uid },
                          145: { name: "timeStart", value: DataType.uint },
                          146: { name: "timeEnd", value: DataType.uid },
                          152: { name: "hidden", value: DataType.bool },
                          17816: { name: "enabled", value: DataType.uid },
                          143: {
                            name: "track",
                            container: {
                              137: { name: "trackNumber", value: DataType.uid },
                              128: {
                                name: "display",
                                container: {
                                  133: { name: "string", value: DataType.string },
                                  17276: { name: "language ", value: DataType.string },
                                  17278: { name: "country ", value: DataType.string }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              // Tagging
              307544935: {
                name: "tags",
                container: {
                  29555: {
                    name: "tag",
                    multiple: true,
                    container: {
                      25536: {
                        name: "target",
                        container: {
                          25541: { name: "tagTrackUID", value: DataType.uid },
                          25540: { name: "tagChapterUID", value: DataType.uint },
                          25542: { name: "tagAttachmentUID", value: DataType.uid },
                          25546: { name: "targetType", value: DataType.string },
                          // extended
                          26826: { name: "targetTypeValue", value: DataType.uint },
                          // extended
                          25545: { name: "tagEditionUID", value: DataType.uid }
                          // extended
                        }
                      },
                      26568: {
                        name: "simpleTags",
                        multiple: true,
                        container: {
                          17827: { name: "name", value: DataType.string },
                          17543: { name: "string", value: DataType.string },
                          17541: { name: "binary", value: DataType.binary },
                          17530: { name: "language", value: DataType.string },
                          // extended
                          17531: { name: "languageIETF", value: DataType.string },
                          // extended
                          17540: { name: "default", value: DataType.bool }
                          // extended
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      const debug$1 = initDebug("music-metadata:parser:ebml");
      class EbmlContentError extends makeUnexpectedFileContentError("EBML") {
      }
      var ParseAction;
      (function(ParseAction2) {
        ParseAction2[ParseAction2["ReadNext"] = 0] = "ReadNext";
        ParseAction2[ParseAction2["IgnoreElement"] = 2] = "IgnoreElement";
        ParseAction2[ParseAction2["SkipSiblings"] = 3] = "SkipSiblings";
        ParseAction2[ParseAction2["TerminateParsing"] = 4] = "TerminateParsing";
        ParseAction2[ParseAction2["SkipElement"] = 5] = "SkipElement";
      })(ParseAction || (ParseAction = {}));
      class EbmlIterator {
        /**
         * @param {ITokenizer} tokenizer Input
         * @param tokenizer
         */
        constructor(tokenizer) {
          this.tokenizer = tokenizer;
          this.padding = 0;
          this.parserMap = /* @__PURE__ */ new Map();
          this.ebmlMaxIDLength = 4;
          this.ebmlMaxSizeLength = 8;
          this.parserMap.set(DataType.uint, (e) => this.readUint(e));
          this.parserMap.set(DataType.string, (e) => this.readString(e));
          this.parserMap.set(DataType.binary, (e) => this.readBuffer(e));
          this.parserMap.set(DataType.uid, async (e) => this.readBuffer(e));
          this.parserMap.set(DataType.bool, (e) => this.readFlag(e));
          this.parserMap.set(DataType.float, (e) => this.readFloat(e));
        }
        async iterate(dtdElement, posDone, listener) {
          return this.parseContainer(linkParents(dtdElement), posDone, listener);
        }
        async parseContainer(dtdElement, posDone, listener) {
          const tree = {};
          while (this.tokenizer.position < posDone) {
            let element;
            const elementPosition = this.tokenizer.position;
            try {
              element = await this.readElement();
            } catch (error) {
              if (error instanceof EndOfStreamError$1) {
                break;
              }
              throw error;
            }
            const child = dtdElement.container[element.id];
            if (child) {
              const action = listener.startNext(child);
              switch (action) {
                case ParseAction.ReadNext:
                  {
                    if (element.id === 524531317) ;
                    debug$1(`Read element: name=${getElementPath(child)}{id=0x${element.id.toString(16)}, container=${!!child.container}} at position=${elementPosition}`);
                    if (child.container) {
                      const res = await this.parseContainer(child, element.len >= 0 ? this.tokenizer.position + element.len : -1, listener);
                      if (child.multiple) {
                        if (!tree[child.name]) {
                          tree[child.name] = [];
                        }
                        tree[child.name].push(res);
                      } else {
                        tree[child.name] = res;
                      }
                      await listener.elementValue(child, res, elementPosition);
                    } else {
                      const parser = this.parserMap.get(child.value);
                      if (typeof parser === "function") {
                        const value = await parser(element);
                        tree[child.name] = value;
                        await listener.elementValue(child, value, elementPosition);
                      }
                    }
                  }
                  break;
                case ParseAction.SkipElement:
                  debug$1(`Go to next element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);
                  break;
                case ParseAction.IgnoreElement:
                  debug$1(`Ignore element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);
                  await this.tokenizer.ignore(element.len);
                  break;
                case ParseAction.SkipSiblings:
                  debug$1(`Ignore remaining container, at: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);
                  await this.tokenizer.ignore(posDone - this.tokenizer.position);
                  break;
                case ParseAction.TerminateParsing:
                  debug$1(`Terminate parsing at element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);
                  return tree;
              }
            } else {
              switch (element.id) {
                case 236:
                  this.padding += element.len;
                  await this.tokenizer.ignore(element.len);
                  break;
                default:
                  debug$1(`parseEbml: parent=${getElementPath(dtdElement)}, unknown child: id=${element.id.toString(16)} at position=${elementPosition}`);
                  this.padding += element.len;
                  await this.tokenizer.ignore(element.len);
              }
            }
          }
          return tree;
        }
        async readVintData(maxLength) {
          const msb = await this.tokenizer.peekNumber(UINT8);
          let mask = 128;
          let oc = 1;
          while ((msb & mask) === 0) {
            if (oc > maxLength) {
              throw new EbmlContentError("VINT value exceeding maximum size");
            }
            ++oc;
            mask >>= 1;
          }
          const id = new Uint8Array(oc);
          await this.tokenizer.readBuffer(id);
          return id;
        }
        async readElement() {
          const id = await this.readVintData(this.ebmlMaxIDLength);
          const lenField = await this.readVintData(this.ebmlMaxSizeLength);
          lenField[0] ^= 128 >> lenField.length - 1;
          return {
            id: readUIntBE(id, id.length),
            len: readUIntBE(lenField, lenField.length)
          };
        }
        async readFloat(e) {
          switch (e.len) {
            case 0:
              return 0;
            case 4:
              return this.tokenizer.readNumber(Float32_BE);
            case 8:
              return this.tokenizer.readNumber(Float64_BE);
            case 10:
              return this.tokenizer.readNumber(Float64_BE);
            default:
              throw new EbmlContentError(`Invalid IEEE-754 float length: ${e.len}`);
          }
        }
        async readFlag(e) {
          return await this.readUint(e) === 1;
        }
        async readUint(e) {
          const buf = await this.readBuffer(e);
          return readUIntBE(buf, e.len);
        }
        async readString(e) {
          const rawString = await this.tokenizer.readToken(new StringType(e.len, "utf-8"));
          return rawString.replace(/\x00.*$/g, "");
        }
        async readBuffer(e) {
          const buf = new Uint8Array(e.len);
          await this.tokenizer.readBuffer(buf);
          return buf;
        }
      }
      function readUIntBE(buf, len) {
        return Number(readUIntBeAsBigInt(buf, len));
      }
      function readUIntBeAsBigInt(buf, len) {
        const normalizedNumber = new Uint8Array(8);
        const cleanNumber = buf.subarray(0, len);
        try {
          normalizedNumber.set(cleanNumber, 8 - len);
          return UINT64_BE.get(normalizedNumber, 0);
        } catch (error) {
          return BigInt(-1);
        }
      }
      function linkParents(element) {
        if (element.container) {
          Object.keys(element.container).map((id) => {
            const child = element.container[id];
            child.id = Number.parseInt(id);
            return child;
          }).forEach((child) => {
            child.parent = element;
            linkParents(child);
          });
        }
        return element;
      }
      function getElementPath(element) {
        let path = "";
        if (element.parent && element.parent.name !== "dtd") {
          path += `${getElementPath(element.parent)}/`;
        }
        return path + element.name;
      }
      const debug = initDebug("music-metadata:parser:matroska");
      class MatroskaParser extends BasicParser {
        constructor() {
          super(...arguments);
          this.seekHeadOffset = 0;
          this.flagUseIndexToSkipClusters = this.options.mkvUseIndex ?? false;
        }
        async parse() {
          const containerSize = this.tokenizer.fileInfo.size ?? Number.MAX_SAFE_INTEGER;
          const matroskaIterator = new EbmlIterator(this.tokenizer);
          debug("Initializing DTD end MatroskaIterator");
          await matroskaIterator.iterate(matroskaDtd, containerSize, {
            startNext: (element) => {
              switch (element.id) {
                case 475249515:
                  debug(`Skip element: name=${element.name}, id=0x${element.id.toString(16)}`);
                  return ParseAction.IgnoreElement;
                case 524531317:
                  if (this.flagUseIndexToSkipClusters && this.seekHead) {
                    const index = this.seekHead.seek.find((index2) => index2.position + this.seekHeadOffset > this.tokenizer.position);
                    if (index) {
                      const ignoreSize = index.position + this.seekHeadOffset - this.tokenizer.position;
                      debug(`Use index to go to next position, ignoring ${ignoreSize} bytes`);
                      this.tokenizer.ignore(ignoreSize);
                      return ParseAction.SkipElement;
                    }
                  }
                  return ParseAction.IgnoreElement;
                default:
                  return ParseAction.ReadNext;
              }
            },
            elementValue: async (element, value, offset) => {
              debug(`Received: name=${element.name}, value=${value}`);
              switch (element.id) {
                case 17026:
                  this.metadata.setFormat("container", `EBML/${value}`);
                  break;
                case 290298740:
                  this.seekHead = value;
                  this.seekHeadOffset = offset;
                  break;
                case 357149030:
                  {
                    const info = value;
                    const timecodeScale = info.timecodeScale ? info.timecodeScale : 1e6;
                    if (typeof info.duration === "number") {
                      const duration = info.duration * timecodeScale / 1e9;
                      await this.addTag("segment:title", info.title);
                      this.metadata.setFormat("duration", Number(duration));
                    }
                  }
                  break;
                case 374648427:
                  {
                    const audioTracks = value;
                    if (audioTracks == null ? void 0 : audioTracks.entries) {
                      audioTracks.entries.forEach((entry) => {
                        const stream = {
                          codecName: entry.codecID.replace("A_", "").replace("V_", ""),
                          codecSettings: entry.codecSettings,
                          flagDefault: entry.flagDefault,
                          flagLacing: entry.flagLacing,
                          flagEnabled: entry.flagEnabled,
                          language: entry.language,
                          name: entry.name,
                          type: entry.trackType,
                          audio: entry.audio,
                          video: entry.video
                        };
                        this.metadata.addStreamInfo(stream);
                      });
                      const audioTrack = audioTracks.entries.filter((entry) => entry.trackType === TrackType.audio).reduce((acc, cur) => {
                        if (!acc)
                          return cur;
                        if (cur.flagDefault && !acc.flagDefault)
                          return cur;
                        if (cur.trackNumber < acc.trackNumber)
                          return cur;
                        return acc;
                      }, null);
                      if (audioTrack) {
                        this.metadata.setFormat("codec", audioTrack.codecID.replace("A_", ""));
                        this.metadata.setFormat("sampleRate", audioTrack.audio.samplingFrequency);
                        this.metadata.setFormat("numberOfChannels", audioTrack.audio.channels);
                      }
                    }
                  }
                  break;
                case 307544935:
                  {
                    const tags = value;
                    await Promise.all(tags.tag.map(async (tag) => {
                      const target = tag.target;
                      const targetType = (target == null ? void 0 : target.targetTypeValue) ? TargetType[target.targetTypeValue] : (target == null ? void 0 : target.targetType) ? target.targetType : "track";
                      await Promise.all(tag.simpleTags.map(async (simpleTag) => {
                        const value2 = simpleTag.string ? simpleTag.string : simpleTag.binary;
                        await this.addTag(`${targetType}:${simpleTag.name}`, value2);
                      }));
                    }));
                  }
                  break;
                case 423732329:
                  {
                    const attachments = value;
                    await Promise.all(attachments.attachedFiles.filter((file) => file.mimeType.startsWith("image/")).map((file) => this.addTag("picture", {
                      data: file.data,
                      format: file.mimeType,
                      description: file.description,
                      name: file.name
                    })));
                  }
                  break;
              }
            }
          });
        }
        async addTag(tagId, value) {
          await this.metadata.addTag("matroska", tagId, value);
        }
      } exports("MatroskaParser", MatroskaParser);

    })
  };
}));

System.register("./MP4Parser-CJGrwS9Y-yroBH10s.js", ['./__monkey.entry-SDvwpoNt.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge'], (function (exports, module) {
  'use strict';
  var initDebug, BasicParser, UINT32_BE, StringType, Token, TrackType, Uint8ArrayType, uint8ArrayToHex, uint8ArrayToString, UINT16_BE, UINT8, makeUnexpectedFileContentError, FourCcToken, UINT24_BE, INT16_BE, INT32_BE, INT8, INT24_BE, Genres, UINT64_BE;
  return {
    setters: [module => {
      initDebug = module.i;
      BasicParser = module.B;
      UINT32_BE = module.a;
      StringType = module.S;
      Token = module.y;
      TrackType = module.T;
      Uint8ArrayType = module.U;
      uint8ArrayToHex = module.u;
      uint8ArrayToString = module.z;
      UINT16_BE = module.d;
      UINT8 = module.c;
      makeUnexpectedFileContentError = module.m;
      FourCcToken = module.F;
      UINT24_BE = module.r;
      INT16_BE = module.I;
      INT32_BE = module.C;
      INT8 = module.D;
      INT24_BE = module.G;
      Genres = module.H;
      UINT64_BE = module.x;
    }, null, null, null, null, null],
    execute: (function () {

      const debug$2 = initDebug("music-metadata:parser:MP4:atom");
      class Mp4ContentError extends makeUnexpectedFileContentError("MP4") {
      }
      const Header = {
        len: 8,
        get: (buf, off) => {
          const length = UINT32_BE.get(buf, off);
          if (length < 0)
            throw new Mp4ContentError("Invalid atom header length");
          return {
            length: BigInt(length),
            name: new StringType(4, "latin1").get(buf, off + 4)
          };
        },
        put: (buf, off, hdr) => {
          UINT32_BE.put(buf, off, Number(hdr.length));
          return FourCcToken.put(buf, off + 4, hdr.name);
        }
      };
      const ExtendedSize = UINT64_BE;
      const ftyp = {
        len: 4,
        get: (buf, off) => {
          return {
            type: new StringType(4, "ascii").get(buf, off)
          };
        }
      };
      class FixedLengthAtom {
        /**
         *
         * @param {number} len Length as specified in the size field
         * @param {number} expLen Total length of sum of specified fields in the standard
         * @param atomId Atom ID
         */
        constructor(len, expLen, atomId) {
          this.len = len;
          if (len < expLen) {
            throw new Mp4ContentError(`Atom ${atomId} expected to be ${expLen}, but specifies ${len} bytes long.`);
          }
          if (len > expLen) {
            debug$2(`Warning: atom ${atomId} expected to be ${expLen}, but was actually ${len} bytes long.`);
          }
        }
      }
      const SecondsSinceMacEpoch = {
        len: 4,
        get: (buf, off) => {
          const secondsSinceUnixEpoch = UINT32_BE.get(buf, off) - 2082844800;
          return new Date(secondsSinceUnixEpoch * 1e3);
        }
      };
      class MdhdAtom extends FixedLengthAtom {
        constructor(len) {
          super(len, 24, "mdhd");
          this.len = len;
        }
        get(buf, off) {
          return {
            version: UINT8.get(buf, off + 0),
            flags: UINT24_BE.get(buf, off + 1),
            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),
            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),
            timeScale: UINT32_BE.get(buf, off + 12),
            duration: UINT32_BE.get(buf, off + 16),
            language: UINT16_BE.get(buf, off + 20),
            quality: UINT16_BE.get(buf, off + 22)
          };
        }
      }
      class MvhdAtom extends FixedLengthAtom {
        constructor(len) {
          super(len, 100, "mvhd");
          this.len = len;
        }
        get(buf, off) {
          return {
            version: UINT8.get(buf, off),
            flags: UINT24_BE.get(buf, off + 1),
            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),
            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),
            timeScale: UINT32_BE.get(buf, off + 12),
            duration: UINT32_BE.get(buf, off + 16),
            preferredRate: UINT32_BE.get(buf, off + 20),
            preferredVolume: UINT16_BE.get(buf, off + 24),
            // ignore reserver: 10 bytes
            // ignore matrix structure: 36 bytes
            previewTime: UINT32_BE.get(buf, off + 72),
            previewDuration: UINT32_BE.get(buf, off + 76),
            posterTime: UINT32_BE.get(buf, off + 80),
            selectionTime: UINT32_BE.get(buf, off + 84),
            selectionDuration: UINT32_BE.get(buf, off + 88),
            currentTime: UINT32_BE.get(buf, off + 92),
            nextTrackID: UINT32_BE.get(buf, off + 96)
          };
        }
      }
      class DataAtom {
        constructor(len) {
          this.len = len;
        }
        get(buf, off) {
          return {
            type: {
              set: UINT8.get(buf, off + 0),
              type: UINT24_BE.get(buf, off + 1)
            },
            locale: UINT24_BE.get(buf, off + 4),
            value: new Uint8ArrayType(this.len - 8).get(buf, off + 8)
          };
        }
      }
      class NameAtom {
        constructor(len) {
          this.len = len;
        }
        get(buf, off) {
          return {
            version: UINT8.get(buf, off),
            flags: UINT24_BE.get(buf, off + 1),
            name: new StringType(this.len - 4, "utf-8").get(buf, off + 4)
          };
        }
      }
      class TrackHeaderAtom {
        constructor(len) {
          this.len = len;
        }
        get(buf, off) {
          return {
            version: UINT8.get(buf, off),
            flags: UINT24_BE.get(buf, off + 1),
            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),
            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),
            trackId: UINT32_BE.get(buf, off + 12),
            // reserved 4 bytes
            duration: UINT32_BE.get(buf, off + 20),
            layer: UINT16_BE.get(buf, off + 24),
            alternateGroup: UINT16_BE.get(buf, off + 26),
            volume: UINT16_BE.get(buf, off + 28)
            // ToDo: fixed point
            // ToDo: add remaining fields
          };
        }
      }
      const stsdHeader = {
        len: 8,
        get: (buf, off) => {
          return {
            version: UINT8.get(buf, off),
            flags: UINT24_BE.get(buf, off + 1),
            numberOfEntries: UINT32_BE.get(buf, off + 4)
          };
        }
      };
      class SampleDescriptionTable {
        constructor(len) {
          this.len = len;
        }
        get(buf, off) {
          const descrLen = this.len - 12;
          return {
            dataFormat: FourCcToken.get(buf, off),
            dataReferenceIndex: UINT16_BE.get(buf, off + 10),
            description: descrLen > 0 ? new Uint8ArrayType(descrLen).get(buf, off + 12) : void 0
          };
        }
      }
      class StsdAtom {
        constructor(len) {
          this.len = len;
        }
        get(buf, off) {
          const header = stsdHeader.get(buf, off);
          off += stsdHeader.len;
          const table = [];
          for (let n = 0; n < header.numberOfEntries; ++n) {
            const size = UINT32_BE.get(buf, off);
            off += UINT32_BE.len;
            table.push(new SampleDescriptionTable(size - UINT32_BE.len).get(buf, off));
            off += size;
          }
          return {
            header,
            table
          };
        }
      }
      const SoundSampleDescriptionVersion = {
        len: 8,
        get(buf, off) {
          return {
            version: INT16_BE.get(buf, off),
            revision: INT16_BE.get(buf, off + 2),
            vendor: INT32_BE.get(buf, off + 4)
          };
        }
      };
      const SoundSampleDescriptionV0 = {
        len: 12,
        get(buf, off) {
          return {
            numAudioChannels: INT16_BE.get(buf, off + 0),
            sampleSize: INT16_BE.get(buf, off + 2),
            compressionId: INT16_BE.get(buf, off + 4),
            packetSize: INT16_BE.get(buf, off + 6),
            sampleRate: UINT16_BE.get(buf, off + 8) + UINT16_BE.get(buf, off + 10) / 1e4
          };
        }
      };
      class SimpleTableAtom {
        constructor(len, token) {
          this.len = len;
          this.token = token;
        }
        get(buf, off) {
          const nrOfEntries = INT32_BE.get(buf, off + 4);
          return {
            version: INT8.get(buf, off + 0),
            flags: INT24_BE.get(buf, off + 1),
            numberOfEntries: nrOfEntries,
            entries: readTokenTable(buf, this.token, off + 8, this.len - 8, nrOfEntries)
          };
        }
      }
      const TimeToSampleToken = {
        len: 8,
        get(buf, off) {
          return {
            count: INT32_BE.get(buf, off + 0),
            duration: INT32_BE.get(buf, off + 4)
          };
        }
      };
      class SttsAtom extends SimpleTableAtom {
        constructor(len) {
          super(len, TimeToSampleToken);
          this.len = len;
        }
      }
      const SampleToChunkToken = {
        len: 12,
        get(buf, off) {
          return {
            firstChunk: INT32_BE.get(buf, off),
            samplesPerChunk: INT32_BE.get(buf, off + 4),
            sampleDescriptionId: INT32_BE.get(buf, off + 8)
          };
        }
      };
      class StscAtom extends SimpleTableAtom {
        constructor(len) {
          super(len, SampleToChunkToken);
          this.len = len;
        }
      }
      class StszAtom {
        constructor(len) {
          this.len = len;
        }
        get(buf, off) {
          const nrOfEntries = INT32_BE.get(buf, off + 8);
          return {
            version: INT8.get(buf, off),
            flags: INT24_BE.get(buf, off + 1),
            sampleSize: INT32_BE.get(buf, off + 4),
            numberOfEntries: nrOfEntries,
            entries: readTokenTable(buf, INT32_BE, off + 12, this.len - 12, nrOfEntries)
          };
        }
      }
      class StcoAtom extends SimpleTableAtom {
        constructor(len) {
          super(len, INT32_BE);
          this.len = len;
        }
      }
      class ChapterText {
        constructor(len) {
          this.len = len;
        }
        get(buf, off) {
          const titleLen = INT16_BE.get(buf, off + 0);
          const str = new StringType(titleLen, "utf-8");
          return str.get(buf, off + 2);
        }
      }
      function readTokenTable(buf, token, off, remainingLen, numberOfEntries) {
        debug$2(`remainingLen=${remainingLen}, numberOfEntries=${numberOfEntries} * token-len=${token.len}`);
        if (remainingLen === 0)
          return [];
        if (remainingLen !== numberOfEntries * token.len)
          throw new Mp4ContentError("mismatch number-of-entries with remaining atom-length");
        const entries = [];
        for (let n = 0; n < numberOfEntries; ++n) {
          entries.push(token.get(buf, off));
          off += token.len;
        }
        return entries;
      }
      const debug$1 = initDebug("music-metadata:parser:MP4:Atom");
      class Atom {
        static async readAtom(tokenizer, dataHandler, parent, remaining) {
          const offset = tokenizer.position;
          debug$1(`Reading next token on offset=${offset}...`);
          const header = await tokenizer.readToken(Header);
          const extended = header.length === 1n;
          if (extended) {
            header.length = await tokenizer.readToken(ExtendedSize);
          }
          const atomBean = new Atom(header, extended, parent);
          const payloadLength = atomBean.getPayloadLength(remaining);
          debug$1(`parse atom name=${atomBean.atomPath}, extended=${atomBean.extended}, offset=${offset}, len=${atomBean.header.length}`);
          await atomBean.readData(tokenizer, dataHandler, payloadLength);
          return atomBean;
        }
        constructor(header, extended, parent) {
          this.header = header;
          this.extended = extended;
          this.parent = parent;
          this.children = [];
          this.atomPath = (this.parent ? `${this.parent.atomPath}.` : "") + this.header.name;
        }
        getHeaderLength() {
          return this.extended ? 16 : 8;
        }
        getPayloadLength(remaining) {
          return (this.header.length === 0n ? remaining : Number(this.header.length)) - this.getHeaderLength();
        }
        async readAtoms(tokenizer, dataHandler, size) {
          while (size > 0) {
            const atomBean = await Atom.readAtom(tokenizer, dataHandler, this, size);
            this.children.push(atomBean);
            size -= atomBean.header.length === 0n ? size : Number(atomBean.header.length);
          }
        }
        async readData(tokenizer, dataHandler, remaining) {
          switch (this.header.name) {
            case "moov":
            case "udta":
            case "trak":
            case "mdia":
            case "minf":
            case "stbl":
            case "<id>":
            case "ilst":
            case "tref":
              return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining));
            case "meta": {
              const peekHeader = await tokenizer.peekToken(Header);
              const paddingLength = peekHeader.name === "hdlr" ? 0 : 4;
              await tokenizer.ignore(paddingLength);
              return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining) - paddingLength);
            }
            default:
              return dataHandler(this, remaining);
          }
        }
      }
      const debug = initDebug("music-metadata:parser:MP4");
      const tagFormat = "iTunes";
      const encoderDict = {
        raw: {
          lossy: false,
          format: "raw"
        },
        MAC3: {
          lossy: true,
          format: "MACE 3:1"
        },
        MAC6: {
          lossy: true,
          format: "MACE 6:1"
        },
        ima4: {
          lossy: true,
          format: "IMA 4:1"
        },
        ulaw: {
          lossy: true,
          format: "uLaw 2:1"
        },
        alaw: {
          lossy: true,
          format: "uLaw 2:1"
        },
        Qclp: {
          lossy: true,
          format: "QUALCOMM PureVoice"
        },
        ".mp3": {
          lossy: true,
          format: "MPEG-1 layer 3"
        },
        alac: {
          lossy: false,
          format: "ALAC"
        },
        "ac-3": {
          lossy: true,
          format: "AC-3"
        },
        mp4a: {
          lossy: true,
          format: "MPEG-4/AAC"
        },
        mp4s: {
          lossy: true,
          format: "MP4S"
        },
        // Closed Captioning Media, https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-SW87
        c608: {
          lossy: true,
          format: "CEA-608"
        },
        c708: {
          lossy: true,
          format: "CEA-708"
        }
      };
      function distinct(value, index, self) {
        return self.indexOf(value) === index;
      }
      class MP4Parser extends BasicParser {
        constructor() {
          super(...arguments);
          this.tracks = [];
          this.atomParsers = {
            /**
             * Parse movie header (mvhd) atom
             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-56313
             */
            mvhd: async (len) => {
              const mvhd = await this.tokenizer.readToken(new MvhdAtom(len));
              this.metadata.setFormat("creationTime", mvhd.creationTime);
              this.metadata.setFormat("modificationTime", mvhd.modificationTime);
            },
            /**
             * Parse media header (mdhd) atom
             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25615
             */
            mdhd: async (len) => {
              const mdhd_data = await this.tokenizer.readToken(new MdhdAtom(len));
              const td = this.getTrackDescription();
              td.creationTime = mdhd_data.creationTime;
              td.modificationTime = mdhd_data.modificationTime;
              td.timeScale = mdhd_data.timeScale;
              td.duration = mdhd_data.duration;
            },
            chap: async (len) => {
              const td = this.getTrackDescription();
              const trackIds = [];
              while (len >= UINT32_BE.len) {
                trackIds.push(await this.tokenizer.readNumber(UINT32_BE));
                len -= UINT32_BE.len;
              }
              td.chapterList = trackIds;
            },
            tkhd: async (len) => {
              const track = await this.tokenizer.readToken(new TrackHeaderAtom(len));
              this.tracks.push(track);
            },
            /**
             * Parse mdat atom.
             * Will scan for chapters
             */
            mdat: async (len) => {
              this.audioLengthInBytes = len;
              this.calculateBitRate();
              if (this.options.includeChapters) {
                const trackWithChapters = this.tracks.filter((track) => track.chapterList);
                if (trackWithChapters.length === 1) {
                  const chapterTrackIds = trackWithChapters[0].chapterList;
                  const chapterTracks = this.tracks.filter((track) => chapterTrackIds.indexOf(track.trackId) !== -1);
                  if (chapterTracks.length === 1) {
                    return this.parseChapterTrack(chapterTracks[0], trackWithChapters[0], len);
                  }
                }
              }
              await this.tokenizer.ignore(len);
            },
            ftyp: async (len) => {
              const types = [];
              while (len > 0) {
                const ftype = await this.tokenizer.readToken(ftyp);
                len -= ftyp.len;
                const value = ftype.type.replace(/\W/g, "");
                if (value.length > 0) {
                  types.push(value);
                }
              }
              debug(`ftyp: ${types.join("/")}`);
              const x = types.filter(distinct).join("/");
              this.metadata.setFormat("container", x);
            },
            /**
             * Parse sample description atom
             */
            stsd: async (len) => {
              const stsd = await this.tokenizer.readToken(new StsdAtom(len));
              const trackDescription = this.getTrackDescription();
              trackDescription.soundSampleDescription = stsd.table.map((dfEntry) => this.parseSoundSampleDescription(dfEntry));
            },
            /**
             * sample-to-Chunk Atoms
             */
            stsc: async (len) => {
              const stsc = await this.tokenizer.readToken(new StscAtom(len));
              this.getTrackDescription().sampleToChunkTable = stsc.entries;
            },
            /**
             * time-to-sample table
             */
            stts: async (len) => {
              const stts = await this.tokenizer.readToken(new SttsAtom(len));
              this.getTrackDescription().timeToSampleTable = stts.entries;
            },
            /**
             * Parse sample-sizes atom ('stsz')
             */
            stsz: async (len) => {
              const stsz = await this.tokenizer.readToken(new StszAtom(len));
              const td = this.getTrackDescription();
              td.sampleSize = stsz.sampleSize;
              td.sampleSizeTable = stsz.entries;
            },
            /**
             * Parse chunk-offset atom ('stco')
             */
            stco: async (len) => {
              const stco = await this.tokenizer.readToken(new StcoAtom(len));
              this.getTrackDescription().chunkOffsetTable = stco.entries;
            },
            date: async (len) => {
              const date = await this.tokenizer.readToken(new StringType(len, "utf-8"));
              await this.addTag("date", date);
            }
          };
        }
        static read_BE_Integer(array, signed) {
          const integerType = (signed ? "INT" : "UINT") + array.length * 8 + (array.length > 1 ? "_BE" : "");
          const token = Token[integerType];
          if (!token) {
            throw new Mp4ContentError(`Token for integer type not found: "${integerType}"`);
          }
          return Number(token.get(array, 0));
        }
        async parse() {
          this.tracks = [];
          let remainingFileSize = this.tokenizer.fileInfo.size || 0;
          while (!this.tokenizer.fileInfo.size || remainingFileSize > 0) {
            try {
              const token = await this.tokenizer.peekToken(Header);
              if (token.name === "\0\0\0\0") {
                const errMsg = `Error at offset=${this.tokenizer.position}: box.id=0`;
                debug(errMsg);
                this.addWarning(errMsg);
                break;
              }
            } catch (error) {
              if (error instanceof Error) {
                const errMsg = `Error at offset=${this.tokenizer.position}: ${error.message}`;
                debug(errMsg);
                this.addWarning(errMsg);
              } else
                throw error;
              break;
            }
            const rootAtom = await Atom.readAtom(this.tokenizer, (atom, remaining) => this.handleAtom(atom, remaining), null, remainingFileSize);
            remainingFileSize -= rootAtom.header.length === BigInt(0) ? remainingFileSize : Number(rootAtom.header.length);
          }
          const formatList = [];
          this.tracks.forEach((track) => {
            const trackFormats = [];
            track.soundSampleDescription.forEach((ssd) => {
              const streamInfo = {};
              const encoderInfo = encoderDict[ssd.dataFormat];
              if (encoderInfo) {
                trackFormats.push(encoderInfo.format);
                streamInfo.codecName = encoderInfo.format;
              } else {
                streamInfo.codecName = `<${ssd.dataFormat}>`;
              }
              if (ssd.description) {
                const { description } = ssd;
                if (description.sampleRate > 0) {
                  streamInfo.type = TrackType.audio;
                  streamInfo.audio = {
                    samplingFrequency: description.sampleRate,
                    bitDepth: description.sampleSize,
                    channels: description.numAudioChannels
                  };
                }
              }
              this.metadata.addStreamInfo(streamInfo);
            });
            if (trackFormats.length >= 1) {
              formatList.push(trackFormats.join("/"));
            }
          });
          if (formatList.length > 0) {
            this.metadata.setFormat("codec", formatList.filter(distinct).join("+"));
          }
          const audioTracks = this.tracks.filter((track) => {
            return track.soundSampleDescription.length >= 1 && track.soundSampleDescription[0].description && track.soundSampleDescription[0].description.numAudioChannels > 0;
          });
          if (audioTracks.length >= 1) {
            const audioTrack = audioTracks[0];
            if (audioTrack.timeScale > 0) {
              const duration = audioTrack.duration / audioTrack.timeScale;
              this.metadata.setFormat("duration", duration);
            }
            const ssd = audioTrack.soundSampleDescription[0];
            if (ssd.description) {
              this.metadata.setFormat("sampleRate", ssd.description.sampleRate);
              this.metadata.setFormat("bitsPerSample", ssd.description.sampleSize);
              this.metadata.setFormat("numberOfChannels", ssd.description.numAudioChannels);
              if (audioTrack.timeScale === 0 && audioTrack.timeToSampleTable.length > 0) {
                const totalSampleSize = audioTrack.timeToSampleTable.map((ttstEntry) => ttstEntry.count * ttstEntry.duration).reduce((total, sampleSize) => total + sampleSize);
                const duration = totalSampleSize / ssd.description.sampleRate;
                this.metadata.setFormat("duration", duration);
              }
            }
            const encoderInfo = encoderDict[ssd.dataFormat];
            if (encoderInfo) {
              this.metadata.setFormat("lossless", !encoderInfo.lossy);
            }
            this.calculateBitRate();
          }
        }
        async handleAtom(atom, remaining) {
          if (atom.parent) {
            switch (atom.parent.header.name) {
              case "ilst":
              case "<id>":
                return this.parseMetadataItemData(atom);
            }
          }
          if (this.atomParsers[atom.header.name]) {
            return this.atomParsers[atom.header.name](remaining);
          }
          debug(`No parser for atom path=${atom.atomPath}, payload-len=${remaining}, ignoring atom`);
          await this.tokenizer.ignore(remaining);
        }
        getTrackDescription() {
          return this.tracks[this.tracks.length - 1];
        }
        calculateBitRate() {
          if (this.audioLengthInBytes && this.metadata.format.duration) {
            this.metadata.setFormat("bitrate", 8 * this.audioLengthInBytes / this.metadata.format.duration);
          }
        }
        async addTag(id, value) {
          await this.metadata.addTag(tagFormat, id, value);
        }
        addWarning(message) {
          debug(`Warning: ${message}`);
          this.metadata.addWarning(message);
        }
        /**
         * Parse data of Meta-item-list-atom (item of 'ilst' atom)
         * @param metaAtom
         * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8
         */
        parseMetadataItemData(metaAtom) {
          let tagKey = metaAtom.header.name;
          return metaAtom.readAtoms(this.tokenizer, async (child, remaining) => {
            const payLoadLength = child.getPayloadLength(remaining);
            switch (child.header.name) {
              case "data":
                return this.parseValueAtom(tagKey, child);
              case "name":
              case "mean":
              case "rate": {
                const name = await this.tokenizer.readToken(new NameAtom(payLoadLength));
                tagKey += `:${name.name}`;
                break;
              }
              default: {
                const uint8Array = await this.tokenizer.readToken(new Uint8ArrayType(payLoadLength));
                this.addWarning(`Unsupported meta-item: ${tagKey}[${child.header.name}] => value=${uint8ArrayToHex(uint8Array)} ascii=${uint8ArrayToString(uint8Array, "ascii")}`);
              }
            }
          }, metaAtom.getPayloadLength(0));
        }
        async parseValueAtom(tagKey, metaAtom) {
          const dataAtom = await this.tokenizer.readToken(new DataAtom(Number(metaAtom.header.length) - Header.len));
          if (dataAtom.type.set !== 0) {
            throw new Mp4ContentError(`Unsupported type-set != 0: ${dataAtom.type.set}`);
          }
          switch (dataAtom.type.type) {
            case 0:
              switch (tagKey) {
                case "trkn":
                case "disk": {
                  const num = UINT8.get(dataAtom.value, 3);
                  const of = UINT8.get(dataAtom.value, 5);
                  await this.addTag(tagKey, `${num}/${of}`);
                  break;
                }
                case "gnre": {
                  const genreInt = UINT8.get(dataAtom.value, 1);
                  const genreStr = Genres[genreInt - 1];
                  await this.addTag(tagKey, genreStr);
                  break;
                }
                case "rate": {
                  const rate = new TextDecoder("ascii").decode(dataAtom.value);
                  await this.addTag(tagKey, rate);
                  break;
                }
                default:
                  debug(`unknown proprietary value type for: ${metaAtom.atomPath}`);
              }
              break;
            case 1:
            case 18:
              await this.addTag(tagKey, new TextDecoder("utf-8").decode(dataAtom.value));
              break;
            case 13:
              if (this.options.skipCovers)
                break;
              await this.addTag(tagKey, {
                format: "image/jpeg",
                data: Uint8Array.from(dataAtom.value)
              });
              break;
            case 14:
              if (this.options.skipCovers)
                break;
              await this.addTag(tagKey, {
                format: "image/png",
                data: Uint8Array.from(dataAtom.value)
              });
              break;
            case 21:
              await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, true));
              break;
            case 22:
              await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, false));
              break;
            case 65:
              await this.addTag(tagKey, UINT8.get(dataAtom.value, 0));
              break;
            case 66:
              await this.addTag(tagKey, UINT16_BE.get(dataAtom.value, 0));
              break;
            case 67:
              await this.addTag(tagKey, UINT32_BE.get(dataAtom.value, 0));
              break;
            default:
              this.addWarning(`atom key=${tagKey}, has unknown well-known-type (data-type): ${dataAtom.type.type}`);
          }
        }
        /**
         * @param sampleDescription
         * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-128916
         */
        parseSoundSampleDescription(sampleDescription) {
          const ssd = {
            dataFormat: sampleDescription.dataFormat,
            dataReferenceIndex: sampleDescription.dataReferenceIndex
          };
          let offset = 0;
          if (sampleDescription.description) {
            const version = SoundSampleDescriptionVersion.get(sampleDescription.description, offset);
            offset += SoundSampleDescriptionVersion.len;
            if (version.version === 0 || version.version === 1) {
              ssd.description = SoundSampleDescriptionV0.get(sampleDescription.description, offset);
            } else {
              debug(`Warning: sound-sample-description ${version} not implemented`);
            }
          }
          return ssd;
        }
        async parseChapterTrack(chapterTrack, track, len) {
          if (!chapterTrack.sampleSize) {
            if (chapterTrack.chunkOffsetTable.length !== chapterTrack.sampleSizeTable.length)
              throw new Error("Expected equal chunk-offset-table & sample-size-table length.");
          }
          const chapters = [];
          for (let i = 0; i < chapterTrack.chunkOffsetTable.length && len > 0; ++i) {
            const chunkOffset = chapterTrack.chunkOffsetTable[i];
            const nextChunkLen = chunkOffset - this.tokenizer.position;
            const sampleSize = chapterTrack.sampleSize > 0 ? chapterTrack.sampleSize : chapterTrack.sampleSizeTable[i];
            len -= nextChunkLen + sampleSize;
            if (len < 0)
              throw new Mp4ContentError("Chapter chunk exceeding token length");
            await this.tokenizer.ignore(nextChunkLen);
            const title = await this.tokenizer.readToken(new ChapterText(sampleSize));
            debug(`Chapter ${i + 1}: ${title}`);
            const chapter = {
              title,
              sampleOffset: this.findSampleOffset(track, this.tokenizer.position)
            };
            debug(`Chapter title=${chapter.title}, offset=${chapter.sampleOffset}/${this.tracks[0].duration}`);
            chapters.push(chapter);
          }
          this.metadata.setFormat("chapters", chapters);
          await this.tokenizer.ignore(len);
        }
        findSampleOffset(track, chapterOffset) {
          let totalDuration = 0;
          track.timeToSampleTable.forEach((e) => {
            totalDuration += e.count * e.duration;
          });
          debug(`Total duration=${totalDuration}`);
          let chunkIndex = 0;
          while (chunkIndex < track.chunkOffsetTable.length && track.chunkOffsetTable[chunkIndex] < chapterOffset) {
            ++chunkIndex;
          }
          return this.getChunkDuration(chunkIndex + 1, track);
        }
        getChunkDuration(chunkId, track) {
          let ttsi = 0;
          let ttsc = track.timeToSampleTable[ttsi].count;
          let ttsd = track.timeToSampleTable[ttsi].duration;
          let curChunkId = 1;
          let samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);
          let totalDuration = 0;
          while (curChunkId < chunkId) {
            const nrOfSamples = Math.min(ttsc, samplesPerChunk);
            totalDuration += nrOfSamples * ttsd;
            ttsc -= nrOfSamples;
            samplesPerChunk -= nrOfSamples;
            if (samplesPerChunk === 0) {
              ++curChunkId;
              samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);
            } else {
              ++ttsi;
              ttsc = track.timeToSampleTable[ttsi].count;
              ttsd = track.timeToSampleTable[ttsi].duration;
            }
          }
          return totalDuration;
        }
        getSamplesPerChunk(chunkId, stcTable) {
          for (let i = 0; i < stcTable.length - 1; ++i) {
            if (chunkId >= stcTable[i].firstChunk && chunkId < stcTable[i + 1].firstChunk) {
              return stcTable[i].samplesPerChunk;
            }
          }
          return stcTable[stcTable.length - 1].samplesPerChunk;
        }
      } exports("MP4Parser", MP4Parser);

    })
  };
}));

System.register("./MusepackParser-ImJ4EqDU-CBDf08G9.js", ['./__monkey.entry-SDvwpoNt.js', './AbstractID3Parser-FIM36LHz-B5gpnOzd.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge', './ID3v2Parser-eXNf-3mE-7kzMCmWm.js'], (function (exports, module) {
  'use strict';
  var initDebug, StringType, makeUnexpectedFileContentError, BasicParser, FourCcToken, APEv2Parser, UINT8, UINT32_LE, getBitAllignedNumber, UINT16_LE, isBitSet$1, AbstractID3Parser;
  return {
    setters: [module => {
      initDebug = module.i;
      StringType = module.S;
      makeUnexpectedFileContentError = module.m;
      BasicParser = module.B;
      FourCcToken = module.F;
      APEv2Parser = module.J;
      UINT8 = module.c;
      UINT32_LE = module.f;
      getBitAllignedNumber = module.g;
      UINT16_LE = module.k;
      isBitSet$1 = module.b;
    }, module => {
      AbstractID3Parser = module.A;
    }, null, null, null, null, null, null],
    execute: (function () {

      const debug$3 = initDebug("music-metadata:parser:musepack:sv8");
      const PacketKey = new StringType(2, "latin1");
      const SH_part1 = {
        len: 5,
        get: (buf, off) => {
          return {
            crc: UINT32_LE.get(buf, off),
            streamVersion: UINT8.get(buf, off + 4)
          };
        }
      };
      const SH_part3 = {
        len: 2,
        get: (buf, off) => {
          return {
            sampleFrequency: [44100, 48e3, 37800, 32e3][getBitAllignedNumber(buf, off, 0, 3)],
            maxUsedBands: getBitAllignedNumber(buf, off, 3, 5),
            channelCount: getBitAllignedNumber(buf, off + 1, 0, 4) + 1,
            msUsed: isBitSet$1(buf, off + 1, 4),
            audioBlockFrames: getBitAllignedNumber(buf, off + 1, 5, 3)
          };
        }
      };
      class StreamReader {
        constructor(tokenizer) {
          this.tokenizer = tokenizer;
        }
        async readPacketHeader() {
          const key = await this.tokenizer.readToken(PacketKey);
          const size = await this.readVariableSizeField();
          return {
            key,
            payloadLength: size.value - 2 - size.len
          };
        }
        async readStreamHeader(size) {
          const streamHeader = {};
          debug$3(`Reading SH at offset=${this.tokenizer.position}`);
          const part1 = await this.tokenizer.readToken(SH_part1);
          size -= SH_part1.len;
          Object.assign(streamHeader, part1);
          debug$3(`SH.streamVersion = ${part1.streamVersion}`);
          const sampleCount = await this.readVariableSizeField();
          size -= sampleCount.len;
          streamHeader.sampleCount = sampleCount.value;
          const bs = await this.readVariableSizeField();
          size -= bs.len;
          streamHeader.beginningOfSilence = bs.value;
          const part3 = await this.tokenizer.readToken(SH_part3);
          size -= SH_part3.len;
          Object.assign(streamHeader, part3);
          await this.tokenizer.ignore(size);
          return streamHeader;
        }
        async readVariableSizeField(len = 1, hb = 0) {
          let n = await this.tokenizer.readNumber(UINT8);
          if ((n & 128) === 0) {
            return { len, value: hb + n };
          }
          n &= 127;
          n += hb;
          return this.readVariableSizeField(len + 1, n << 7);
        }
      }
      class MusepackContentError extends makeUnexpectedFileContentError("Musepack") {
      }
      const debug$2 = initDebug("music-metadata:parser:musepack");
      class MpcSv8Parser extends BasicParser {
        constructor() {
          super(...arguments);
          this.audioLength = 0;
        }
        async parse() {
          const signature = await this.tokenizer.readToken(FourCcToken);
          if (signature !== "MPCK")
            throw new MusepackContentError("Invalid Magic number");
          this.metadata.setFormat("container", "Musepack, SV8");
          return this.parsePacket();
        }
        async parsePacket() {
          const sv8reader = new StreamReader(this.tokenizer);
          do {
            const header = await sv8reader.readPacketHeader();
            debug$2(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);
            switch (header.key) {
              case "SH": {
                const sh = await sv8reader.readStreamHeader(header.payloadLength);
                this.metadata.setFormat("numberOfSamples", sh.sampleCount);
                this.metadata.setFormat("sampleRate", sh.sampleFrequency);
                this.metadata.setFormat("duration", sh.sampleCount / sh.sampleFrequency);
                this.metadata.setFormat("numberOfChannels", sh.channelCount);
                break;
              }
              case "AP":
                this.audioLength += header.payloadLength;
                await this.tokenizer.ignore(header.payloadLength);
                break;
              case "RG":
              case "EI":
              case "SO":
              case "ST":
              case "CT":
                await this.tokenizer.ignore(header.payloadLength);
                break;
              case "SE":
                if (this.metadata.format.duration) {
                  this.metadata.setFormat("bitrate", this.audioLength * 8 / this.metadata.format.duration);
                }
                return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);
              default:
                throw new MusepackContentError(`Unexpected header: ${header.key}`);
            }
          } while (true);
        }
      }
      class BitReader {
        constructor(tokenizer) {
          this.tokenizer = tokenizer;
          this.pos = 0;
          this.dword = null;
        }
        /**
         *
         * @param bits 1..30 bits
         */
        async read(bits) {
          while (this.dword === null) {
            this.dword = await this.tokenizer.readToken(UINT32_LE);
          }
          let out = this.dword;
          this.pos += bits;
          if (this.pos < 32) {
            out >>>= 32 - this.pos;
            return out & (1 << bits) - 1;
          }
          this.pos -= 32;
          if (this.pos === 0) {
            this.dword = null;
            return out & (1 << bits) - 1;
          }
          this.dword = await this.tokenizer.readToken(UINT32_LE);
          if (this.pos) {
            out <<= this.pos;
            out |= this.dword >>> 32 - this.pos;
          }
          return out & (1 << bits) - 1;
        }
        async ignore(bits) {
          if (this.pos > 0) {
            const remaining = 32 - this.pos;
            this.dword = null;
            bits -= remaining;
            this.pos = 0;
          }
          const remainder = bits % 32;
          const numOfWords = (bits - remainder) / 32;
          await this.tokenizer.ignore(numOfWords * 4);
          return this.read(remainder);
        }
      }
      const Header = {
        len: 6 * 4,
        get: (buf, off) => {
          const header = {
            // word 0
            signature: new TextDecoder("latin1").decode(buf.subarray(off, off + 3)),
            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)
            streamMinorVersion: getBitAllignedNumber(buf, off + 3, 0, 4),
            streamMajorVersion: getBitAllignedNumber(buf, off + 3, 4, 4),
            // word 1
            frameCount: UINT32_LE.get(buf, off + 4),
            // word 2
            maxLevel: UINT16_LE.get(buf, off + 8),
            sampleFrequency: [44100, 48e3, 37800, 32e3][getBitAllignedNumber(buf, off + 10, 0, 2)],
            link: getBitAllignedNumber(buf, off + 10, 2, 2),
            profile: getBitAllignedNumber(buf, off + 10, 4, 4),
            maxBand: getBitAllignedNumber(buf, off + 11, 0, 6),
            intensityStereo: isBitSet$1(buf, off + 11, 6),
            midSideStereo: isBitSet$1(buf, off + 11, 7),
            // word 3
            titlePeak: UINT16_LE.get(buf, off + 12),
            titleGain: UINT16_LE.get(buf, off + 14),
            // word 4
            albumPeak: UINT16_LE.get(buf, off + 16),
            albumGain: UINT16_LE.get(buf, off + 18),
            // word
            lastFrameLength: UINT32_LE.get(buf, off + 20) >>> 20 & 2047,
            trueGapless: isBitSet$1(buf, off + 23, 0)
          };
          header.lastFrameLength = header.trueGapless ? UINT32_LE.get(buf, 20) >>> 20 & 2047 : 0;
          return header;
        }
      };
      const debug$1 = initDebug("music-metadata:parser:musepack");
      class MpcSv7Parser extends BasicParser {
        constructor() {
          super(...arguments);
          this.bitreader = null;
          this.audioLength = 0;
          this.duration = null;
        }
        async parse() {
          const header = await this.tokenizer.readToken(Header);
          if (header.signature !== "MP+")
            throw new MusepackContentError("Unexpected magic number");
          debug$1(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);
          this.metadata.setFormat("container", "Musepack, SV7");
          this.metadata.setFormat("sampleRate", header.sampleFrequency);
          const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;
          this.metadata.setFormat("numberOfSamples", numberOfSamples);
          this.duration = numberOfSamples / header.sampleFrequency;
          this.metadata.setFormat("duration", this.duration);
          this.bitreader = new BitReader(this.tokenizer);
          this.metadata.setFormat("numberOfChannels", header.midSideStereo || header.intensityStereo ? 2 : 1);
          const version = await this.bitreader.read(8);
          this.metadata.setFormat("codec", (version / 100).toFixed(2));
          await this.skipAudioData(header.frameCount);
          debug$1(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);
          return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);
        }
        async skipAudioData(frameCount) {
          while (frameCount-- > 0) {
            const frameLength = await this.bitreader.read(20);
            this.audioLength += 20 + frameLength;
            await this.bitreader.ignore(frameLength);
          }
          const lastFrameLength = await this.bitreader.read(11);
          this.audioLength += lastFrameLength;
          if (this.duration !== null) {
            this.metadata.setFormat("bitrate", this.audioLength / this.duration);
          }
        }
      }
      const debug = initDebug("music-metadata:parser:musepack");
      class MusepackParser extends AbstractID3Parser {
        async postId3v2Parse() {
          const signature = await this.tokenizer.peekToken(new StringType(3, "latin1"));
          let mpcParser;
          switch (signature) {
            case "MP+": {
              debug("Stream-version 7");
              mpcParser = new MpcSv7Parser(this.metadata, this.tokenizer, this.options);
              break;
            }
            case "MPC": {
              debug("Stream-version 8");
              mpcParser = new MpcSv8Parser(this.metadata, this.tokenizer, this.options);
              break;
            }
            default: {
              throw new MusepackContentError("Invalid signature prefix");
            }
          }
          return mpcParser.parse();
        }
      } exports("MusepackParser", MusepackParser);

    })
  };
}));

System.register("./AbstractID3Parser-FIM36LHz-B5gpnOzd.js", ['./__monkey.entry-SDvwpoNt.js', './ID3v2Parser-eXNf-3mE-7kzMCmWm.js'], (function (exports, module) {
  'use strict';
  var initDebug, BasicParser, ID3v2Header, EndOfStreamError$1, ID3v1Parser, ID3v2Parser;
  return {
    setters: [module => {
      initDebug = module.i;
      BasicParser = module.B;
      ID3v2Header = module.K;
      EndOfStreamError$1 = module.E;
      ID3v1Parser = module.L;
    }, module => {
      ID3v2Parser = module.I;
    }],
    execute: (function () {

      const debug = initDebug("music-metadata:parser:ID3");
      class AbstractID3Parser extends BasicParser {
        constructor() {
          super(...arguments);
          this.id3parser = new ID3v2Parser();
        }
        static async startsWithID3v2Header(tokenizer) {
          return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === "ID3";
        }
        async parse() {
          try {
            await this.parseID3v2();
          } catch (err) {
            if (err instanceof EndOfStreamError$1) {
              debug("End-of-stream");
            } else {
              throw err;
            }
          }
        }
        finalize() {
          return;
        }
        async parseID3v2() {
          await this.tryReadId3v2Headers();
          debug("End of ID3v2 header, go to MPEG-parser: pos=%s", this.tokenizer.position);
          await this.postId3v2Parse();
          if (this.options.skipPostHeaders && this.metadata.hasAny()) {
            this.finalize();
          } else {
            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);
            await id3v1parser.parse();
            this.finalize();
          }
        }
        async tryReadId3v2Headers() {
          const id3Header = await this.tokenizer.peekToken(ID3v2Header);
          if (id3Header.fileIdentifier === "ID3") {
            debug("Found ID3v2 header, pos=%s", this.tokenizer.position);
            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);
            return this.tryReadId3v2Headers();
          }
        }
      } exports("A", AbstractID3Parser);

    })
  };
}));

System.register("./OggParser-BBZnDK-h-D6aAHGsc.js", ['./__monkey.entry-SDvwpoNt.js', './VorbisParser-C_tWlZNb-Big__tIq.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge'], (function (exports, module) {
  'use strict';
  var initDebug, BasicParser, Uint8ArrayType, EndOfStreamError$1, FourCcToken, UINT8, getBit, UINT64_LE, UINT32_LE, StringType, makeUnexpectedFileContentError, UINT16_LE, trimRightNull, INT32_LE, UINT16_BE, UINT24_BE, VorbisParser;
  return {
    setters: [module => {
      initDebug = module.i;
      BasicParser = module.B;
      Uint8ArrayType = module.U;
      EndOfStreamError$1 = module.E;
      FourCcToken = module.F;
      UINT8 = module.c;
      getBit = module.j;
      UINT64_LE = module.e;
      UINT32_LE = module.f;
      StringType = module.S;
      makeUnexpectedFileContentError = module.m;
      UINT16_LE = module.k;
      trimRightNull = module.M;
      INT32_LE = module.q;
      UINT16_BE = module.d;
      UINT24_BE = module.r;
    }, module => {
      VorbisParser = module.V;
    }, null, null, null, null, null],
    execute: (function () {

      class OpusContentError extends makeUnexpectedFileContentError("Opus") {
      }
      class IdHeader {
        constructor(len) {
          this.len = len;
          if (len < 19) {
            throw new OpusContentError("ID-header-page 0 should be at least 19 bytes long");
          }
        }
        get(buf, off) {
          return {
            magicSignature: new StringType(8, "ascii").get(buf, off + 0),
            version: UINT8.get(buf, off + 8),
            channelCount: UINT8.get(buf, off + 9),
            preSkip: UINT16_LE.get(buf, off + 10),
            inputSampleRate: UINT32_LE.get(buf, off + 12),
            outputGain: UINT16_LE.get(buf, off + 16),
            channelMapping: UINT8.get(buf, off + 18)
          };
        }
      }
      class OpusParser extends VorbisParser {
        constructor(metadata, options, tokenizer) {
          super(metadata, options);
          this.tokenizer = tokenizer;
          this.idHeader = null;
          this.lastPos = -1;
        }
        /**
         * Parse first Opus Ogg page
         * @param {IPageHeader} header
         * @param {Uint8Array} pageData
         */
        parseFirstPage(header, pageData) {
          this.metadata.setFormat("codec", "Opus");
          this.idHeader = new IdHeader(pageData.length).get(pageData, 0);
          if (this.idHeader.magicSignature !== "OpusHead")
            throw new OpusContentError("Illegal ogg/Opus magic-signature");
          this.metadata.setFormat("sampleRate", this.idHeader.inputSampleRate);
          this.metadata.setFormat("numberOfChannels", this.idHeader.channelCount);
        }
        async parseFullPage(pageData) {
          const magicSignature = new StringType(8, "ascii").get(pageData, 0);
          switch (magicSignature) {
            case "OpusTags":
              await this.parseUserCommentList(pageData, 8);
              this.lastPos = this.tokenizer.position - pageData.length;
              break;
          }
        }
        calculateDuration(header) {
          if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {
            const pos_48bit = header.absoluteGranulePosition - this.idHeader.preSkip;
            this.metadata.setFormat("numberOfSamples", pos_48bit);
            this.metadata.setFormat("duration", pos_48bit / 48e3);
            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {
              const dataSize = this.tokenizer.fileInfo.size - this.lastPos;
              this.metadata.setFormat("bitrate", 8 * dataSize / this.metadata.format.duration);
            }
          }
        }
      }
      const Header = {
        len: 80,
        get: (buf, off) => {
          return {
            speex: new StringType(8, "ascii").get(buf, off + 0),
            version: trimRightNull(new StringType(20, "ascii").get(buf, off + 8)),
            version_id: INT32_LE.get(buf, off + 28),
            header_size: INT32_LE.get(buf, off + 32),
            rate: INT32_LE.get(buf, off + 36),
            mode: INT32_LE.get(buf, off + 40),
            mode_bitstream_version: INT32_LE.get(buf, off + 44),
            nb_channels: INT32_LE.get(buf, off + 48),
            bitrate: INT32_LE.get(buf, off + 52),
            frame_size: INT32_LE.get(buf, off + 56),
            vbr: INT32_LE.get(buf, off + 60),
            frames_per_packet: INT32_LE.get(buf, off + 64),
            extra_headers: INT32_LE.get(buf, off + 68),
            reserved1: INT32_LE.get(buf, off + 72),
            reserved2: INT32_LE.get(buf, off + 76)
          };
        }
      };
      const debug$2 = initDebug("music-metadata:parser:ogg:speex");
      class SpeexParser extends VorbisParser {
        constructor(metadata, options, tokenizer) {
          super(metadata, options);
          this.tokenizer = tokenizer;
        }
        /**
         * Parse first Speex Ogg page
         * @param {IPageHeader} header
         * @param {Uint8Array} pageData
         */
        parseFirstPage(header, pageData) {
          debug$2("First Ogg/Speex page");
          const speexHeader = Header.get(pageData, 0);
          this.metadata.setFormat("codec", `Speex ${speexHeader.version}`);
          this.metadata.setFormat("numberOfChannels", speexHeader.nb_channels);
          this.metadata.setFormat("sampleRate", speexHeader.rate);
          if (speexHeader.bitrate !== -1) {
            this.metadata.setFormat("bitrate", speexHeader.bitrate);
          }
        }
      }
      const IdentificationHeader = {
        len: 42,
        get: (buf, off) => {
          return {
            id: new StringType(7, "ascii").get(buf, off),
            vmaj: UINT8.get(buf, off + 7),
            vmin: UINT8.get(buf, off + 8),
            vrev: UINT8.get(buf, off + 9),
            vmbw: UINT16_BE.get(buf, off + 10),
            vmbh: UINT16_BE.get(buf, off + 17),
            nombr: UINT24_BE.get(buf, off + 37),
            nqual: UINT8.get(buf, off + 40)
          };
        }
      };
      const debug$1 = initDebug("music-metadata:parser:ogg:theora");
      class TheoraParser {
        constructor(metadata, options, tokenizer) {
          this.metadata = metadata;
          this.tokenizer = tokenizer;
        }
        /**
         * Vorbis 1 parser
         * @param header Ogg Page Header
         * @param pageData Page data
         */
        async parsePage(header, pageData) {
          if (header.headerType.firstPage) {
            await this.parseFirstPage(header, pageData);
          }
        }
        async flush() {
          debug$1("flush");
        }
        calculateDuration(header) {
          debug$1("duration calculation not implemented");
        }
        /**
         * Parse first Theora Ogg page. the initial identification header packet
         * @param {IPageHeader} header
         * @param {Buffer} pageData
         */
        async parseFirstPage(header, pageData) {
          debug$1("First Ogg/Theora page");
          this.metadata.setFormat("codec", "Theora");
          const idHeader = IdentificationHeader.get(pageData, 0);
          this.metadata.setFormat("bitrate", idHeader.nombr);
        }
      }
      class OggContentError extends makeUnexpectedFileContentError("Ogg") {
      } exports("OggContentError", OggContentError);
      const debug = initDebug("music-metadata:parser:ogg");
      class SegmentTable {
        static sum(buf, off, len) {
          const dv = new DataView(buf.buffer, 0);
          let s = 0;
          for (let i = off; i < off + len; ++i) {
            s += dv.getUint8(i);
          }
          return s;
        }
        constructor(header) {
          this.len = header.page_segments;
        }
        get(buf, off) {
          return {
            totalPageSize: SegmentTable.sum(buf, off, this.len)
          };
        }
      } exports("SegmentTable", SegmentTable);
      class OggParser extends BasicParser {
        constructor() {
          super(...arguments);
          this.header = null;
          this.pageNumber = 0;
          this.pageConsumer = null;
        }
        /**
         * Parse page
         * @returns {Promise<void>}
         */
        async parse() {
          debug("pos=%s, parsePage()", this.tokenizer.position);
          try {
            let header;
            do {
              header = await this.tokenizer.readToken(OggParser.Header);
              if (header.capturePattern !== "OggS")
                throw new OggContentError("Invalid Ogg capture pattern");
              this.metadata.setFormat("container", "Ogg");
              this.header = header;
              this.pageNumber = header.pageSequenceNo;
              debug("page#=%s, Ogg.id=%s", header.pageSequenceNo, header.capturePattern);
              const segmentTable = await this.tokenizer.readToken(new SegmentTable(header));
              debug("totalPageSize=%s", segmentTable.totalPageSize);
              const pageData = await this.tokenizer.readToken(new Uint8ArrayType(segmentTable.totalPageSize));
              debug("firstPage=%s, lastPage=%s, continued=%s", header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);
              if (header.headerType.firstPage) {
                const id = new TextDecoder("ascii").decode(pageData.subarray(0, 7));
                switch (id) {
                  case "vorbis":
                    debug("Set page consumer to Ogg/Vorbis");
                    this.pageConsumer = new VorbisParser(this.metadata, this.options);
                    break;
                  case "OpusHea":
                    debug("Set page consumer to Ogg/Opus");
                    this.pageConsumer = new OpusParser(this.metadata, this.options, this.tokenizer);
                    break;
                  case "Speex  ":
                    debug("Set page consumer to Ogg/Speex");
                    this.pageConsumer = new SpeexParser(this.metadata, this.options, this.tokenizer);
                    break;
                  case "fishead":
                  case "\0theora":
                    debug("Set page consumer to Ogg/Theora");
                    this.pageConsumer = new TheoraParser(this.metadata, this.options, this.tokenizer);
                    break;
                  default:
                    throw new OggContentError(`gg audio-codec not recognized (id=${id})`);
                }
              }
              await this.pageConsumer.parsePage(header, pageData);
            } while (!header.headerType.lastPage);
          } catch (err) {
            if (err instanceof Error) {
              if (err instanceof EndOfStreamError$1) {
                this.metadata.addWarning("Last OGG-page is not marked with last-page flag");
                debug("End-of-stream");
                this.metadata.addWarning("Last OGG-page is not marked with last-page flag");
                if (this.header) {
                  this.pageConsumer.calculateDuration(this.header);
                }
              } else if (err.message.startsWith("FourCC")) {
                if (this.pageNumber > 0) {
                  this.metadata.addWarning("Invalid FourCC ID, maybe last OGG-page is not marked with last-page flag");
                  await this.pageConsumer.flush();
                }
              }
            } else
              throw err;
          }
        }
      } exports("OggParser", OggParser);
      OggParser.Header = {
        len: 27,
        get: (buf, off) => {
          return {
            capturePattern: FourCcToken.get(buf, off),
            version: UINT8.get(buf, off + 4),
            headerType: {
              continued: getBit(buf, off + 5, 0),
              firstPage: getBit(buf, off + 5, 1),
              lastPage: getBit(buf, off + 5, 2)
            },
            // packet_flag: Token.UINT8.get(buf, off + 5),
            absoluteGranulePosition: Number(UINT64_LE.get(buf, off + 6)),
            streamSerialNumber: UINT32_LE.get(buf, off + 14),
            pageSequenceNo: UINT32_LE.get(buf, off + 18),
            pageChecksum: UINT32_LE.get(buf, off + 22),
            page_segments: UINT8.get(buf, off + 26)
          };
        }
      };

    })
  };
}));

System.register("./VorbisParser-C_tWlZNb-Big__tIq.js", ['./__monkey.entry-SDvwpoNt.js'], (function (exports, module) {
  'use strict';
  var initDebug, AttachedPictureType, UINT32_BE, StringType, UINT32_LE, UINT8, makeUnexpectedFileContentError;
  return {
    setters: [module => {
      initDebug = module.i;
      AttachedPictureType = module.A;
      UINT32_BE = module.a;
      StringType = module.S;
      UINT32_LE = module.f;
      UINT8 = module.c;
      makeUnexpectedFileContentError = module.m;
    }],
    execute: (function () {

      class VorbisPictureToken {
        static fromBase64(base64str) {
          return VorbisPictureToken.fromBuffer(Uint8Array.from(atob(base64str), (c) => c.charCodeAt(0)));
        }
        static fromBuffer(buffer) {
          const pic = new VorbisPictureToken(buffer.length);
          return pic.get(buffer, 0);
        }
        constructor(len) {
          this.len = len;
        }
        get(buffer, offset) {
          const type = AttachedPictureType[UINT32_BE.get(buffer, offset)];
          offset += 4;
          const mimeLen = UINT32_BE.get(buffer, offset);
          offset += 4;
          const format = new StringType(mimeLen, "utf-8").get(buffer, offset);
          offset += mimeLen;
          const descLen = UINT32_BE.get(buffer, offset);
          offset += 4;
          const description = new StringType(descLen, "utf-8").get(buffer, offset);
          offset += descLen;
          const width = UINT32_BE.get(buffer, offset);
          offset += 4;
          const height = UINT32_BE.get(buffer, offset);
          offset += 4;
          const colour_depth = UINT32_BE.get(buffer, offset);
          offset += 4;
          const indexed_color = UINT32_BE.get(buffer, offset);
          offset += 4;
          const picDataLen = UINT32_BE.get(buffer, offset);
          offset += 4;
          const data = Uint8Array.from(buffer.slice(offset, offset + picDataLen));
          return {
            type,
            format,
            description,
            width,
            height,
            colour_depth,
            indexed_color,
            data
          };
        }
      } exports("a", VorbisPictureToken);
      const CommonHeader = {
        len: 7,
        get: (buf, off) => {
          return {
            packetType: UINT8.get(buf, off),
            vorbis: new StringType(6, "ascii").get(buf, off + 1)
          };
        }
      };
      const IdentificationHeader = {
        len: 23,
        get: (uint8Array, off) => {
          return {
            version: UINT32_LE.get(uint8Array, off + 0),
            channelMode: UINT8.get(uint8Array, off + 4),
            sampleRate: UINT32_LE.get(uint8Array, off + 5),
            bitrateMax: UINT32_LE.get(uint8Array, off + 9),
            bitrateNominal: UINT32_LE.get(uint8Array, off + 13),
            bitrateMin: UINT32_LE.get(uint8Array, off + 17)
          };
        }
      };
      class VorbisDecoder {
        constructor(data, offset) {
          this.data = data;
          this.offset = offset;
        }
        readInt32() {
          const value = UINT32_LE.get(this.data, this.offset);
          this.offset += 4;
          return value;
        }
        readStringUtf8() {
          const len = this.readInt32();
          const value = new TextDecoder("utf-8").decode(this.data.subarray(this.offset, this.offset + len));
          this.offset += len;
          return value;
        }
        parseUserComment() {
          const offset0 = this.offset;
          const v = this.readStringUtf8();
          const idx = v.indexOf("=");
          return {
            key: v.slice(0, idx).toUpperCase(),
            value: v.slice(idx + 1),
            len: this.offset - offset0
          };
        }
      } exports("b", VorbisDecoder);
      const debug = initDebug("music-metadata:parser:ogg:vorbis1");
      class VorbisContentError extends makeUnexpectedFileContentError("Vorbis") {
      }
      class VorbisParser {
        constructor(metadata, options) {
          this.metadata = metadata;
          this.options = options;
          this.pageSegments = [];
        }
        /**
         * Vorbis 1 parser
         * @param header Ogg Page Header
         * @param pageData Page data
         */
        async parsePage(header, pageData) {
          if (header.headerType.firstPage) {
            this.parseFirstPage(header, pageData);
          } else {
            if (header.headerType.continued) {
              if (this.pageSegments.length === 0) {
                throw new VorbisContentError("Cannot continue on previous page");
              }
              this.pageSegments.push(pageData);
            }
            if (header.headerType.lastPage || !header.headerType.continued) {
              if (this.pageSegments.length > 0) {
                const fullPage = VorbisParser.mergeUint8Arrays(this.pageSegments);
                await this.parseFullPage(fullPage);
              }
              this.pageSegments = header.headerType.lastPage ? [] : [pageData];
            }
          }
          if (header.headerType.lastPage) {
            this.calculateDuration(header);
          }
        }
        static mergeUint8Arrays(arrays) {
          const totalSize = arrays.reduce((acc, e) => acc + e.length, 0);
          const merged = new Uint8Array(totalSize);
          arrays.forEach((array, i, _arrays) => {
            const offset = _arrays.slice(0, i).reduce((acc, e) => acc + e.length, 0);
            merged.set(array, offset);
          });
          return merged;
        }
        async flush() {
          await this.parseFullPage(VorbisParser.mergeUint8Arrays(this.pageSegments));
        }
        async parseUserComment(pageData, offset) {
          const decoder = new VorbisDecoder(pageData, offset);
          const tag = decoder.parseUserComment();
          await this.addTag(tag.key, tag.value);
          return tag.len;
        }
        async addTag(id, value) {
          if (id === "METADATA_BLOCK_PICTURE" && typeof value === "string") {
            if (this.options.skipCovers) {
              debug("Ignore picture");
              return;
            }
            value = VorbisPictureToken.fromBase64(value);
            debug(`Push picture: id=${id}, format=${value.format}`);
          } else {
            debug(`Push tag: id=${id}, value=${value}`);
          }
          await this.metadata.addTag("vorbis", id, value);
        }
        calculateDuration(header) {
          if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {
            this.metadata.setFormat("numberOfSamples", header.absoluteGranulePosition);
            this.metadata.setFormat("duration", header.absoluteGranulePosition / this.metadata.format.sampleRate);
          }
        }
        /**
         * Parse first Ogg/Vorbis page
         * @param header
         * @param pageData
         */
        parseFirstPage(header, pageData) {
          this.metadata.setFormat("codec", "Vorbis I");
          debug("Parse first page");
          const commonHeader = CommonHeader.get(pageData, 0);
          if (commonHeader.vorbis !== "vorbis")
            throw new VorbisContentError("Metadata does not look like Vorbis");
          if (commonHeader.packetType === 1) {
            const idHeader = IdentificationHeader.get(pageData, CommonHeader.len);
            this.metadata.setFormat("sampleRate", idHeader.sampleRate);
            this.metadata.setFormat("bitrate", idHeader.bitrateNominal);
            this.metadata.setFormat("numberOfChannels", idHeader.channelMode);
            debug("sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s", idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);
          } else
            throw new VorbisContentError("First Ogg page should be type 1: the identification header");
        }
        async parseFullPage(pageData) {
          const commonHeader = CommonHeader.get(pageData, 0);
          debug("Parse full page: type=%s, byteLength=%s", commonHeader.packetType, pageData.byteLength);
          switch (commonHeader.packetType) {
            case 3:
              return this.parseUserCommentList(pageData, CommonHeader.len);
          }
        }
        /**
         * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2
         */
        async parseUserCommentList(pageData, offset) {
          const strLen = UINT32_LE.get(pageData, offset);
          offset += 4;
          offset += strLen;
          let userCommentListLength = UINT32_LE.get(pageData, offset);
          offset += 4;
          while (userCommentListLength-- > 0) {
            offset += await this.parseUserComment(pageData, offset);
          }
        }
      } exports("V", VorbisParser);

    })
  };
}));

System.register("./WavPackParser-CP3cSPHA-DUluwt_e.js", ['./__monkey.entry-SDvwpoNt.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge'], (function (exports, module) {
  'use strict';
  var initDebug, BasicParser, APEv2Parser, FourCcToken, UINT24_LE, UINT8, uint8ArrayToHex, UINT32_LE, UINT16_LE, Uint8ArrayType, makeUnexpectedFileContentError;
  return {
    setters: [module => {
      initDebug = module.i;
      BasicParser = module.B;
      APEv2Parser = module.J;
      FourCcToken = module.F;
      UINT24_LE = module.N;
      UINT8 = module.c;
      uint8ArrayToHex = module.u;
      UINT32_LE = module.f;
      UINT16_LE = module.k;
      Uint8ArrayType = module.U;
      makeUnexpectedFileContentError = module.m;
    }, null, null, null, null, null],
    execute: (function () {

      const SampleRates = [
        6e3,
        8e3,
        9600,
        11025,
        12e3,
        16e3,
        22050,
        24e3,
        32e3,
        44100,
        48e3,
        64e3,
        88200,
        96e3,
        192e3,
        -1
      ];
      const BlockHeaderToken = {
        len: 32,
        get: (buf, off) => {
          const flags = UINT32_LE.get(buf, off + 24);
          const res = {
            // should equal 'wvpk'
            BlockID: FourCcToken.get(buf, off),
            //  0x402 to 0x410 are valid for decode
            blockSize: UINT32_LE.get(buf, off + 4),
            //  0x402 (1026) to 0x410 are valid for decode
            version: UINT16_LE.get(buf, off + 8),
            //  40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)
            totalSamples: (
              /* replace with bigint? (Token.UINT8.get(buf, off + 11) << 32) + */
              UINT32_LE.get(buf, off + 12)
            ),
            // 40-bit block_index
            blockIndex: (
              /* replace with bigint? (Token.UINT8.get(buf, off + 10) << 32) + */
              UINT32_LE.get(buf, off + 16)
            ),
            // 40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)
            blockSamples: UINT32_LE.get(buf, off + 20),
            // various flags for id and decoding
            flags: {
              bitsPerSample: (1 + getBitAllignedNumber(flags, 0, 2)) * 8,
              isMono: isBitSet(flags, 2),
              isHybrid: isBitSet(flags, 3),
              isJointStereo: isBitSet(flags, 4),
              crossChannel: isBitSet(flags, 5),
              hybridNoiseShaping: isBitSet(flags, 6),
              floatingPoint: isBitSet(flags, 7),
              samplingRate: SampleRates[getBitAllignedNumber(flags, 23, 4)],
              isDSD: isBitSet(flags, 31)
            },
            // crc for actual decoded data
            crc: new Uint8ArrayType(4).get(buf, off + 28)
          };
          if (res.flags.isDSD) {
            res.totalSamples *= 8;
          }
          return res;
        }
      };
      const MetadataIdToken = {
        len: 1,
        get: (buf, off) => {
          return {
            functionId: getBitAllignedNumber(buf[off], 0, 6),
            // functionId overlaps with isOptional flag
            isOptional: isBitSet(buf[off], 5),
            isOddSize: isBitSet(buf[off], 6),
            largeBlock: isBitSet(buf[off], 7)
          };
        }
      };
      function isBitSet(flags, bitOffset) {
        return getBitAllignedNumber(flags, bitOffset, 1) === 1;
      }
      function getBitAllignedNumber(flags, bitOffset, len) {
        return flags >>> bitOffset & 4294967295 >>> 32 - len;
      }
      const debug = initDebug("music-metadata:parser:WavPack");
      class WavPackContentError extends makeUnexpectedFileContentError("WavPack") {
      } exports("WavPackContentError", WavPackContentError);
      class WavPackParser extends BasicParser {
        constructor() {
          super(...arguments);
          this.audioDataSize = 0;
        }
        async parse() {
          this.audioDataSize = 0;
          await this.parseWavPackBlocks();
          return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);
        }
        async parseWavPackBlocks() {
          do {
            const blockId = await this.tokenizer.peekToken(FourCcToken);
            if (blockId !== "wvpk")
              break;
            const header = await this.tokenizer.readToken(BlockHeaderToken);
            if (header.BlockID !== "wvpk")
              throw new WavPackContentError("Invalid WavPack Block-ID");
            debug(`WavPack header blockIndex=${header.blockIndex}, len=${BlockHeaderToken.len}`);
            if (header.blockIndex === 0 && !this.metadata.format.container) {
              this.metadata.setFormat("container", "WavPack");
              this.metadata.setFormat("lossless", !header.flags.isHybrid);
              this.metadata.setFormat("bitsPerSample", header.flags.bitsPerSample);
              if (!header.flags.isDSD) {
                this.metadata.setFormat("sampleRate", header.flags.samplingRate);
                this.metadata.setFormat("duration", header.totalSamples / header.flags.samplingRate);
              }
              this.metadata.setFormat("numberOfChannels", header.flags.isMono ? 1 : 2);
              this.metadata.setFormat("numberOfSamples", header.totalSamples);
              this.metadata.setFormat("codec", header.flags.isDSD ? "DSD" : "PCM");
            }
            const ignoreBytes = header.blockSize - (BlockHeaderToken.len - 8);
            await (header.blockIndex === 0 ? this.parseMetadataSubBlock(header, ignoreBytes) : this.tokenizer.ignore(ignoreBytes));
            if (header.blockSamples > 0) {
              this.audioDataSize += header.blockSize;
            }
          } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= BlockHeaderToken.len);
          if (this.metadata.format.duration) {
            this.metadata.setFormat("bitrate", this.audioDataSize * 8 / this.metadata.format.duration);
          }
        }
        /**
         * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks
         * @param header Header
         * @param remainingLength Remaining length
         */
        async parseMetadataSubBlock(header, remainingLength) {
          let remaining = remainingLength;
          while (remaining > MetadataIdToken.len) {
            const id = await this.tokenizer.readToken(MetadataIdToken);
            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? UINT24_LE : UINT8);
            const data = new Uint8Array(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));
            await this.tokenizer.readBuffer(data);
            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);
            switch (id.functionId) {
              case 0:
                break;
              case 14: {
                debug("ID_DSD_BLOCK");
                const mp = 1 << UINT8.get(data, 0);
                const samplingRate = header.flags.samplingRate * mp * 8;
                if (!header.flags.isDSD)
                  throw new WavPackContentError("Only expect DSD block if DSD-flag is set");
                this.metadata.setFormat("sampleRate", samplingRate);
                this.metadata.setFormat("duration", header.totalSamples / samplingRate);
                break;
              }
              case 36:
                debug("ID_ALT_TRAILER: trailer for non-wav files");
                break;
              case 38:
                this.metadata.setFormat("audioMD5", data);
                break;
              case 47:
                debug(`ID_BLOCK_CHECKSUM: checksum=${uint8ArrayToHex(data)}`);
                break;
              default:
                debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);
                break;
            }
            remaining -= MetadataIdToken.len + (id.largeBlock ? UINT24_LE.len : UINT8.len) + dataSizeInWords * 2;
            debug(`remainingLength=${remaining}`);
            if (id.isOddSize)
              this.tokenizer.ignore(1);
          }
          if (remaining !== 0)
            throw new WavPackContentError("metadata-sub-block should fit it remaining length");
        }
      } exports("WavPackParser", WavPackParser);

    })
  };
}));

System.register("./WaveParser-BOR6tCgw-CFnjS9DE.js", ['./__monkey.entry-SDvwpoNt.js', './ID3v2Parser-eXNf-3mE-7kzMCmWm.js', 'react', 'antd', 'react-dom', '@ant-design/icons', 'node-forge'], (function (exports, module) {
  'use strict';
  var initDebug, BasicParser, EndOfStreamError$1, FourCcToken, Uint8ArrayType, fromBuffer$1, StringType, stripNulls, UINT32_LE, makeUnexpectedFileContentError, UINT16_LE, ID3v2Parser;
  return {
    setters: [module => {
      initDebug = module.i;
      BasicParser = module.B;
      EndOfStreamError$1 = module.E;
      FourCcToken = module.F;
      Uint8ArrayType = module.U;
      fromBuffer$1 = module.n;
      StringType = module.S;
      stripNulls = module.s;
      UINT32_LE = module.f;
      makeUnexpectedFileContentError = module.m;
      UINT16_LE = module.k;
    }, module => {
      ID3v2Parser = module.I;
    }, null, null, null, null, null],
    execute: (function () {

      const Header = {
        len: 8,
        get: (buf, off) => {
          return {
            // Group-ID
            chunkID: new StringType(4, "latin1").get(buf, off),
            // Size
            chunkSize: UINT32_LE.get(buf, off + 4)
          };
        }
      };
      class ListInfoTagValue {
        constructor(tagHeader) {
          this.tagHeader = tagHeader;
          this.len = tagHeader.chunkSize;
          this.len += this.len & 1;
        }
        get(buf, off) {
          return new StringType(this.tagHeader.chunkSize, "ascii").get(buf, off);
        }
      }
      class WaveContentError extends makeUnexpectedFileContentError("Wave") {
      }
      var WaveFormat;
      (function(WaveFormat2) {
        WaveFormat2[WaveFormat2["PCM"] = 1] = "PCM";
        WaveFormat2[WaveFormat2["ADPCM"] = 2] = "ADPCM";
        WaveFormat2[WaveFormat2["IEEE_FLOAT"] = 3] = "IEEE_FLOAT";
        WaveFormat2[WaveFormat2["MPEG_ADTS_AAC"] = 5632] = "MPEG_ADTS_AAC";
        WaveFormat2[WaveFormat2["MPEG_LOAS"] = 5634] = "MPEG_LOAS";
        WaveFormat2[WaveFormat2["RAW_AAC1"] = 255] = "RAW_AAC1";
        WaveFormat2[WaveFormat2["DOLBY_AC3_SPDIF"] = 146] = "DOLBY_AC3_SPDIF";
        WaveFormat2[WaveFormat2["DVM"] = 8192] = "DVM";
        WaveFormat2[WaveFormat2["RAW_SPORT"] = 576] = "RAW_SPORT";
        WaveFormat2[WaveFormat2["ESST_AC3"] = 577] = "ESST_AC3";
        WaveFormat2[WaveFormat2["DRM"] = 9] = "DRM";
        WaveFormat2[WaveFormat2["DTS2"] = 8193] = "DTS2";
        WaveFormat2[WaveFormat2["MPEG"] = 80] = "MPEG";
      })(WaveFormat || (WaveFormat = {}));
      class Format {
        constructor(header) {
          if (header.chunkSize < 16)
            throw new WaveContentError("Invalid chunk size");
          this.len = header.chunkSize;
        }
        get(buf, off) {
          return {
            wFormatTag: UINT16_LE.get(buf, off),
            nChannels: UINT16_LE.get(buf, off + 2),
            nSamplesPerSec: UINT32_LE.get(buf, off + 4),
            nAvgBytesPerSec: UINT32_LE.get(buf, off + 8),
            nBlockAlign: UINT16_LE.get(buf, off + 12),
            wBitsPerSample: UINT16_LE.get(buf, off + 14)
          };
        }
      }
      class FactChunk {
        constructor(header) {
          if (header.chunkSize < 4) {
            throw new WaveContentError("Invalid fact chunk size.");
          }
          this.len = header.chunkSize;
        }
        get(buf, off) {
          return {
            dwSampleLength: UINT32_LE.get(buf, off)
          };
        }
      }
      const BroadcastAudioExtensionChunk = {
        len: 420,
        get: (uint8array, off) => {
          return {
            description: stripNulls(new StringType(256, "ascii").get(uint8array, off)).trim(),
            originator: stripNulls(new StringType(32, "ascii").get(uint8array, off + 256)).trim(),
            originatorReference: stripNulls(new StringType(32, "ascii").get(uint8array, off + 288)).trim(),
            originationDate: stripNulls(new StringType(10, "ascii").get(uint8array, off + 320)).trim(),
            originationTime: stripNulls(new StringType(8, "ascii").get(uint8array, off + 330)).trim(),
            timeReferenceLow: UINT32_LE.get(uint8array, off + 338),
            timeReferenceHigh: UINT32_LE.get(uint8array, off + 342),
            version: UINT16_LE.get(uint8array, off + 346),
            umid: new Uint8ArrayType(64).get(uint8array, off + 348),
            loudnessValue: UINT16_LE.get(uint8array, off + 412),
            maxTruePeakLevel: UINT16_LE.get(uint8array, off + 414),
            maxMomentaryLoudness: UINT16_LE.get(uint8array, off + 416),
            maxShortTermLoudness: UINT16_LE.get(uint8array, off + 418)
          };
        }
      };
      const debug = initDebug("music-metadata:parser:RIFF");
      class WaveParser extends BasicParser {
        constructor() {
          super(...arguments);
          this.blockAlign = 0;
        }
        async parse() {
          const riffHeader = await this.tokenizer.readToken(Header);
          debug(`pos=${this.tokenizer.position}, parse: chunkID=${riffHeader.chunkID}`);
          if (riffHeader.chunkID !== "RIFF")
            return;
          return this.parseRiffChunk(riffHeader.chunkSize).catch((err) => {
            if (!(err instanceof EndOfStreamError$1)) {
              throw err;
            }
          });
        }
        async parseRiffChunk(chunkSize) {
          const type = await this.tokenizer.readToken(FourCcToken);
          this.metadata.setFormat("container", type);
          switch (type) {
            case "WAVE":
              return this.readWaveChunk(chunkSize - FourCcToken.len);
            default:
              throw new WaveContentError(`Unsupported RIFF format: RIFF/${type}`);
          }
        }
        async readWaveChunk(remaining) {
          while (remaining >= Header.len) {
            const header = await this.tokenizer.readToken(Header);
            remaining -= Header.len + header.chunkSize;
            if (header.chunkSize > remaining) {
              this.metadata.addWarning("Data chunk size exceeds file size");
            }
            this.header = header;
            debug(`pos=${this.tokenizer.position}, readChunk: chunkID=RIFF/WAVE/${header.chunkID}`);
            switch (header.chunkID) {
              case "LIST":
                await this.parseListTag(header);
                break;
              case "fact":
                this.metadata.setFormat("lossless", false);
                this.fact = await this.tokenizer.readToken(new FactChunk(header));
                break;
              case "fmt ": {
                const fmt = await this.tokenizer.readToken(new Format(header));
                let subFormat = WaveFormat[fmt.wFormatTag];
                if (!subFormat) {
                  debug(`WAVE/non-PCM format=${fmt.wFormatTag}`);
                  subFormat = `non-PCM (${fmt.wFormatTag})`;
                }
                this.metadata.setFormat("codec", subFormat);
                this.metadata.setFormat("bitsPerSample", fmt.wBitsPerSample);
                this.metadata.setFormat("sampleRate", fmt.nSamplesPerSec);
                this.metadata.setFormat("numberOfChannels", fmt.nChannels);
                this.metadata.setFormat("bitrate", fmt.nBlockAlign * fmt.nSamplesPerSec * 8);
                this.blockAlign = fmt.nBlockAlign;
                break;
              }
              case "id3 ":
              case "ID3 ": {
                const id3_data = await this.tokenizer.readToken(new Uint8ArrayType(header.chunkSize));
                const rst = fromBuffer$1(id3_data);
                await new ID3v2Parser().parse(this.metadata, rst, this.options);
                break;
              }
              case "data": {
                if (this.metadata.format.lossless !== false) {
                  this.metadata.setFormat("lossless", true);
                }
                let chunkSize = header.chunkSize;
                if (this.tokenizer.fileInfo.size) {
                  const calcRemaining = this.tokenizer.fileInfo.size - this.tokenizer.position;
                  if (calcRemaining < chunkSize) {
                    this.metadata.addWarning("data chunk length exceeding file length");
                    chunkSize = calcRemaining;
                  }
                }
                const numberOfSamples = this.fact ? this.fact.dwSampleLength : chunkSize === 4294967295 ? void 0 : chunkSize / this.blockAlign;
                if (numberOfSamples) {
                  this.metadata.setFormat("numberOfSamples", numberOfSamples);
                  if (this.metadata.format.sampleRate) {
                    this.metadata.setFormat("duration", numberOfSamples / this.metadata.format.sampleRate);
                  }
                }
                if (this.metadata.format.codec === "ADPCM") {
                  this.metadata.setFormat("bitrate", 352e3);
                } else if (this.metadata.format.sampleRate) {
                  this.metadata.setFormat("bitrate", this.blockAlign * this.metadata.format.sampleRate * 8);
                }
                await this.tokenizer.ignore(header.chunkSize);
                break;
              }
              case "bext": {
                const bext = await this.tokenizer.readToken(BroadcastAudioExtensionChunk);
                Object.keys(bext).forEach((key) => {
                  this.metadata.addTag("exif", `bext.${key}`, bext[key]);
                });
                const bextRemaining = header.chunkSize - BroadcastAudioExtensionChunk.len;
                await this.tokenizer.ignore(bextRemaining);
                break;
              }
              case "\0\0\0\0":
                debug(`Ignore padding chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);
                this.metadata.addWarning(`Ignore chunk: RIFF/${header.chunkID}`);
                await this.tokenizer.ignore(header.chunkSize);
                break;
              default:
                debug(`Ignore chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);
                this.metadata.addWarning(`Ignore chunk: RIFF/${header.chunkID}`);
                await this.tokenizer.ignore(header.chunkSize);
            }
            if (this.header.chunkSize % 2 === 1) {
              debug("Read odd padding byte");
              await this.tokenizer.ignore(1);
            }
          }
        }
        async parseListTag(listHeader) {
          const listType = await this.tokenizer.readToken(new StringType(4, "latin1"));
          debug("pos=%s, parseListTag: chunkID=RIFF/WAVE/LIST/%s", this.tokenizer.position, listType);
          switch (listType) {
            case "INFO":
              return this.parseRiffInfoTags(listHeader.chunkSize - 4);
            default:
              this.metadata.addWarning(`Ignore chunk: RIFF/WAVE/LIST/${listType}`);
              debug(`Ignoring chunkID=RIFF/WAVE/LIST/${listType}`);
              return this.tokenizer.ignore(listHeader.chunkSize - 4).then();
          }
        }
        async parseRiffInfoTags(chunkSize) {
          while (chunkSize >= 8) {
            const header = await this.tokenizer.readToken(Header);
            const valueToken = new ListInfoTagValue(header);
            const value = await this.tokenizer.readToken(valueToken);
            this.addTag(header.chunkID, stripNulls(value));
            chunkSize -= 8 + valueToken.len;
          }
          if (chunkSize !== 0) {
            throw new WaveContentError(`Illegal remaining size: ${chunkSize}`);
          }
        }
        addTag(id, value) {
          this.metadata.addTag("exif", id, value);
        }
      } exports("WaveParser", WaveParser);

    })
  };
}));

System.register("./ID3v2Parser-eXNf-3mE-7kzMCmWm.js", ['./__monkey.entry-SDvwpoNt.js'], (function (exports, module) {
  'use strict';
  var initDebug, getBit, ID3v2Header, ExtendedHeader, Uint8ArrayType, UINT32SYNCSAFE, UINT32_BE, UINT24_BE, makeUnexpectedFileContentError, TextEncodingToken, decodeString, findZero, UINT8, TextHeader, SyncTextHeader, AttachedPictureType, Genres;
  return {
    setters: [module => {
      initDebug = module.i;
      getBit = module.j;
      ID3v2Header = module.K;
      ExtendedHeader = module.O;
      Uint8ArrayType = module.U;
      UINT32SYNCSAFE = module.P;
      UINT32_BE = module.a;
      UINT24_BE = module.r;
      makeUnexpectedFileContentError = module.m;
      TextEncodingToken = module.Q;
      decodeString = module.l;
      findZero = module.R;
      UINT8 = module.c;
      TextHeader = module.V;
      SyncTextHeader = module.W;
      AttachedPictureType = module.A;
      Genres = module.H;
    }],
    execute: (function () {

      const debug = initDebug("music-metadata:id3v2:frame-parser");
      const defaultEnc = "latin1";
      function parseGenre(origVal) {
        const genres = [];
        let code;
        let word = "";
        for (const c of origVal) {
          if (typeof code === "string") {
            if (c === "(" && code === "") {
              word += "(";
              code = void 0;
            } else if (c === ")") {
              if (word !== "") {
                genres.push(word);
                word = "";
              }
              const genre = parseGenreCode(code);
              if (genre) {
                genres.push(genre);
              }
              code = void 0;
            } else
              code += c;
          } else if (c === "(") {
            code = "";
          } else {
            word += c;
          }
        }
        if (word) {
          if (genres.length === 0 && word.match(/^\d*$/)) {
            word = parseGenreCode(word);
          }
          if (word) {
            genres.push(word);
          }
        }
        return genres;
      }
      function parseGenreCode(code) {
        if (code === "RX")
          return "Remix";
        if (code === "CR")
          return "Cover";
        if (code.match(/^\d*$/)) {
          return Genres[Number.parseInt(code)];
        }
      }
      class FrameParser {
        /**
         * Create id3v2 frame parser
         * @param major - Major version, e.g. (4) for  id3v2.4
         * @param warningCollector - Used to collect decode issue
         */
        constructor(major, warningCollector) {
          this.major = major;
          this.warningCollector = warningCollector;
        }
        readData(uint8Array, type, includeCovers) {
          if (uint8Array.length === 0) {
            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);
            return;
          }
          const { encoding, bom } = TextEncodingToken.get(uint8Array, 0);
          const length = uint8Array.length;
          let offset = 0;
          let output = [];
          const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);
          let fzero;
          debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);
          switch (type !== "TXXX" && type[0] === "T" ? "T*" : type) {
            case "T*":
            case "GRP1":
            case "IPLS":
            case "MVIN":
            case "MVNM":
            case "PCS":
            case "PCST": {
              let text;
              try {
                text = decodeString(uint8Array.slice(1), encoding).replace(/\x00+$/, "");
              } catch (error) {
                if (error instanceof Error) {
                  this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);
                  break;
                }
                throw error;
              }
              switch (type) {
                case "TMCL":
                case "TIPL":
                case "IPLS":
                  output = FrameParser.functionList(this.splitValue(type, text));
                  break;
                case "TRK":
                case "TRCK":
                case "TPOS":
                  output = text;
                  break;
                case "TCOM":
                case "TEXT":
                case "TOLY":
                case "TOPE":
                case "TPE1":
                case "TSRC":
                  output = this.splitValue(type, text);
                  break;
                case "TCO":
                case "TCON":
                  output = this.splitValue(type, text).map((v) => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);
                  break;
                case "PCS":
                case "PCST":
                  output = this.major >= 4 ? this.splitValue(type, text) : [text];
                  output = Array.isArray(output) && output[0] === "" ? 1 : 0;
                  break;
                default:
                  output = this.major >= 4 ? this.splitValue(type, text) : [text];
              }
              break;
            }
            case "TXXX": {
              const idAndData = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);
              const textTag = {
                description: idAndData.id,
                text: this.splitValue(type, decodeString(idAndData.data, encoding).replace(/\x00+$/, ""))
              };
              output = textTag;
              break;
            }
            case "PIC":
            case "APIC":
              if (includeCovers) {
                const pic = {};
                offset += 1;
                switch (this.major) {
                  case 2:
                    pic.format = decodeString(uint8Array.slice(offset, offset + 3), "latin1");
                    offset += 3;
                    break;
                  case 3:
                  case 4:
                    fzero = findZero(uint8Array, offset, length, defaultEnc);
                    pic.format = decodeString(uint8Array.slice(offset, fzero), defaultEnc);
                    offset = fzero + 1;
                    break;
                  default:
                    throw makeUnexpectedMajorVersionError$1(this.major);
                }
                pic.format = FrameParser.fixPictureMimeType(pic.format);
                pic.type = AttachedPictureType[uint8Array[offset]];
                offset += 1;
                fzero = findZero(uint8Array, offset, length, encoding);
                pic.description = decodeString(uint8Array.slice(offset, fzero), encoding);
                offset = fzero + nullTerminatorLength;
                pic.data = uint8Array.slice(offset, length);
                output = pic;
              }
              break;
            case "CNT":
            case "PCNT":
              output = UINT32_BE.get(uint8Array, 0);
              break;
            case "SYLT": {
              const syltHeader = SyncTextHeader.get(uint8Array, 0);
              offset += SyncTextHeader.len;
              const result = {
                descriptor: "",
                language: syltHeader.language,
                contentType: syltHeader.contentType,
                timeStampFormat: syltHeader.timeStampFormat,
                syncText: []
              };
              let readSyllables = false;
              while (offset < length) {
                const nullStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), syltHeader.encoding);
                offset += nullStr.len;
                if (readSyllables) {
                  const timestamp = UINT32_BE.get(uint8Array, offset);
                  offset += UINT32_BE.len;
                  result.syncText.push({
                    text: nullStr.text,
                    timestamp
                  });
                } else {
                  result.descriptor = nullStr.text;
                  readSyllables = true;
                }
              }
              output = result;
              break;
            }
            case "ULT":
            case "USLT":
            case "COM":
            case "COMM": {
              const textHeader = TextHeader.get(uint8Array, offset);
              offset += TextHeader.len;
              const descriptorStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);
              offset += descriptorStr.len;
              const textStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);
              const comment = {
                language: textHeader.language,
                descriptor: descriptorStr.text,
                text: textStr.text
              };
              output = comment;
              break;
            }
            case "UFID": {
              const ufid = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);
              output = { owner_identifier: ufid.id, identifier: ufid.data };
              break;
            }
            case "PRIV": {
              const priv = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);
              output = { owner_identifier: priv.id, data: priv.data };
              break;
            }
            case "POPM": {
              fzero = findZero(uint8Array, offset, length, defaultEnc);
              const email = decodeString(uint8Array.slice(offset, fzero), defaultEnc);
              offset = fzero + 1;
              const dataLen = length - offset;
              output = {
                email,
                rating: UINT8.get(uint8Array, offset),
                counter: dataLen >= 5 ? UINT32_BE.get(uint8Array, offset + 1) : void 0
              };
              break;
            }
            case "GEOB": {
              fzero = findZero(uint8Array, offset + 1, length, encoding);
              const mimeType = decodeString(uint8Array.slice(offset + 1, fzero), defaultEnc);
              offset = fzero + 1;
              fzero = findZero(uint8Array, offset, length, encoding);
              const filename = decodeString(uint8Array.slice(offset, fzero), defaultEnc);
              offset = fzero + 1;
              fzero = findZero(uint8Array, offset, length, encoding);
              const description = decodeString(uint8Array.slice(offset, fzero), defaultEnc);
              offset = fzero + 1;
              const geob = {
                type: mimeType,
                filename,
                description,
                data: uint8Array.slice(offset, length)
              };
              output = geob;
              break;
            }
            case "WCOM":
            case "WCOP":
            case "WOAF":
            case "WOAR":
            case "WOAS":
            case "WORS":
            case "WPAY":
            case "WPUB":
              fzero = findZero(uint8Array, offset + 1, length, encoding);
              output = decodeString(uint8Array.slice(offset, fzero), defaultEnc);
              break;
            case "WXXX": {
              fzero = findZero(uint8Array, offset + 1, length, encoding);
              const description = decodeString(uint8Array.slice(offset + 1, fzero), encoding);
              offset = fzero + (encoding === "utf-16le" ? 2 : 1);
              output = { description, url: decodeString(uint8Array.slice(offset, length), defaultEnc) };
              break;
            }
            case "WFD":
            case "WFED":
              output = decodeString(uint8Array.slice(offset + 1, findZero(uint8Array, offset + 1, length, encoding)), encoding);
              break;
            case "MCDI": {
              output = uint8Array.slice(0, length);
              break;
            }
            default:
              debug(`Warning: unsupported id3v2-tag-type: ${type}`);
              break;
          }
          return output;
        }
        static readNullTerminatedString(uint8Array, encoding) {
          let offset = encoding.bom ? 2 : 0;
          const zeroIndex = findZero(uint8Array, offset, uint8Array.length, encoding.encoding);
          const txt = uint8Array.slice(offset, zeroIndex);
          if (encoding.encoding === "utf-16le") {
            offset = zeroIndex + 2;
          } else {
            offset = zeroIndex + 1;
          }
          return {
            text: decodeString(txt, encoding.encoding),
            len: offset
          };
        }
        static fixPictureMimeType(pictureType) {
          pictureType = pictureType.toLocaleLowerCase();
          switch (pictureType) {
            case "jpg":
              return "image/jpeg";
            case "png":
              return "image/png";
          }
          return pictureType;
        }
        /**
         * Converts TMCL (Musician credits list) or TIPL (Involved people list)
         * @param entries
         */
        static functionList(entries) {
          const res = {};
          for (let i = 0; i + 1 < entries.length; i += 2) {
            const names = entries[i + 1].split(",");
            res[entries[i]] = res[entries[i]] ? res[entries[i]].concat(names) : names;
          }
          return res;
        }
        /**
         * id3v2.4 defines that multiple T* values are separated by 0x00
         * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /
         * @param tag - Tag name
         * @param text - Concatenated tag value
         * @returns Split tag value
         */
        splitValue(tag, text) {
          let values;
          if (this.major < 4) {
            values = text.split(/\x00/g);
            if (values.length > 1) {
              this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);
            } else {
              values = text.split(/\//g);
            }
          } else {
            values = text.split(/\x00/g);
          }
          return FrameParser.trimArray(values);
        }
        static trimArray(values) {
          return values.map((value) => value.replace(/\x00+$/, "").trim());
        }
        static readIdentifierAndData(uint8Array, offset, length, encoding) {
          const fzero = findZero(uint8Array, offset, length, encoding);
          const id = decodeString(uint8Array.slice(offset, fzero), encoding);
          offset = fzero + FrameParser.getNullTerminatorLength(encoding);
          return { id, data: uint8Array.slice(offset, length) };
        }
        static getNullTerminatorLength(enc) {
          return enc === "utf-16le" ? 2 : 1;
        }
      }
      class Id3v2ContentError extends makeUnexpectedFileContentError("id3v2") {
      }
      function makeUnexpectedMajorVersionError$1(majorVer) {
        throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);
      }
      const asciiDecoder = new TextDecoder("ascii");
      class ID3v2Parser {
        constructor() {
          this.tokenizer = void 0;
          this.id3Header = void 0;
          this.metadata = void 0;
          this.headerType = void 0;
          this.options = void 0;
        }
        static removeUnsyncBytes(buffer) {
          let readI = 0;
          let writeI = 0;
          while (readI < buffer.length - 1) {
            if (readI !== writeI) {
              buffer[writeI] = buffer[readI];
            }
            readI += buffer[readI] === 255 && buffer[readI + 1] === 0 ? 2 : 1;
            writeI++;
          }
          if (readI < buffer.length) {
            buffer[writeI++] = buffer[readI];
          }
          return buffer.slice(0, writeI);
        }
        static getFrameHeaderLength(majorVer) {
          switch (majorVer) {
            case 2:
              return 6;
            case 3:
            case 4:
              return 10;
            default:
              throw makeUnexpectedMajorVersionError(majorVer);
          }
        }
        static readFrameFlags(b) {
          return {
            status: {
              tag_alter_preservation: getBit(b, 0, 6),
              file_alter_preservation: getBit(b, 0, 5),
              read_only: getBit(b, 0, 4)
            },
            format: {
              grouping_identity: getBit(b, 1, 7),
              compression: getBit(b, 1, 3),
              encryption: getBit(b, 1, 2),
              unsynchronisation: getBit(b, 1, 1),
              data_length_indicator: getBit(b, 1, 0)
            }
          };
        }
        static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {
          var _a, _b;
          const frameParser = new FrameParser(majorVer, warningCollector);
          switch (majorVer) {
            case 2:
              return frameParser.readData(uint8Array, frameHeader.id, includeCovers);
            case 3:
            case 4:
              if ((_a = frameHeader.flags) == null ? void 0 : _a.format.unsynchronisation) {
                uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);
              }
              if ((_b = frameHeader.flags) == null ? void 0 : _b.format.data_length_indicator) {
                uint8Array = uint8Array.slice(4, uint8Array.length);
              }
              return frameParser.readData(uint8Array, frameHeader.id, includeCovers);
            default:
              throw makeUnexpectedMajorVersionError(majorVer);
          }
        }
        /**
         * Create a combined tag key, of tag & description
         * @param tag e.g.: COM
         * @param description e.g. iTunPGAP
         * @returns string e.g. COM:iTunPGAP
         */
        static makeDescriptionTagName(tag, description) {
          return tag + (description ? `:${description}` : "");
        }
        async parse(metadata, tokenizer, options) {
          this.tokenizer = tokenizer;
          this.metadata = metadata;
          this.options = options;
          const id3Header = await this.tokenizer.readToken(ID3v2Header);
          if (id3Header.fileIdentifier !== "ID3") {
            throw new Id3v2ContentError("expected ID3-header file-identifier 'ID3' was not found");
          }
          this.id3Header = id3Header;
          this.headerType = `ID3v2.${id3Header.version.major}`;
          return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);
        }
        async parseExtendedHeader() {
          const extendedHeader = await this.tokenizer.readToken(ExtendedHeader);
          const dataRemaining = extendedHeader.size - ExtendedHeader.len;
          return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);
        }
        async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {
          await this.tokenizer.ignore(dataRemaining);
          return this.parseId3Data(this.id3Header.size - extendedHeaderSize);
        }
        async parseId3Data(dataLen) {
          const uint8Array = await this.tokenizer.readToken(new Uint8ArrayType(dataLen));
          for (const tag of this.parseMetadata(uint8Array)) {
            switch (tag.id) {
              case "TXXX":
                if (tag.value) {
                  await this.handleTag(tag, tag.value.text, () => tag.value.description);
                }
                break;
              default:
                await (Array.isArray(tag.value) ? Promise.all(tag.value.map((value) => this.addTag(tag.id, value))) : this.addTag(tag.id, tag.value));
            }
          }
        }
        async handleTag(tag, values, descriptor, resolveValue = (value) => value) {
          await Promise.all(values.map((value) => this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, descriptor(value)), resolveValue(value))));
        }
        async addTag(id, value) {
          await this.metadata.addTag(this.headerType, id, value);
        }
        parseMetadata(data) {
          let offset = 0;
          const tags = [];
          while (true) {
            if (offset === data.length)
              break;
            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);
            if (offset + frameHeaderLength > data.length) {
              this.metadata.addWarning("Illegal ID3v2 tag length");
              break;
            }
            const frameHeaderBytes = data.slice(offset, offset + frameHeaderLength);
            offset += frameHeaderLength;
            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);
            const frameDataBytes = data.slice(offset, offset + frameHeader.length);
            offset += frameHeader.length;
            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);
            if (values) {
              tags.push({ id: frameHeader.id, value: values });
            }
          }
          return tags;
        }
        readFrameHeader(uint8Array, majorVer) {
          let header;
          switch (majorVer) {
            case 2:
              header = {
                id: asciiDecoder.decode(uint8Array.slice(0, 3)),
                length: UINT24_BE.get(uint8Array, 3)
              };
              if (!header.id.match(/[A-Z0-9]{3}/g)) {
                this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);
              }
              break;
            case 3:
            case 4:
              header = {
                id: asciiDecoder.decode(uint8Array.slice(0, 4)),
                length: (majorVer === 4 ? UINT32SYNCSAFE : UINT32_BE).get(uint8Array, 4),
                flags: ID3v2Parser.readFrameFlags(uint8Array.slice(8, 10))
              };
              if (!header.id.match(/[A-Z0-9]{4}/g)) {
                this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);
              }
              break;
            default:
              throw makeUnexpectedMajorVersionError(majorVer);
          }
          return header;
        }
      } exports("I", ID3v2Parser);
      function makeUnexpectedMajorVersionError(majorVer) {
        throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);
      }

    })
  };
}));

System.register("./__vite-browser-external-pcc57R5k.js", [], (function (exports, module) {
	'use strict';
	return {
		execute: (function () {

			const __viteBrowserExternal = exports("default", {});

		})
	};
}));

System.import("./__entry.js", "./");